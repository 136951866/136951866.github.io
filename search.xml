<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CocoaPods安装</title>
    <url>/2020/03/28/CocoaPods%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>CocoaPods安装</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一切步骤之前一定要先安装Xcode</span><br></pre></td></tr></table></figure>
<h2 id="1-Ruby版本升级到最新"><a href="#1-Ruby版本升级到最新" class="headerlink" title="1.Ruby版本升级到最新"></a>1.Ruby版本升级到最新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;升级Ruby环境，首先需要安装rvm</span><br><span class="line">curl -L get.rvm.io | bash -s stable </span><br><span class="line">source ~&#x2F;.bashrc</span><br><span class="line">source ~&#x2F;.bash_profile</span><br><span class="line">&#x2F;&#x2F;查看rvm版本 当前版本1.29.10</span><br><span class="line">rvm -v </span><br><span class="line">&#x2F;&#x2F;列出ruby可安装的版本信息</span><br><span class="line">rvm list known </span><br><span class="line">&#x2F;&#x2F;安装最新的rudy版本 2.7.0最新版本</span><br><span class="line">rvm install 2.7.0</span><br><span class="line">&#x2F;&#x2F;如果遇到错误有可能没安装brew </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure>
<h2 id="2-Ruby镜像改为ruby-china"><a href="#2-Ruby镜像改为ruby-china" class="headerlink" title="2.Ruby镜像改为ruby-china"></a>2.Ruby镜像改为ruby-china</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gem update --system</span><br><span class="line">gem sources --remove https:&#x2F;&#x2F;rubygems.org&#x2F;</span><br><span class="line">gem sources --add https:&#x2F;&#x2F;gems.ruby-china.com&#x2F;</span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure>
<h2 id="安装pod"><a href="#安装pod" class="headerlink" title="安装pod"></a>安装pod</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gem install -n &#x2F;usr&#x2F;local&#x2F;bin cocoapods</span><br><span class="line">&#x2F;&#x2F;安装本地库</span><br><span class="line">pod setup</span><br><span class="line">&#x2F;&#x2F;查看版本</span><br><span class="line">pod --version</span><br></pre></td></tr></table></figure>

<h2 id="CocoaPods的主要目录"><a href="#CocoaPods的主要目录" class="headerlink" title="CocoaPods的主要目录"></a>CocoaPods的主要目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;repo目录</span><br><span class="line">~&#x2F;.cocoapods</span><br><span class="line">&#x2F;&#x2F;缓存目录</span><br><span class="line">~&#x2F;Library&#x2F;Caches&#x2F;Cocoapods</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo教程</title>
    <url>/2016/03/31/Hexo%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Hexo教程</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h2 id="申请GitHub"><a href="#申请GitHub" class="headerlink" title="申请GitHub"></a>申请GitHub</h2><h2 id="正式安装Hexo"><a href="#正式安装Hexo" class="headerlink" title="正式安装Hexo"></a>正式安装Hexo</h2><h3 id="sudo-npm-install-g-hexo"><a href="#sudo-npm-install-g-hexo" class="headerlink" title="sudo npm install -g hexo"></a>sudo npm install -g hexo</h3><h3 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h3><h3 id="hexo-generate-（生成静态页面）"><a href="#hexo-generate-（生成静态页面）" class="headerlink" title="hexo generate （生成静态页面）"></a>hexo generate （生成静态页面）</h3><h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h3><h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><h3 id="建立与你用户名对应的仓库，仓库名必须为【your-user-name-github-io】，固定写法"><a href="#建立与你用户名对应的仓库，仓库名必须为【your-user-name-github-io】，固定写法" class="headerlink" title="建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法"></a>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法</h3><h3 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改_config.yml文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">     type: git</span><br><span class="line">     repo: https:&#x2F;&#x2F;github.com&#x2F;136951866&#x2F;136951866.github.io.git</span><br><span class="line">     branch: master</span><br></pre></td></tr></table></figure>
<h3 id="npm-install-hexo-deployer-git-–save"><a href="#npm-install-hexo-deployer-git-–save" class="headerlink" title="npm install hexo-deployer-git –save"></a>npm install hexo-deployer-git –save</h3><h3 id="hexo-deploy-部署"><a href="#hexo-deploy-部署" class="headerlink" title="hexo deploy (部署)"></a>hexo deploy (部署)</h3><h3 id="一些常用命令"><a href="#一些常用命令" class="headerlink" title="一些常用命令"></a>一些常用命令</h3><p>hexo new”postName” #新建文章<br>hexo new page”pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub<br>hexo help # 查看帮助<br>hexo version #查看Hexo的版本</p>
<h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>git clone <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a><br>_config.yml 中的 theme 字段设置为 next</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;zhwangart.com&#x2F;2018&#x2F;11&#x2F;30&#x2F;Ocean&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>jenkins部署</title>
    <url>/2020/03/29/Jenkins%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>jenkins部署</p>
<h2 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;至少1.8以上</span><br><span class="line">java -version</span><br><span class="line">&#x2F;&#x2F;JDK1.8下载地址</span><br><span class="line">链接: https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;16s88B4MTutnjLaDmrpZQIw 提取码: mp12</span><br><span class="line">&#x2F;&#x2F;查看是否成功,如果失败可能要配置一下.bash_profile文件</span><br></pre></td></tr></table></figure>
<h3 id="2-安装jenkins"><a href="#2-安装jenkins" class="headerlink" title="2.安装jenkins"></a>2.安装jenkins</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;如果没有Homebrew需要先安装Homebrew</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br><span class="line">&#x2F;&#x2F;安装jenkins</span><br><span class="line">brew install jenkins</span><br><span class="line">&#x2F;&#x2F;安装完成后，启动Jenkins</span><br><span class="line">&#x2F;&#x2F;输入密码,密码在console上或者在initialAdminPassword文件</span><br><span class="line">&#x2F;Users&#x2F;hank&#x2F;.jenkins&#x2F;secrets&#x2F;initialAdminPassword</span><br><span class="line">&#x2F;&#x2F;启动</span><br><span class="line">Jenkins</span><br><span class="line">&#x2F;&#x2F;关闭Jenkins服务:  在Jenkins服务器网址后面加上exit</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;exit</span><br><span class="line">&#x2F;&#x2F;重启Jenkins服务:  在Jenkins服务器网址后面加上restart</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3.安装插件"></a>3.安装插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装默认插件即可,可能第一次安装不成功,安装完成之后获取访问权限,再重新安装</span><br><span class="line">description setter plugin 二维码显示</span><br><span class="line">Manage Jenkins - Manage Plugins - 可选插件</span><br><span class="line">gitee</span><br><span class="line">Xcode integration</span><br><span class="line">keychains and provisioning profiles Management</span><br><span class="line">CocoaPods Jenkins Integration</span><br><span class="line">build Timeout</span><br><span class="line">description setter plugin</span><br><span class="line">Email Extension Plugin</span><br><span class="line">SSH Agent Plugin</span><br><span class="line">workSpace Cleanup Plugin</span><br><span class="line">fir-Plugin &#x2F;&#x2F;只能手动下载http:&#x2F;&#x2F;7xju1s.com1.z0.glb.clouddn.com&#x2F;fir-plugin-1.9.5.hpi 文件使用高级方法上传文件</span><br><span class="line"></span><br><span class="line">upload-pgyer-plugin &#x2F;&#x2F;蒲公英</span><br><span class="line">下载完重启一下http:&#x2F;&#x2F;localhost:8080&#x2F;restart </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置profiles文件"><a href="#配置profiles文件" class="headerlink" title="配置profiles文件"></a>配置profiles文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择系统管理-&gt;点击 Keychains and Provisioning Profiles Management </span><br><span class="line"></span><br><span class="line">固定地址地址:&#x2F;Users&#x2F;Shared&#x2F;Jenkins&#x2F;Library&#x2F;MobileDevice&#x2F;ProvisioningProfiles &#x2F;&#x2F;没有就创建</span><br><span class="line">上传profiles文件</span><br><span class="line"></span><br><span class="line">地址:&#x2F;Users&#x2F;hank&#x2F;Library&#x2F;Keychains 上传System.keychain文件</span><br><span class="line"></span><br><span class="line">Code Signing Identity：打开钥匙串，右击-&gt;显示简介-&gt;复制常用名称，粘贴到下面就OK了</span><br></pre></td></tr></table></figure>

<h3 id="添加凭证-Credentials"><a href="#添加凭证-Credentials" class="headerlink" title="添加凭证 Credentials"></a>添加凭证 Credentials</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.生成公钥匙</span><br><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;  密钥在&#x2F;Users&#x2F;hank&#x2F;.ssh</span><br><span class="line">2.添加到gitee</span><br><span class="line">复制生成后的 ssh key，通过仓库主页 「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」 ，添加生成的 public key 添加到仓库中。</span><br><span class="line">3.ssh -T git@gitee.com</span><br><span class="line">4.把私钥放在jenkins-Credentials的SSH中,注意选择全局</span><br></pre></td></tr></table></figure>

<h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.输入名称 选择Freestyle Project</span><br><span class="line">2.选源码管理-&gt;选择Git -&gt; Repository URL为项目的Git地址（SSH类型）-&gt; Credentials 选择上面创建的</span><br><span class="line">3.构建环境</span><br><span class="line">选中两项 Keychains and Code Signing Identities和Mobile Provisioning Profiles&#x2F;&#x2F;这2个需要我们之前做的操作才会显示</span><br><span class="line">4.构建脚本&#x2F;&#x2F;选择Xocde</span><br><span class="line">Target 项目名字</span><br><span class="line">Clean before build? YES</span><br><span class="line">Configuration Debug</span><br><span class="line">Xcode Schema File   项目名字</span><br><span class="line">Pack application, build and sign .ipa? 勾选</span><br><span class="line">Export method	 development</span><br><span class="line">.ipa filename pattern   HKFileTranfer-$&#123;BUILD_DATE&#125;</span><br><span class="line">Output directory    $&#123;WORKSPACE&#125;&#x2F;build</span><br><span class="line"></span><br><span class="line">Advanced Xcode build options</span><br><span class="line">Clean test reports? Yes</span><br><span class="line">Xcode Workspace File    $&#123;WORKSPACE&#125;&#x2F;项目&#x2F;项目</span><br><span class="line">Build output directory  $&#123;WORKSPACE&#125;&#x2F;build&#x2F;</span><br><span class="line"></span><br><span class="line">5.上传fir.im &#x2F;&#x2F;选择构建后操作步骤- &gt; 选择Upload to fir.im  fir.im Token为注册登录后，可以查看的API Token。</span><br><span class="line">&#x2F;&#x2F;如果选择蒲公英则 apiV2</span><br></pre></td></tr></table></figure>

<h3 id="显示二维图"><a href="#显示二维图" class="headerlink" title="显示二维图"></a>显示二维图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.点击jenkins管理 ---&gt;系统管理----&gt;全局安全配置-safe html</span><br><span class="line">2.选择 set build description</span><br><span class="line">description &lt;a href&#x3D;&quot;$&#123;appShortcutUrl&#125;&quot;&gt;&lt;img src&#x3D;&quot;$&#123;appQRCodeURL&#125;&quot; width&#x3D;&quot;118&quot; height&#x3D;&quot;118&quot;&#x2F;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">3.注意set build description与apiV2的顺序</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>RunTime</title>
    <url>/2021/04/22/RunTime/</url>
    <content><![CDATA[<p>runtime 的部分功能解析（持续更新)</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    1.NSObject</span><br><span class="line">        @interface NSObject &lt;NSObject&gt; &#123;</span><br><span class="line">        #pragma clang diagnostic push</span><br><span class="line">        #pragma clang diagnostic ignored &quot;-Wobjc-interface-ivars&quot;</span><br><span class="line">            Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">        #pragma clang diagnostic pop</span><br><span class="line">        &#125;</span><br><span class="line">    *&#x2F;</span><br><span class="line">   NSObject *obj &#x3D; [NSObject new];</span><br><span class="line">   </span><br><span class="line">   &#x2F;*</span><br><span class="line">    2.Class</span><br><span class="line">        typedef struct objc_class *Class;</span><br><span class="line">        struct objc_class &#123;</span><br><span class="line">            Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"></span><br><span class="line">        #if !__OBJC2__</span><br><span class="line">            Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class="line">            const char * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class="line">            long version                                             OBJC2_UNAVAILABLE;</span><br><span class="line">            long info                                                OBJC2_UNAVAILABLE;</span><br><span class="line">            long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class="line">            struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class="line">            struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class="line">            struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class="line">            struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class="line">        #endif</span><br><span class="line"></span><br><span class="line">        &#125; OBJC2_UNAVAILABLE;</span><br><span class="line">    注:</span><br><span class="line">       元类生成类对象，类对象生成对象（对象的isa指向类对象，类对象的isa指向元类,元类的isa指向根元类，根元类的isa指向自己）</span><br><span class="line">       根元类的父类指向元类，元类的父类指向nil 类方法是存储在元类里的，所以当你调用一个类方法，会在元类里面顺着关系链去找这个方法，如图，当在NSObject元类里找不到类方法时，会转到NSObject类里去找，而NSObject类里存储的是实例方法，这意味着如果通过类方法的方式调用NSObject类里的实例方法，也是可以的。</span><br><span class="line">           [self methodForSelector:@selector(tes)];&#x2F;&#x2F;methodForSelector是NSObject的实例方法，但是NSObject的子类却可以通过类方法的方式调用</span><br><span class="line">    *&#x2F;</span><br><span class="line">   Class isa;</span><br><span class="line">   &#x2F;*</span><br><span class="line">    3.消息传递</span><br><span class="line">        [obj  init];</span><br><span class="line">        1.即开始先从cache查找</span><br><span class="line">        2.如果缓存命中，直接返回imp。如果没有命中，继续往下走，先判断类有没有加载到内存，如果没有，先加载类,在类对象的方法列表查找imp:</span><br><span class="line">        3.如果没有找到，继续在父类的缓存的方法列表中查找imp。</span><br><span class="line">        4.imp还没有找到，则尝试做一次动态方法解析：</span><br><span class="line">    *&#x2F;</span><br><span class="line">   [obj  init];</span><br><span class="line">   ((void (*)(id, SEL))(void *)objc_msgSend)((id)obj, sel_registerName(&quot;init&quot;));</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   &#x2F;*</span><br><span class="line">    4.消息转发</span><br><span class="line">       </span><br><span class="line">    *&#x2F;</span><br><span class="line">   Person * p &#x3D; [Person new];</span><br><span class="line">   NSLog(@&quot;%@&quot;,[p msgTest:@&quot;123&quot;]);</span><br><span class="line">   </span><br><span class="line">   @implementation Person</span><br><span class="line">   </span><br><span class="line">   &#x2F;*</span><br><span class="line">    SEL    代表方法的名称  Runtime期间的标识符</span><br><span class="line">    IMP    代表函数指针，即函数执行的入口</span><br><span class="line">    Method</span><br><span class="line">           struct objc_method &#123;</span><br><span class="line">               SEL method_name;</span><br><span class="line">               char *method_types;</span><br><span class="line">               IMP method_imp;</span><br><span class="line">           &#125;;</span><br><span class="line">    </span><br><span class="line">    *&#x2F;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   &#x2F;*</span><br><span class="line">   1.动态方法解析</span><br><span class="line">       cls:要添加方法的类</span><br><span class="line">       name:选择器</span><br><span class="line">       imp:方法实现,IMP在objc.h中的定义是：typedef id (*IMP)(id, SEL, ...);该方法至少有两个参数,self(id)和_cmd(SEL)</span><br><span class="line">       types:方法,参数和返回值的描述,&quot;v@:&quot;表示返回值为void,没有参数</span><br><span class="line">   *&#x2F;</span><br><span class="line">   + (BOOL)resolveInstanceMethod:(SEL)sel&#123;</span><br><span class="line">       if (sel &#x3D;&#x3D; @selector(msgTest:))&#123;</span><br><span class="line">           &#x2F;&#x2F;进入第二步</span><br><span class="line">           return NO;</span><br><span class="line">           &#x2F;&#x2F;class_addMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp,const char * _Nullable types)</span><br><span class="line">           &#x2F;&#x2F;return  class_addMethod([self class],sel, (IMP)reTest, &quot;@@:@&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       return [super resolveInstanceMethod:sel];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   id reTest(id self, SEL _cmd,id a) &#123;</span><br><span class="line">       NSLog(@&quot;test---%@&quot;,a);</span><br><span class="line">       return [NSString stringWithFormat:@&quot;test2---%@&quot;,a];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   &#x2F;*</span><br><span class="line">   2.消息重定向</span><br><span class="line">    创建一个新的类RePerson，该类包含有msgTest的实现方法。</span><br><span class="line">   *&#x2F;</span><br><span class="line">   - (id)forwardingTargetForSelector:(SEL)aSelector&#123;</span><br><span class="line">   &#x2F;&#x2F;    if (aSelector &#x3D;&#x3D; @selector(msgTest:))&#123;</span><br><span class="line">   &#x2F;&#x2F;        return  [RePerson new];</span><br><span class="line">   &#x2F;&#x2F;    &#125;</span><br><span class="line">       return [super forwardingTargetForSelector:aSelector];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   &#x2F;*</span><br><span class="line">   3.消息转发</span><br><span class="line">    *&#x2F;</span><br><span class="line">   - (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector&#123;</span><br><span class="line">       return [NSMethodSignature signatureWithObjCTypes:&quot;@@:@1&quot;];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   - (void)forwardInvocation:(NSInvocation *)anInvocation&#123;</span><br><span class="line">       if (anInvocation.selector &#x3D;&#x3D; @selector(msgTest:))&#123;</span><br><span class="line">           [anInvocation invokeWithTarget:[RePerson new]];</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       [super forwardInvocation:anInvocation];</span><br><span class="line">   &#125;</span><br><span class="line">   @end</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   @implementation RePerson</span><br><span class="line">   </span><br><span class="line">   - (NSString *)msgTest:(NSString *)a&#123;</span><br><span class="line">       NSLog(@&quot;test---%@&quot;,a);</span><br><span class="line">       return [NSString stringWithFormat:@&quot;test2---%@&quot;,a];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   - (NSString *)msgTest:(NSString *)a b:(NSString *)b&#123;</span><br><span class="line">       NSLog(@&quot;test---%@ %@&quot;,a,b);</span><br><span class="line">       return [NSString stringWithFormat:@&quot;test2---%@&quot;,a];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   @end</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2020/07/15/Vue/</url>
    <content><![CDATA[<p>Vue 简单的一些知识点</p>
<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.下载安装包</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm</span><br><span class="line"></span><br><span class="line">2.安装nrm（切换源的工具）</span><br><span class="line">sudo npm install nrm -g</span><br><span class="line">&#x2F;&#x2F;切换源到taobao</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">empty project</span><br><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">在根目录 npm init</span><br><span class="line">&#x2F;&#x2F;安装vue</span><br><span class="line">npm install vue --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;vscode !tab &#x3D; 生成html</span><br></pre></td></tr></table></figure>

<h2 id="vue-简单实用"><a href="#vue-简单实用" class="headerlink" title="vue 简单实用"></a>vue 简单实用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.具体一些属性可以上 https:&#x2F;&#x2F;www.runoob.com&#x2F;vue2&#x2F;vue-tutorial.html  查阅</span><br><span class="line">&lt;!-- </span><br><span class="line"></span><br><span class="line">    使用v-text和v-html代替&#123;&#123;&#125;&#125;</span><br><span class="line">    v-text：普通文本</span><br><span class="line">    v-html：普通文本并且被渲染</span><br><span class="line"></span><br><span class="line"> --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;handleClick&quot;&gt;click&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;num&quot;&gt; </span><br><span class="line">        &lt;button @click&#x3D;&quot;num++&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;h1&gt; &#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">        &#123;&#123;num&#125;&#125;数字</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-model --&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input type &#x3D; &quot;checkbox&quot; v-model&#x3D;&quot;lesson&quot; value&#x3D;&quot;1&quot;&#x2F;&gt;1 &lt;br&gt;</span><br><span class="line">        &lt;input type &#x3D; &quot;checkbox&quot; v-model&#x3D;&quot;lesson&quot; value&#x3D;&quot;2&quot;&#x2F;&gt;2 &lt;br&gt;</span><br><span class="line">        &lt;input type &#x3D; &quot;checkbox&quot; v-model&#x3D;&quot;lesson&quot; value&#x3D;&quot;3&quot;&#x2F;&gt;3 &lt;br&gt;</span><br><span class="line">        &#123;&#123;lesson.join(&quot;,&quot;)&#125;&#125;</span><br><span class="line">        &lt;!-- v-on --&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;div style&#x3D;&quot;width: 100px;height: 100px;background-color: red;&quot; @click&#x3D;&quot;print(&#39;div&#39;)&quot;&gt;</span><br><span class="line">            &lt;!-- </span><br><span class="line">                stop 不让button 往上冒泡 </span><br><span class="line">                prevent 阻止默认事件发送</span><br><span class="line">                capture 使用事件捕获模式</span><br><span class="line">                self 只有元素自身触发事件才执行</span><br><span class="line">                once 只执行一次</span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;button @click.stop&#x3D;&quot;print(&#39;button&#39;)&quot;&gt;click&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot; @click.prevent.stop&#x3D;&quot;print(&#39;a&#39;)&quot;&gt;baidu.com&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-for --&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;u in users&quot;&gt;</span><br><span class="line">                &#123;&#123;u.name&#125;&#125;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-if 事件直接写js--&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;switch&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;h1 v-if&#x3D;&quot;show&quot;&gt;</span><br><span class="line">            &lt;!-- 直接干掉 --&gt;</span><br><span class="line">            if show</span><br><span class="line">        &lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h1 v-show&#x3D;&quot;show&quot;&gt;</span><br><span class="line">            &lt;!-- 通过display:none--&gt;</span><br><span class="line">            show show</span><br><span class="line">        &lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;.&#x2F;node_modules&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            name: &quot;hello&quot;,</span><br><span class="line">            num: 0,</span><br><span class="line">            lesson:[],</span><br><span class="line">            users:[</span><br><span class="line">                &#123;name:&#39;1&#39;,age:21&#125;,</span><br><span class="line">                &#123;name:&#39;2&#39;,age:22&#125;,</span><br><span class="line">                &#123;name:&#39;3&#39;,age:23&#125;,</span><br><span class="line">            ],</span><br><span class="line">            show : false</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line">                console.log(&quot;hello&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            print(msg)&#123;</span><br><span class="line">                console.log(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">            &#x2F;&#x2F;先后天发送ajax请求，完成初始化</span><br><span class="line">            this.name &#x3D; &quot;hello&quot;;</span><br><span class="line">            this.num &#x3D; &quot;hello&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">     &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">     &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">     &lt;title&gt;hello&lt;&#x2F;title&gt;</span><br><span class="line">     &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            color: darkgray;</span><br><span class="line">        &#125;</span><br><span class="line">        .red&#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .blue&#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-bind  用于绑定不是vue的特有属性 --&gt;</span><br><span class="line">         &lt;button @click&#x3D;&quot;color&#x3D;&#39;red&#39;&quot;&gt; red &lt;&#x2F;button&gt;</span><br><span class="line">         &lt;button @click&#x3D;&quot;color&#x3D;&#39;blue&#39;&quot;&gt; blue &lt;&#x2F;button&gt;</span><br><span class="line">         &lt;div id&#x3D;&quot;box&quot; v-bind:class&#x3D;&quot;color&quot;&gt;</span><br><span class="line">            box</span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 计算属性 --&gt;</span><br><span class="line">         &lt;br&gt;</span><br><span class="line">         &lt;h1&gt;</span><br><span class="line">            f:&#123;&#123;bd&#125;&#125;</span><br><span class="line">            s:&#123;&#123;bdcount&#125;&#125;</span><br><span class="line">         &lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- watch --&gt;</span><br><span class="line">         &lt;br&gt;</span><br><span class="line">         &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;num&quot; &gt;</span><br><span class="line">         &lt;h1&gt;num:&#123;&#123;num&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;.&#x2F;node_modules&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">     const app &#x3D; new Vue(&#123;</span><br><span class="line">         el:&quot;#app&quot;,</span><br><span class="line">         data:&#123;</span><br><span class="line">            color:&quot;red&quot;,</span><br><span class="line">            bd: 0,</span><br><span class="line">            num:0</span><br><span class="line">         &#125;,</span><br><span class="line">         computed: &#123;</span><br><span class="line">             bdcount: function ()&#123;</span><br><span class="line">                return  this.bd + 1;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         watch:&#123;</span><br><span class="line">            num(o,n)&#123;</span><br><span class="line">                console.log(o+&quot; &quot;+n);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">     &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">     &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">     &lt;title&gt;hello&lt;&#x2F;title&gt;</span><br><span class="line">     &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;counter&gt;&lt;&#x2F;counter&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;.&#x2F;node_modules&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;  定义全局组件</span><br><span class="line">    Vue.component(&quot;counter&quot;,&#123;</span><br><span class="line">        template:&quot;&lt;button @click&#x3D;&#39;count++&#39;&gt; click&#123;&#123;count&#125;&#125;&lt;&#x2F;button&gt;&quot;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                count:0,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; 局部组件</span><br><span class="line">    const counter &#x3D; &#123;</span><br><span class="line">        template:&quot;&lt;button @click&#x3D;&#39;count++&#39;&gt; click&#123;&#123;count&#125;&#125;&lt;&#x2F;button&gt;&quot;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                count:0,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     const app &#x3D; new Vue(&#123;</span><br><span class="line">         el:&quot;#app&quot;,</span><br><span class="line">         data:&#123;</span><br><span class="line">            </span><br><span class="line">         &#125;,</span><br><span class="line">         components:&#123;</span><br><span class="line">             counter:counter</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">     &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">     &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">     &lt;title&gt;hello&lt;&#x2F;title&gt;</span><br><span class="line">     &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h1&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">         &lt;!-- 父传子 双方对应属性通过props来对应--&gt;</span><br><span class="line">        &lt;introduce :title&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;introduce&gt;</span><br><span class="line">        &lt;forc :items&#x3D;&quot;les&quot;&gt;&lt;&#x2F;forc&gt;</span><br><span class="line">        &lt;!-- 子传父 双方定义方法 通过this.$emit 来对应--&gt;</span><br><span class="line">        &lt;counter :num&#x3D;&quot;count&quot; @incr&#x3D;&quot;add&quot;&gt;&lt;&#x2F;counter&gt;</span><br><span class="line"></span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;.&#x2F;node_modules&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 局部组件</span><br><span class="line">    const introduce &#x3D; &#123;</span><br><span class="line">        template:&quot;&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;&quot;,</span><br><span class="line">        &#x2F;&#x2F;从父上拿</span><br><span class="line">        props:[&#39;title&#39;]</span><br><span class="line">    &#125;;   </span><br><span class="line">     const forc &#x3D; &#123;</span><br><span class="line">        template:&quot;&lt;ul&gt;&lt;li v-for&#x3D;&#39;m in items&#39;&gt;&#123;&#123;m&#125;&#125;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&quot;,</span><br><span class="line">        &#x2F;&#x2F;从父上拿</span><br><span class="line">        props:[&#39;items&#39;]</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     const counter&#x3D; &#123;</span><br><span class="line">        template:&quot;&lt;button @click&#x3D;&#39;handleAdd&#39;&gt; click &#123;&#123;num&#125;&#125;&lt;&#x2F;button&gt;&quot;,</span><br><span class="line">        &#x2F;&#x2F;从父上拿</span><br><span class="line">        props:[&#39;num&#39;],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleAdd()&#123;</span><br><span class="line">                this.$emit(&#39;incr&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     const app &#x3D; new Vue(&#123;</span><br><span class="line">         el:&quot;#app&quot;,</span><br><span class="line">         data:&#123;</span><br><span class="line">            msg:&quot;hello&quot;,</span><br><span class="line">            les:[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;],</span><br><span class="line">            count:0</span><br><span class="line">         &#125;,</span><br><span class="line">         components:&#123;</span><br><span class="line">            introduce,</span><br><span class="line">            forc,</span><br><span class="line">            counter</span><br><span class="line">         &#125;,</span><br><span class="line">         methods:&#123;</span><br><span class="line">            add()&#123;</span><br><span class="line">                this.count++;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于打包</span><br><span class="line"></span><br><span class="line">npm install -g vue-cli</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Use ESLint to lint your code? 全部选no</span><br><span class="line">vue init webpack</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;运行</span><br><span class="line">npm run dev</span><br><span class="line">&#x2F;&#x2F;如果运行错误就,删除node_modules 再npm install sudo npm build </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>flutter环境搭建</title>
    <url>/2020/04/03/flutter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>flutter环境搭建</p>
<h2 id="1-下载flutter-sdk"><a href="#1-下载flutter-sdk" class="headerlink" title="1.下载flutter sdk"></a>1.下载flutter sdk</h2><p><a href="https://flutter.io/setup-macos/">sdk地址</a></p>
<h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><ul>
<li>把sdk解压到某个目录下</li>
<li>vim ~/.bash_profile </li>
<li>export PATH=sdk解压的目录/bin:$PATH</li>
<li>source ~/.bash_profile<h2 id="3-检查flutter开发环境"><a href="#3-检查flutter开发环境" class="headerlink" title="3.检查flutter开发环境"></a>3.检查flutter开发环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br><span class="line">缺少什么就安装什么（以下列举几项常见的）</span><br><span class="line">Android Studio地址：http:&#x2F;&#x2F;www.android-studio.org&#x2F;  （第一次打开因为没有Android sdk 会出现Unable to access Android SDK add-on） list，直接关掉即可，一直next到下载sdk</span><br><span class="line">Xcode：appstore 需要和系统同步</span><br><span class="line">flutter doctor --android-licenses (一直y)</span><br><span class="line">cocoapods （安装具体看博客的2020CocoaPods文章）</span><br><span class="line">Android Studio 还需要安装 Dart和flutter 插件 （打开as -Plugin-搜索-install 安装完成重启一下AS即可）</span><br><span class="line">VScode 下载，装Flutter extension （awesome flutter snippets 也可以安装一下，代码块，flutter-stylizer api补齐，Bracket Pair Colorizer 括号颜色，GitLens git）</span><br></pre></td></tr></table></figure>
<h2 id="4-设置Pub源"><a href="#4-设置Pub源" class="headerlink" title="4.设置Pub源"></a>4.设置Pub源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.bash_profile</span><br><span class="line">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</span><br><span class="line">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-几个常见命令"><a href="#5-几个常见命令" class="headerlink" title="5.几个常见命令"></a>5.几个常见命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter run</span><br><span class="line">r 键：点击后热加载，也就算是重新加载吧。</span><br><span class="line">p 键：显示网格，这个可以很好的掌握布局情况，工作中很有用。</span><br><span class="line">o 键：切换android和ios的预览模式。</span><br><span class="line">q 键：退出调试预览模式。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
  </entry>
  <entry>
    <title>iOS马甲包制作流程</title>
    <url>/2020/05/15/iOS%E9%A9%AC%E7%94%B2%E5%8C%85%E5%88%B6%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>iOS马甲包制作流程</p>
<h1 id="修改项目"><a href="#修改项目" class="headerlink" title="修改项目"></a>修改项目</h1><ul>
<li>1.直接点击工程名，敲Enter，如图，输入新工程名，再敲Enter，会有一个弹框点Rename<br><img src="http://hank.image.alimmdn.com/blog/5710765-7da5740dd22cb908.png" alt="image"><br><img src="http://hank.image.alimmdn.com/blog/5710765-8893dfb065e59638.png" alt="image"></li>
<li>选电脑状态栏 Product-&gt;Scheme-&gt;Edit Scheme-&gt;Manage Scheme<br><img src="http://hank.image.alimmdn.com/blog/5710765-21b001f5377d82a1.png" alt="image"></li>
<li>选择跟文件夹，敲回车，输入新工程名，敲回车<br><img src="http://hank.image.alimmdn.com/blog/5710765-cccd8c551a0133dd.png" alt="image"></li>
<li>选择电脑状态栏Find-&gt;Find and Replace in Workspace 选择Replace，第一个输入框输入旧工程名，敲回车，下面的输入框输入新工程名，点Replace All。<br><img src="http://hank.image.alimmdn.com/blog/5710765-c361da721fe07580.png" alt="image"></li>
<li>PROJECT-&gt;Build Setting-&gt;Info.plist File，旧名字(TaoBao/Info.plist)，改为新名字（JingDong/Info.plist）</li>
<li>修改最外层文件夹名字。敲回车修改，子文件夹的不需要动<img src="http://hank.image.alimmdn.com/blog/5710765-de23e9d1dfb21a40.png" alt="image"></li>
<li>点击TaoBao.xcodeproj 选显示包内容，双击打开project.pbxproj<br><img src="http://hank.image.alimmdn.com/blog/5710765-adc925a98e0dc2ac.png" alt="image"></li>
<li>如果使用cocopods管理第三方，应当删除与之相关的那三项<br><img src="http://hank.image.alimmdn.com/blog/5710765-6412458a02c2619d.png" alt="image"></li>
<li>打开命令行重新执行：pod install (注意 不要用 pod install –verbose –no-repo-update )。</li>
</ul>
<h1 id="修改项目文件前缀"><a href="#修改项目文件前缀" class="headerlink" title="修改项目文件前缀"></a>修改项目文件前缀</h1><h3 id="修改文件执行-python-py"><a href="#修改文件执行-python-py" class="headerlink" title="修改文件执行 python *.py"></a>修改文件执行 python *.py</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*</span><br><span class="line">import os</span><br><span class="line">#需要修改的类名前缀 （需替换）</span><br><span class="line">pre_str &#x3D; &#39;taobao&#39;</span><br><span class="line"># 新的类名前缀 （需替换）</span><br><span class="line">pre_to_str &#x3D; &#39;jindong&#39;</span><br><span class="line"></span><br><span class="line">header 1 | header 2</span><br><span class="line">---|---</span><br><span class="line">row 1 col 1 | row 1 col 2</span><br><span class="line">row 2 col 1 | row 2 col 2</span><br><span class="line"></span><br><span class="line"># 搜寻以下文件类型 （根据自己需求替换）</span><br><span class="line">suf_set &#x3D; (&#39;.h&#39;, &#39;.m&#39;, &#39;.xib&#39;, &#39;.storyboard&#39;, &#39;.mm&#39;)</span><br><span class="line"># 项目路径   （找到自己的项目路径）</span><br><span class="line">project_path &#x3D; &#39;&#x2F;Users&#x2F;hank&#x2F;Desktop&#x2F;xykgj-ios&#x2F;MMXYKGJ&#39;</span><br><span class="line"># 项目project.pbxproj文件路径 需要更新配置文件中的类名 （找到自己的项目project.pbxproj路径）</span><br><span class="line">pbxpro_path &#x3D; &#39;&#x2F;Users&#x2F;hank&#x2F;Desktop&#x2F;xykgj-ios&#x2F;MMXYKGJ.xcodeproj&#x2F;project.pbxproj&#39;</span><br><span class="line"></span><br><span class="line">#文件重命名函数，返回新的文件名</span><br><span class="line">def file_rename(file_path):</span><br><span class="line">    root_path &#x3D; os.path.split(file_path)[0]     # 文件目录</span><br><span class="line">    root_name &#x3D; os.path.split(file_path)[1]     # 文件名包含扩展名</span><br><span class="line">    filename &#x3D; os.path.splitext(root_name)[0];  # 文件名</span><br><span class="line">    filetype &#x3D; os.path.splitext(root_name)[1];  # 文件扩展名</span><br><span class="line">    </span><br><span class="line">    new_path &#x3D; os.path.join(root_path, filename.replace(pre_str, pre_to_str) + filetype)    # 拼接新路径</span><br><span class="line">    os.renames(file_path, new_path)             # 文件重命名</span><br><span class="line">    return filename.replace(pre_str, pre_to_str)</span><br><span class="line"></span><br><span class="line"># 定义一个字典 key&#x3D;旧类名 value&#x3D;新类名</span><br><span class="line">needModifyDic &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 遍历文件，符合规则的进行重命名</span><br><span class="line">for (root, dirs, files) in os.walk(project_path):</span><br><span class="line">    for file_name in files:</span><br><span class="line">        if file_name.startswith((pre_str,)) and file_name.endswith(suf_set):</span><br><span class="line">            old_name &#x3D; os.path.splitext(file_name)[0]</span><br><span class="line">            new_name &#x3D; file_rename(os.path.join(root, file_name))</span><br><span class="line">            needModifyDic[old_name] &#x3D; new_name</span><br><span class="line"></span><br><span class="line"># 遍历文件，在文件中更换新类名的引用</span><br><span class="line">print(needModifyDic)</span><br><span class="line">for (root, dirs, files) in os.walk(project_path):</span><br><span class="line">    for file_name in files:</span><br><span class="line">        if file_name.endswith(suf_set):</span><br><span class="line">            print(&#39;-----fileName-------&#39; + file_name)</span><br><span class="line">            with open(os.path.join(root, file_name), &#39;r+&#39;) as f:</span><br><span class="line">                print(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;fileName&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39; + file_name)</span><br><span class="line">                s0 &#x3D; f.read()</span><br><span class="line">                f.close()</span><br><span class="line">                for key in needModifyDic:</span><br><span class="line">                    if key in s0:</span><br><span class="line">                        with open(os.path.join(root, file_name), &#39;r+&#39;) as f4:</span><br><span class="line">                            s1 &#x3D; f4.read().replace(key, needModifyDic[key])</span><br><span class="line">                            print(key + &#39; ------&gt; &#39; + needModifyDic[key])</span><br><span class="line">                            f4.seek(0)</span><br><span class="line">                            f4.write(s1)</span><br><span class="line">                            f4.truncate()</span><br><span class="line">                            f4.close()</span><br><span class="line"># 替换配置文件中的类名</span><br><span class="line">for key in needModifyDic:</span><br><span class="line">    with open(pbxpro_path, &#39;r+&#39;) as f:</span><br><span class="line">        s0 &#x3D; f.read()</span><br><span class="line">        f.close()</span><br><span class="line">        if key in s0:</span><br><span class="line">            with open(pbxpro_path, &#39;r+&#39;) as f2:</span><br><span class="line">                s &#x3D; f2.read().replace(key, needModifyDic[key])</span><br><span class="line">                f2.seek(0)</span><br><span class="line">                f2.write(s)</span><br><span class="line">                f2.truncate()</span><br><span class="line">                f2.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="给本地图片添加MD5-python3"><a href="#给本地图片添加MD5-python3" class="headerlink" title="给本地图片添加MD5(python3)"></a>给本地图片添加MD5(python3)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">import os</span><br><span class="line"># 获取MD5</span><br><span class="line">def GetFileMd5(filename):</span><br><span class="line">    if not os.path.isfile(filename):</span><br><span class="line">        return</span><br><span class="line">    myhash &#x3D; hashlib.md5()</span><br><span class="line">    f &#x3D; open(filename,&#39;rb&#39;)</span><br><span class="line">    while True:</span><br><span class="line">        b &#x3D; f.read(8096)</span><br><span class="line">        if not b :</span><br><span class="line">            break</span><br><span class="line">        myhash.update(b)</span><br><span class="line">    f.close()</span><br><span class="line">    return myhash.hexdigest()</span><br><span class="line"># 给文件添加末尾，改变md5</span><br><span class="line">def fileAppend(filename):</span><br><span class="line">    myfile &#x3D; open(filename,&#39;a&#39;)</span><br><span class="line">    # 添加一个自定义内容，并不影响文件</span><br><span class="line">    myfile.write(&quot;jneth&quot;)</span><br><span class="line">    myfile.close</span><br><span class="line"># 设置以这些结尾的</span><br><span class="line">suf_set &#x3D; (&#39;.png&#39;, &#39;.jpg&#39;)</span><br><span class="line">#project_path &#x3D; &#39;&#x2F;Users&#x2F;hyjt&#x2F;Desktop&#x2F;****&#x2F;qiyuan-ios&#x2F;car&#x2F;car&#x2F;&#39;</span><br><span class="line">project_path &#x3D; &#39;&#x2F;Users&#x2F;maimang&#x2F;Desktop&#x2F;项目&#x2F;zbyq-ios&#39;</span><br><span class="line"></span><br><span class="line"># 遍历文件，符合规则的进行重命名</span><br><span class="line"># 项目路径   （找到自己的项目路径）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (root, dirs, files) in os.walk(project_path):</span><br><span class="line">    for file_name in files:</span><br><span class="line">        if file_name.endswith(suf_set):</span><br><span class="line">            short_name &#x3D; os.path.splitext(file_name)[0]</span><br><span class="line">            realpath &#x3D; os.path.join(root, file_name)</span><br><span class="line">            print(short_name + &#39; &#x3D;&#x3D;&gt; &#39; + realpath)</span><br><span class="line">            oldMd5 &#x3D; GetFileMd5(realpath)</span><br><span class="line">            fileAppend(realpath)</span><br><span class="line">            newMd5 &#x3D; GetFileMd5(realpath)</span><br><span class="line">            print(oldMd5 + &#39;--&gt;&#39; + newMd5)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="修改文件的xcodeproj"><a href="#修改文件的xcodeproj" class="headerlink" title="修改文件的xcodeproj"></a>修改文件的xcodeproj</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PythonToolBox</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;iOSCoda&#x2F;PythonToolBox</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>springBoot</title>
    <url>/2021/07/15/springBoot/</url>
    <content><![CDATA[<p>springBoot 搭建时的一些记录</p>
<h1 id="Day1-springBoot"><a href="#Day1-springBoot" class="headerlink" title="Day1 springBoot"></a>Day1 springBoot</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol>
<li><a href="https://spring.io/projects/spring-boot">springBoot</a>可以尽可能少的减少一切xml的配置和依赖管理，可以帮我们快速的搭建环境。</li>
<li>使用IntelliJ IDEA<br><a href="https://www.sdbeta.com/wg/206951.html">下载地址</a> </li>
<li>搭建一个web项目<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;新建项目-修改pom.xml</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;cn.itcase.demo&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springboot-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br><span class="line">&#x2F;&#x2F; 创建一个入口</span><br><span class="line">package cn.itcast;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class BootDemoApplication &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        SpringApplication.run(BootDemoApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建一个访问路径</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">@Controller &#x2F;&#x2F;如果使用@RestController的话就不需要使用@ResponseBody</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @GetMapping(&quot;hello&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return &quot;hello,springboot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>Java配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 不使用Spring boot</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.依赖</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.配置文件 jdbc.properties</span><br><span class="line">jdbc.driverClassName&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;yun6</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;123</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.配置类       </span><br><span class="line">package cn.itcast.config;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="line">public class JdbcConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br><span class="line">    String url;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)</span><br><span class="line">    String driverClassName;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br><span class="line">    String username;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource dataSource()&#123;</span><br><span class="line">        DruidDataSource ds &#x3D; new DruidDataSource();</span><br><span class="line">        ds.setDriverClassName(driverClassName);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        return ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;4.注入</span><br><span class="line">@Autowired</span><br><span class="line">private DataSource ds;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用springBoot注入</span><br><span class="line"></span><br><span class="line">0.依赖（主动生成get set）</span><br><span class="line">&#x2F;&#x2F;先到plugins钟安装lombok插件</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">        </span><br><span class="line">1.创建配置文件默认(名字不能错) application.properties</span><br><span class="line">jdbc.driverClassName&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;yun6</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;123</span><br><span class="line">2.配置属性类</span><br><span class="line">package cn.itcast.config;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;jdbc&quot;)</span><br><span class="line">@Data &#x2F;&#x2F;主动生成get set 需要依赖lombok</span><br><span class="line">public class JdbcProperties &#123;</span><br><span class="line">    String url;</span><br><span class="line">    String driverClassName;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br><span class="line">3.配置类</span><br><span class="line">package cn.itcast.config;</span><br><span class="line">import com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.PropertySource;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">&#x2F;&#x2F;使用配置属性</span><br><span class="line">@EnableConfigurationProperties(JdbcProperties.class)</span><br><span class="line">public class JdbcConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource dataSource(JdbcProperties projp)&#123;</span><br><span class="line">        DruidDataSource ds &#x3D; new DruidDataSource();</span><br><span class="line">        ds.setDriverClassName(projp.getDriverClassName());</span><br><span class="line">        ds.setUrl(projp.getUrl());</span><br><span class="line">        ds.setUsername(projp.getUsername());</span><br><span class="line">        ds.setPassword(projp.getPassword());</span><br><span class="line">        return ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;更优雅的方法（以上方法适用于多个地方调用的 ）</span><br><span class="line"></span><br><span class="line">1.创建配置文件默认(名字不能错) application.properties</span><br><span class="line">jdbc.driverClassName&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;yun6</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;123</span><br><span class="line"></span><br><span class="line">2.配置类</span><br><span class="line">package cn.itcast.config;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.PropertySource;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">public class JdbcConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    &#x2F;&#x2F;声明要注入的属性前缀，springboot会自动把相关属性set方法注入到datasource中</span><br><span class="line">    @ConfigurationProperties(prefix &#x3D; &quot;jdbc&quot;)</span><br><span class="line">    public DataSource dataSource()&#123;</span><br><span class="line">        return new DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
5 .使用yaml/yml代替properties<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;2个文件都有就取并集</span><br><span class="line">application.yaml</span><br><span class="line">jdbc:</span><br><span class="line">  driverClassName: com.mysql.jdbc.Driver</span><br><span class="line">  jdbc.url:jdbc: mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;yun6</span><br><span class="line">  jdbc.username: root</span><br><span class="line">  jdbc.password: 123</span><br><span class="line">  server.port: 9000</span><br><span class="line">  </span><br><span class="line">  #类</span><br><span class="line">  user:</span><br><span class="line">    age: 10</span><br><span class="line">#    集合</span><br><span class="line">    lau:</span><br><span class="line">      - php</span><br><span class="line">      - ios</span><br><span class="line">      </span><br><span class="line">    server:</span><br><span class="line">      #映射端口号</span><br><span class="line">      port: 8088</span><br><span class="line">      #访问路径</span><br><span class="line">      servlet:</span><br><span class="line">        path: &quot;*.do&quot;</span><br><span class="line">    #log</span><br><span class="line">    logging:</span><br><span class="line">      level:</span><br><span class="line">        cn.itcast: debug</span><br></pre></td></tr></table></figure>
6 . 部署mysql<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.下载MySQL和下载MySQLWorkBench</span><br><span class="line">下载地址：https:&#x2F;&#x2F;dev.mysql.com&#x2F;downloads&#x2F;mysql&#x2F;</span><br><span class="line">Oracle官网账号</span><br><span class="line">用户名：541509124@qq.com</span><br><span class="line">密码：LR4ever.1314</span><br><span class="line">https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;27960044 （教程）</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yajunLi&#x2F;p&#x2F;6427909.html (下载地址)</span><br></pre></td></tr></table></figure>
7 . 拦截器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.拦截器</span><br><span class="line">package cn.itcast.interceptor;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D; private static final Logger log &#x3D; LoggerFactory.getLogger(MyInterceptor.class);</span><br><span class="line">@Slf4j</span><br><span class="line">public class MyInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    private static final Logger log &#x3D; LoggerFactory.getLogger(MyInterceptor.class);</span><br><span class="line">&#x2F;&#x2F;    private static final Logger log &#x3D; LoggerFactory.getLogger(MyInterceptor.class); &#x3D;&#x3D; @Slf4j</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        log.debug(&quot;preHandle methond is running&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        log.debug(&quot;postHandle methond is running&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        log.debug(&quot;afterCompletion methond is running&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.mvcConfig</span><br><span class="line">package cn.itcast.mvcConfig;</span><br><span class="line"></span><br><span class="line">import cn.itcast.interceptor.MyInterceptor;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MyConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;添加Intercepto</span><br><span class="line">        registry.addInterceptor(new MyInterceptor()).addPathPatterns(&quot;&#x2F;**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>8 .配置数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.依赖</span><br><span class="line">&lt;!--        连接池--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--        数据库驱动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--        mybatis--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--通用mapper--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mapper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.3&lt;&#x2F;version&gt;</span><br><span class="line">&lt;!--test启动器--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">        </span><br><span class="line">&#x2F;&#x2F;2.yml 整合连接池</span><br><span class="line">终端</span><br><span class="line"> mysql -u root -p</span><br><span class="line"> create database hank;</span><br><span class="line"> use hank;</span><br><span class="line"> create table user(id int auto_increment primary key,username varchar(16) not null);</span><br><span class="line"> insert into user values(0,&quot;hhello1&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yaml配置文件</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;hank</span><br><span class="line">    username: root</span><br><span class="line">    password: 123123</span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">#  type-aliases-package: cn.itcast.pojo</span><br><span class="line"></span><br><span class="line">  # mapper-locations: mapper&#x2F;*.xml</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;3.UserMapper</span><br><span class="line"></span><br><span class="line">package cn.itcast.mapper;</span><br><span class="line"></span><br><span class="line">import cn.itcast.pojo.User;</span><br><span class="line">import tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public interface UserMapper extends Mapper&lt;User&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;再main扫描mapper</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;cn.itcast.mapper&quot;)</span><br><span class="line">public class BootDemoApplication &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        SpringApplication.run(BootDemoApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.创建pojo</span><br><span class="line">package cn.itcast.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import tk.mybatis.mapper.annotation.KeySql;</span><br><span class="line"></span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import javax.persistence.Table;</span><br><span class="line">import javax.persistence.Table;</span><br><span class="line">import javax.persistence.Transient;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Table(name &#x3D; &quot;user&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @KeySql(useGeneratedKeys &#x3D; true)</span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;不是数据库的字段</span><br><span class="line">    @Transient</span><br><span class="line">    private String nosql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;5. test启动器</span><br><span class="line">ctrl+shif+t 常见test类别</span><br><span class="line"></span><br><span class="line">package cn.itcast.mapper;</span><br><span class="line"></span><br><span class="line">import cn.itcast.pojo.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class UserMapperTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper um;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void query()&#123;</span><br><span class="line">        User u &#x3D; um.selectByPrimaryKey(1);</span><br><span class="line">        System.out.println(&quot;u &#x3D; &quot; + u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;6. service</span><br><span class="line">package cn.itcast.service;</span><br><span class="line"></span><br><span class="line">import cn.itcast.mapper.UserMapper;</span><br><span class="line">import cn.itcast.pojo.User;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper um;</span><br><span class="line">    public User queryById(Long id)&#123;</span><br><span class="line">        return um.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;7.入口</span><br><span class="line">&#x2F;&#x2F;注意访问路径去掉 *.do</span><br><span class="line">package cn.itcast.web;</span><br><span class="line"></span><br><span class="line">import cn.itcast.pojo.User;</span><br><span class="line">import cn.itcast.service.UserService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">&#x2F;&#x2F; &#x3D; @Controller +  @ResponseBody</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    @Autowired</span><br><span class="line">&#x2F;&#x2F;    private DataSource ds;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService uservice;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="line">    public User hello(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">        return uservice.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>springCloud</title>
    <url>/2020/07/15/springCloud/</url>
    <content><![CDATA[<p>springCloud 搭建时的一些记录</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p> springCloud 是一个微服务架构，完全支持springbooot的开发</p>
</blockquote>
<ul>
<li>注册中心 Zureka</li>
<li>服务网关 zuul</li>
<li>负债均衡 ribbon</li>
<li>服务调用 feign</li>
<li>熔断器 hystix<h2 id="搭建父工程，提供方，调用方"><a href="#搭建父工程，提供方，调用方" class="headerlink" title="搭建父工程，提供方，调用方"></a>搭建父工程，提供方，调用方</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.创建一个父工程</span><br><span class="line">pom文件</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;cn.itcast.demo&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cloud-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;!--pom 包形式--&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&lt;!--    属性 版本控制--&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Finchley.SR1&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">        &lt;mapper.start.version&gt;2.0.3&lt;&#x2F;mapper.start.version&gt;</span><br><span class="line">        &lt;mysql.version&gt;5.1.32&lt;&#x2F;mysql.version&gt;</span><br><span class="line">        &lt;pageHelper.starter.version&gt;1.2.5&lt;&#x2F;pageHelper.starter.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引用--&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.srpingframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mapper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;mapper.start.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.创建子工程 （module）</span><br><span class="line">user-service &#x2F;&#x2F;提供方</span><br><span class="line">pom</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.itcast.demo&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;user-service&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mapper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置文件 application.yaml</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  #映射端口号</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;hank</span><br><span class="line">    username: root</span><br><span class="line">    password: 123123</span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">#  type-aliases-package: cn.itcast.pojo</span><br><span class="line"></span><br><span class="line">  # mapper-locations: mapper&#x2F;*.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建 mapper&#x2F;pojo&#x2F;controller&#x2F;service 包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.</span><br><span class="line">创建子工程 （module）</span><br><span class="line">consumer-demo &#x2F;&#x2F;服务的调用方</span><br><span class="line">pom</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.itcast.demo&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;consumer-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.persistence&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;persistence-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mapper-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0.4&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建pojo&#x2F;web</span><br><span class="line">web</span><br><span class="line">package cn.itcast.consumer.web;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import cn.itcast.consumer.pojo.User;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;consumer&quot;)</span><br><span class="line">public class ConsumerController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate rt;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="line">    public User queryId(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">        String url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;user&#x2F;&quot; + id;</span><br><span class="line">        User user &#x3D; rt.getForObject(url,User.class);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;启动类</span><br><span class="line">package cn.itcast;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate restTemplate()&#123;</span><br><span class="line">        return  new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="搭建eureka服务端"><a href="#搭建eureka服务端" class="headerlink" title="搭建eureka服务端"></a>搭建eureka服务端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.引入依赖</span><br><span class="line">pom</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.itcast.demo&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.1.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br><span class="line">2.配置文件</span><br><span class="line">server:</span><br><span class="line">  #映射端口号</span><br><span class="line">  port: 10086</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;127.0.0.1:10086&#x2F;eureka</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">    ip-address: 127.0.0.1</span><br><span class="line"></span><br><span class="line">3.启动eurka服务</span><br><span class="line">package cn.itcast;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;启动Eureka服务</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class EurekaServer &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="搭建euerka客户端"><a href="#搭建euerka客户端" class="headerlink" title="搭建euerka客户端"></a>搭建euerka客户端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.依赖</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.1.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">2.启动</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;cn.itcast.user.mapper&quot;)</span><br><span class="line">public class UserApplication &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.配置</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  #映射端口号</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">      name: user-server</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;hank</span><br><span class="line">    username: root</span><br><span class="line">    password: 123123</span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">  type-aliases-package: cn.itcast.user.pojo</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;127.0.0.1:10086&#x2F;eureka</span><br><span class="line">  # mapper-locations: mapper&#x2F;*.xml</span><br><span class="line">  </span><br><span class="line"> 4.调用</span><br><span class="line">  public User queryId(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">    List&lt;ServiceInstance&gt; instances &#x3D; dc.getInstances(&quot;user-service&quot;);</span><br><span class="line">    ServiceInstance i &#x3D; instances.get(0);</span><br><span class="line">    String url &#x3D; &quot;http:&#x2F;&#x2F;&quot;+i.getHost()+&quot;:&quot;+i.getPort()+&quot;&#x2F;user&#x2F;&quot; + id;</span><br><span class="line">    User user &#x3D; rt.getForObject(url,User.class);</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##搭建负载均衡拦截器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.pom</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.1.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">2.注解</span><br><span class="line">    @Bean</span><br><span class="line">&#x2F;&#x2F;    拦截RestTemplate请求</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    public RestTemplate restTemplate()&#123;</span><br><span class="line">        return  new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">3.修改路径</span><br><span class="line">    @GetMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="line">    public User queryId(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">&#x2F;&#x2F;        List&lt;ServiceInstance&gt; instances &#x3D; dc.getInstances(&quot;user-service&quot;);</span><br><span class="line">&#x2F;&#x2F;        ServiceInstance i &#x3D; instances.get(0);</span><br><span class="line">&#x2F;&#x2F;        String url &#x3D; &quot;http:&#x2F;&#x2F;&quot;+i.getHost()+&quot;:&quot;+i.getPort()+&quot;&#x2F;user&#x2F;&quot; + id;</span><br><span class="line">        String url &#x3D; &quot;http:&#x2F;&#x2F;user-service&#x2F;user&#x2F;&quot;+id;</span><br><span class="line">        User user &#x3D; rt.getForObject(url,User.class);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="搭建hystrix"><a href="#搭建hystrix" class="headerlink" title="搭建hystrix"></a>搭建hystrix</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.pom</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.1.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">2.注解</span><br><span class="line">@EnableCircuitBreaker</span><br><span class="line">@SpringCloudApplication</span><br><span class="line">&#x3D; @EnableDiscoveryClient</span><br><span class="line">&#x2F;&#x2F;@SpringBootApplication</span><br><span class="line">        </span><br><span class="line">3.熔断</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; 方法上</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="line">&#x2F;&#x2F;失败调用queryIdFailback</span><br><span class="line">@HystrixCommand(fallbackMethod &#x3D; &quot;queryIdFailback&quot;)</span><br><span class="line">public String queryId(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">    String url &#x3D; &quot;http:&#x2F;&#x2F;user-service&#x2F;user&#x2F;&quot;+id;</span><br><span class="line">    String user &#x3D; rt.getForObject(url,String.class);</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String queryIdFailback(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">    return &quot;服务器拥挤&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;统一的一个方法写在类上，通用的不能有参数</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;consumer&quot;)</span><br><span class="line">@DefaultProperties(defaultFallback &#x3D; &quot;defaultqQueryIdFailback&quot;)</span><br><span class="line">public class ConsumerController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate rt;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DiscoveryClient dc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="line">    &#x2F;&#x2F;失败调用queryIdFailback</span><br><span class="line">&#x2F;&#x2F;    @HystrixCommand(fallbackMethod &#x3D; &quot;queryIdFailback&quot;)</span><br><span class="line">    @HystrixCommand</span><br><span class="line">    public String queryId(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">        String url &#x3D; &quot;http:&#x2F;&#x2F;user-service&#x2F;user&#x2F;&quot;+id;</span><br><span class="line">        String user &#x3D; rt.getForObject(url,String.class);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String queryIdFailback(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">        return &quot;服务器拥挤&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String defaultqQueryIdFailback()&#123;</span><br><span class="line">        return &quot;通用服务器拥挤&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>xcode11修改项目名称</title>
    <url>/2020/04/01/xcode11%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0/</url>
    <content><![CDATA[<p>xcode11修改项目名称</p>
<h1 id="修改项目"><a href="#修改项目" class="headerlink" title="修改项目"></a>修改项目</h1><ul>
<li>1.直接点击工程名，敲Enter，如图，输入新工程名，再敲Enter，会有一个弹框点Rename<br><img src="http://hank.image.alimmdn.com/blog/5710765-7da5740dd22cb908.png" alt="image"><br><img src="http://hank.image.alimmdn.com/blog/5710765-8893dfb065e59638.png" alt="image"></li>
<li>选电脑状态栏 Product-&gt;Scheme-&gt;Edit Scheme-&gt;Manage Scheme<br><img src="http://hank.image.alimmdn.com/blog/5710765-21b001f5377d82a1.png" alt="image"></li>
<li>选择跟文件夹，敲回车，输入新工程名，敲回车<br><img src="http://hank.image.alimmdn.com/blog/5710765-cccd8c551a0133dd.png" alt="image"></li>
<li>选择电脑状态栏Find-&gt;Find and Replace in Workspace 选择Replace，第一个输入框输入旧工程名，敲回车，下面的输入框输入新工程名，点Replace All。<br><img src="http://hank.image.alimmdn.com/blog/5710765-c361da721fe07580.png" alt="image"></li>
<li>PROJECT-&gt;Build Setting-&gt;Info.plist File，旧名字(TaoBao/Info.plist)，改为新名字（JingDong/Info.plist）</li>
<li>修改最外层文件夹名字。敲回车修改，子文件夹的不需要动<img src="http://hank.image.alimmdn.com/blog/5710765-de23e9d1dfb21a40.png" alt="image"></li>
<li>点击TaoBao.xcodeproj 选显示包内容，双击打开project.pbxproj<br><img src="http://hank.image.alimmdn.com/blog/5710765-adc925a98e0dc2ac.png" alt="image"></li>
<li>如果使用cocopods管理第三方，应当删除与之相关的那三项<br><img src="http://hank.image.alimmdn.com/blog/5710765-6412458a02c2619d.png" alt="image"></li>
<li>打开命令行重新执行：pod install (注意 不要用 pod install –verbose –no-repo-update )。</li>
</ul>
<h1 id="修改项目文件前缀"><a href="#修改项目文件前缀" class="headerlink" title="修改项目文件前缀"></a>修改项目文件前缀</h1><h3 id="修改文件执行-python-py"><a href="#修改文件执行-python-py" class="headerlink" title="修改文件执行 python *.py"></a>修改文件执行 python *.py</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*</span><br><span class="line">import os</span><br><span class="line">#需要修改的类名前缀 （需替换）</span><br><span class="line">pre_str &#x3D; &#39;taobao&#39;</span><br><span class="line"># 新的类名前缀 （需替换）</span><br><span class="line">pre_to_str &#x3D; &#39;jindong&#39;</span><br><span class="line"></span><br><span class="line">header 1 | header 2</span><br><span class="line">---|---</span><br><span class="line">row 1 col 1 | row 1 col 2</span><br><span class="line">row 2 col 1 | row 2 col 2</span><br><span class="line"></span><br><span class="line"># 搜寻以下文件类型 （根据自己需求替换）</span><br><span class="line">suf_set &#x3D; (&#39;.h&#39;, &#39;.m&#39;, &#39;.xib&#39;, &#39;.storyboard&#39;, &#39;.mm&#39;)</span><br><span class="line"># 项目路径   （找到自己的项目路径）</span><br><span class="line">project_path &#x3D; &#39;&#x2F;Users&#x2F;hank&#x2F;Desktop&#x2F;xykgj-ios&#x2F;MMXYKGJ&#39;</span><br><span class="line"># 项目project.pbxproj文件路径 需要更新配置文件中的类名 （找到自己的项目project.pbxproj路径）</span><br><span class="line">pbxpro_path &#x3D; &#39;&#x2F;Users&#x2F;hank&#x2F;Desktop&#x2F;xykgj-ios&#x2F;MMXYKGJ.xcodeproj&#x2F;project.pbxproj&#39;</span><br><span class="line"></span><br><span class="line">#文件重命名函数，返回新的文件名</span><br><span class="line">def file_rename(file_path):</span><br><span class="line">    root_path &#x3D; os.path.split(file_path)[0]     # 文件目录</span><br><span class="line">    root_name &#x3D; os.path.split(file_path)[1]     # 文件名包含扩展名</span><br><span class="line">    filename &#x3D; os.path.splitext(root_name)[0];  # 文件名</span><br><span class="line">    filetype &#x3D; os.path.splitext(root_name)[1];  # 文件扩展名</span><br><span class="line">    </span><br><span class="line">    new_path &#x3D; os.path.join(root_path, filename.replace(pre_str, pre_to_str) + filetype)    # 拼接新路径</span><br><span class="line">    os.renames(file_path, new_path)             # 文件重命名</span><br><span class="line">    return filename.replace(pre_str, pre_to_str)</span><br><span class="line"></span><br><span class="line"># 定义一个字典 key&#x3D;旧类名 value&#x3D;新类名</span><br><span class="line">needModifyDic &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 遍历文件，符合规则的进行重命名</span><br><span class="line">for (root, dirs, files) in os.walk(project_path):</span><br><span class="line">    for file_name in files:</span><br><span class="line">        if file_name.startswith((pre_str,)) and file_name.endswith(suf_set):</span><br><span class="line">            old_name &#x3D; os.path.splitext(file_name)[0]</span><br><span class="line">            new_name &#x3D; file_rename(os.path.join(root, file_name))</span><br><span class="line">            needModifyDic[old_name] &#x3D; new_name</span><br><span class="line"></span><br><span class="line"># 遍历文件，在文件中更换新类名的引用</span><br><span class="line">print(needModifyDic)</span><br><span class="line">for (root, dirs, files) in os.walk(project_path):</span><br><span class="line">    for file_name in files:</span><br><span class="line">        if file_name.endswith(suf_set):</span><br><span class="line">            print(&#39;-----fileName-------&#39; + file_name)</span><br><span class="line">            with open(os.path.join(root, file_name), &#39;r+&#39;) as f:</span><br><span class="line">                print(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;fileName&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39; + file_name)</span><br><span class="line">                s0 &#x3D; f.read()</span><br><span class="line">                f.close()</span><br><span class="line">                for key in needModifyDic:</span><br><span class="line">                    if key in s0:</span><br><span class="line">                        with open(os.path.join(root, file_name), &#39;r+&#39;) as f4:</span><br><span class="line">                            s1 &#x3D; f4.read().replace(key, needModifyDic[key])</span><br><span class="line">                            print(key + &#39; ------&gt; &#39; + needModifyDic[key])</span><br><span class="line">                            f4.seek(0)</span><br><span class="line">                            f4.write(s1)</span><br><span class="line">                            f4.truncate()</span><br><span class="line">                            f4.close()</span><br><span class="line"># 替换配置文件中的类名</span><br><span class="line">for key in needModifyDic:</span><br><span class="line">    with open(pbxpro_path, &#39;r+&#39;) as f:</span><br><span class="line">        s0 &#x3D; f.read()</span><br><span class="line">        f.close()</span><br><span class="line">        if key in s0:</span><br><span class="line">            with open(pbxpro_path, &#39;r+&#39;) as f2:</span><br><span class="line">                s &#x3D; f2.read().replace(key, needModifyDic[key])</span><br><span class="line">                f2.seek(0)</span><br><span class="line">                f2.write(s)</span><br><span class="line">                f2.truncate()</span><br><span class="line">                f2.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>EffectiveObjective-C</title>
    <url>/2016/07/27/EffectiveObjective-C/</url>
    <content><![CDATA[<p>EffectiveObjective-C 读书笔记</p>
<p><img src="http://upload-images.jianshu.io/upload_images/859001-4696272b0a4ffe42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="了解Objective-C的起源"><a href="#了解Objective-C的起源" class="headerlink" title="了解Objective-C的起源"></a>了解Objective-C的起源</h2><h3 id="运行期组件"><a href="#运行期组件" class="headerlink" title="运行期组件"></a>运行期组件</h3><p>对于消息结构的语言，运行时所执行的代码由运行环境来决定；在运行时才会去查找索要执行的方法。其实现原理是由运行期组件完成（runtime component），使用Objective-C的面向对象特性所需的全部数据结构以及函数都在运行期组件里面</p>
<p>内存：对象分配到堆空间,指针分配到栈空间。<br>分配在队中的内存必须直接管理，而分配在栈上用于保存变量的内存则会在其栈帧弹出时自动清理。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="存取方法"><a href="#存取方法" class="headerlink" title="存取方法"></a>存取方法</h3><p>在设置完属性后，编译器会自动写出一套存取方法，用于访问相应名称的变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface EOCPerson : NSObject</span><br><span class="line"></span><br><span class="line">@property NSString *firstName;</span><br><span class="line">@property NSString *lastName;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface EOCPerson : NSObject</span><br><span class="line"></span><br><span class="line">- (NSString*)firstName;</span><br><span class="line">- (void)setFirstName:(NSString*)firstName;</span><br><span class="line">- (NSString*)lastName;</span><br><span class="line">- (void)setLastName:(NSString*)lastName;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>访问属性，可以使用点语法。编译器会把点语法转换为对存取方法的调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aPerson.firstName &#x3D; @&quot;Bob&quot;; &#x2F;&#x2F; Same as:</span><br><span class="line">[aPerson setFirstName:@&quot;Bob&quot;];</span><br><span class="line"></span><br><span class="line">NSString *lastName &#x3D; aPerson.lastName; &#x2F;&#x2F; Same as:</span><br><span class="line">NSString *lastName &#x3D; [aPerson lastName];</span><br></pre></td></tr></table></figure>
<p>如果我们不希望编译器自动生成存取方法的话，需要设置@dynamic 字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface EOCPerson : NSManagedObject</span><br><span class="line">@property NSString *firstName;</span><br><span class="line">@property NSString *lastName;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation EOCPerson</span><br><span class="line">@dynamic firstName, lastName;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<h3 id="属相特质"><a href="#属相特质" class="headerlink" title="属相特质"></a>属相特质</h3><p>定义属性的时候，通常会赋予它一些特性，来满足一些对类保存数据所要遵循的需求。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nonatomic：不使用同步锁</span><br><span class="line">atomic：加同步锁，确保其原子性</span><br><span class="line">readwrite:同时存在存取方法</span><br><span class="line">readonly:只有获取方法</span><br><span class="line">assign:纯量类型(scalar type)的简单赋值操作</span><br><span class="line">strong:拥有关系保留新值，释放旧值，再设置新值</span><br><span class="line">weak:非拥有关系(nonowning relationship)，属性所指的对象遭到摧毁时，属性也会清空</span><br><span class="line">unsafe_unretained ：类似assign，适用于对象类型，非拥有关系，属性所指的对象遭到摧毁时，属性不会清空。</span><br><span class="line">copy：不保留新值，而是将其拷贝</span><br></pre></td></tr></table></figure>
<h3 id="注意：遵循属性定义"><a href="#注意：遵循属性定义" class="headerlink" title="注意：遵循属性定义"></a>注意：遵循属性定义</h3><p>如果属性定义为copy，那么在非设置方法里设定属性的时候，也要遵循copy的语义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (id)initWithFirstName:(NSString*)firstName lastName:(NSString*)lastName</span><br><span class="line">&#123;</span><br><span class="line">         if ((self &#x3D; [super init])) &#123;</span><br><span class="line">            _firstName &#x3D; [firstName copy];</span><br><span class="line">            _lastName &#x3D; [lastName copy];</span><br><span class="line">        &#125;</span><br><span class="line">       return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对象等同性"><a href="#对象等同性" class="headerlink" title="对象等同性"></a>对象等同性</h2><h3 id="同等性判断"><a href="#同等性判断" class="headerlink" title="同等性判断"></a>同等性判断</h3><p>==操作符比较的是指针值，也就是内存地址</p>
<p>另外，如果比较的对象类型和当前对象类型相同，就可以采用自己编写的判定方法，否则调用父类的isEqual:方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (BOOL)isEqualToPerson:(EOCPerson*)otherPerson &#123;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F;先比较对象类型，然后比较每个属性</span><br><span class="line">     if (self &#x3D;&#x3D; object) return YES;</span><br><span class="line">     if (![_firstName isEqualToString:otherPerson.firstName])</span><br><span class="line">         return NO;</span><br><span class="line">     if (![_lastName isEqualToString:otherPerson.lastName])</span><br><span class="line">         return NO;</span><br><span class="line">     if (_age !&#x3D; otherPerson.age)</span><br><span class="line">         return NO;</span><br><span class="line">     return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)isEqual:(id)object &#123;</span><br><span class="line">    &#x2F;&#x2F;如果对象所属类型相同，就调用自己编写的判定方法，如果不同，调用父类的isEqual:方法</span><br><span class="line">     if ([self class] &#x3D;&#x3D; [object class]) &#123;    </span><br><span class="line">         return [self isEqualToPerson:(EOCPerson*)object];</span><br><span class="line">    &#125; else &#123;    </span><br><span class="line">         return [super isEqual:object];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="深度等同性判定"><a href="#深度等同性判定" class="headerlink" title="深度等同性判定"></a>深度等同性判定</h3><p>比较两个数组是否相等的话可以使用深度同等性判断方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.先比较数组的个数</span><br><span class="line">2.再比较两个数组对应位置上的对象均相等。</span><br></pre></td></tr></table></figure>
<h2 id="理解objc-msgSend的作用"><a href="#理解objc-msgSend的作用" class="headerlink" title="理解objc_msgSend的作用"></a>理解objc_msgSend的作用</h2><p>在OC中，如果向某对象传递信息，那就会使用动态绑定机制来决定需要调用的方法。在底层，所有方法都是普通的C语言函数</p>
<p>然而对象收到 消息后，究竟该调用哪个方法则完全于运行期决定，甚至可以在程序运行时改变，这些特性使得OC成为一门真正的动态语言</p>
<p>在OC中，给对象发送消息的语法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id returnValue &#x3D; [someObject messageName:parameter];</span><br><span class="line">&#x2F;*</span><br><span class="line">第一个参数代表接收者，第二个参数代表选择子，后续参数就是消息中的那些参数，数量是可变的，所以这个函数就是参数个数可变的函数</span><br><span class="line">*&#x2F;</span><br><span class="line">void objc_msgSend(id self, SEL cmd, ...)</span><br><span class="line"></span><br><span class="line">因此，上述以OC形式展现出来的函数就会转化成如下函数:</span><br><span class="line"></span><br><span class="line">d returnValue &#x3D; objc_msgSend(someObject,@selector(messageName:),parameter);</span><br><span class="line">&#x2F;*</span><br><span class="line">这个函数会在接收者所属的类中搜寻其“方法列表”，如果能找到与选择子名称相符的方法，就去实现代码，如果找不到就沿着继承体系继续向上查找。如果找到了就执行，如果最终还是找不到，就执行消息转发操作</span><br><span class="line"></span><br><span class="line">注意：如果匹配成功的话，这种匹配的结果会缓存在“快速映射表”里面。每个类都有这样一块缓存。所以如果将来再次向该类发送形同的消息，执行速度就会更快了。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="理解消息转发机制"><a href="#理解消息转发机制" class="headerlink" title="理解消息转发机制"></a>理解消息转发机制</h2><p>如果对象所属类和其所有的父类都无法解读收到的消息，就会启动消息转发机制<br><img src="http://upload-images.jianshu.io/upload_images/859001-6619cbf33830ce3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>类方法+(BOOL)resolveInstanceMethod:(SEL)selector:查看这个类是否能新增一个实例方法用以处理此选择子</p>
<p>实例方法- (id)forwardTargetForSelector:(SEL)selector;:询问是否能找到未知消息的备援接受者，如果能找到备援对象，就将其返回，如果不能，就返回nil</p>
<p>实例方法- (void)forwardInvocation:(NSInvocation*)invocation:创建NSInvocation对象，将尚未处理的那条消息 有关的全部细节都封于其中，在触发NSInvocation对象时，“消息派发系统（message-dispatch system）”就会将消息派给目标对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code: 动态添加set get 方法</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface EOCAutoDictionary : NSObject</span><br><span class="line">@property (nonatomic, strong) NSString *string;</span><br><span class="line">@property (nonatomic, strong) NSNumber *number;</span><br><span class="line">@property (nonatomic, strong) NSDate *date;</span><br><span class="line">@property (nonatomic, strong) id opaqueObject;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">#import &quot;EOCAutoDictionary.h&quot;</span><br><span class="line">#import &lt;objc&#x2F;runtime.h&gt;</span><br><span class="line"></span><br><span class="line">@interface EOCAutoDictionary ()</span><br><span class="line">@property (nonatomic, strong) NSMutableDictionary *backingStore;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation EOCAutoDictionary</span><br><span class="line">@dynamic string, number, date, opaqueObject;</span><br><span class="line"></span><br><span class="line">- (id)init &#123;</span><br><span class="line"> if ((self &#x3D; [super init])) &#123;</span><br><span class="line">    _backingStore &#x3D; [NSMutableDictionary new];</span><br><span class="line">&#125;</span><br><span class="line">   return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)selector &#123;</span><br><span class="line">     NSString *selectorString &#x3D; NSStringFromSelector(selector);</span><br><span class="line">     if ([selectorString hasPrefix:@&quot;set&quot;]) &#123;</span><br><span class="line">         class_addMethod(self,selector,(IMP)autoDictionarySetter, &quot;v@:@&quot;);</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         class_addMethod(self,selector,(IMP)autoDictionaryGetter, &quot;@@:&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void autoDictionaryGetter(id self, SEL _cmd) &#123;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; Get the backing store from the object</span><br><span class="line">     EOCAutoDictionary *typedSelf &#x3D; (EOCAutoDictionary*)self;</span><br><span class="line">     NSMutableDictionary *backingStore &#x3D; typedSelf.backingStore;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; The key is simply the selector name</span><br><span class="line">     NSString *key &#x3D; NSStringFromSelector(_cmd);</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; Return the value</span><br><span class="line">     return [backingStore objectForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void autoDictionarySetter(id self, SEL _cmd, id value) &#123;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; Get the backing store from the object</span><br><span class="line">     EOCAutoDictionary *typedSelf &#x3D; (EOCAutoDictionary*)self;</span><br><span class="line">     NSMutableDictionary *backingStore &#x3D; typedSelf.backingStore;</span><br><span class="line"></span><br><span class="line">     &#x2F;** The selector will be for example, &quot;setOpaqueObject:&quot;.</span><br><span class="line">     * We need to remove the &quot;set&quot;, &quot;:&quot; and lowercase the first</span><br><span class="line">     * letter of the remainder.</span><br><span class="line">     *&#x2F;</span><br><span class="line">     NSString *selectorString &#x3D; NSStringFromSelector(_cmd);</span><br><span class="line">     NSMutableString *key &#x3D; [selectorString mutableCopy];</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; Remove the &#39;:&#39; at the end</span><br><span class="line">    [key deleteCharactersInRange:NSMakeRange(key.length - 1, 1)];</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; Remove the &#39;set&#39; prefix</span><br><span class="line">    [key deleteCharactersInRange:NSMakeRange(0, 3)];</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; Lowercase the first character</span><br><span class="line">     NSString *lowercaseFirstChar &#x3D; [[key substringToIndex:1] lowercaseString];</span><br><span class="line">    [key replaceCharactersInRange:NSMakeRange(0, 1) withString:lowercaseFirstChar];</span><br><span class="line"></span><br><span class="line">     if (value) &#123;</span><br><span class="line">       [backingStore setObject:value forKey:key];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [backingStore removeObjectForKey:key];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="理解“类对象”的用意"><a href="#理解“类对象”的用意" class="headerlink" title="理解“类对象”的用意"></a>理解“类对象”的用意</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct objc_class *Class;</span><br><span class="line"></span><br><span class="line">    struct objc_class &#123;</span><br><span class="line">         Class isa;&#x2F;&#x2F;isa指针指向了对象所属的类：元类（metaclass）</span><br><span class="line">         Class super_class;&#x2F;&#x2F;super_class定义了本类的超类</span><br><span class="line">         const char *name;</span><br><span class="line">         long version;</span><br><span class="line">         long info;</span><br><span class="line">         long instance_size;</span><br><span class="line">         struct objc_ivar_list *ivars;</span><br><span class="line">         struct objc_method_list **methodLists;</span><br><span class="line">         struct objc_cache *cache;</span><br><span class="line">         struct objc_protocol_list *protocols;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们使用isMemberOfClass:能够判断出对象是否为某个特定类的实例；<br>而isKindOfClass:方法能够判断出对象是否为某类或其派生类的实例。<br>这两种方法都是利用了isa指针获取对象所属的类，然后通过super_class类在继承体系中查询</p>
<h2 id="理解Objective-C错误类型"><a href="#理解Objective-C错误类型" class="headerlink" title="理解Objective-C错误类型"></a>理解Objective-C错误类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface NSError : NSObject &lt;NSCopying, NSSecureCoding&gt; &#123;</span><br><span class="line">    @private</span><br><span class="line">    void *_reserved;</span><br><span class="line">    NSInteger _code;错误码，类型是整数</span><br><span class="line">    NSString *_domain;&#x2F;&#x2F;错误范围，类型是字符串</span><br><span class="line">    NSDictionary *_userInfo;&#x2F;&#x2F;用户信息，类型是字典</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; EOCErrors.h</span><br><span class="line">extern NSString *const EOCErrorDomain;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义错误码</span><br><span class="line">typedef NS_ENUM(NSUInteger, EOCError) &#123;</span><br><span class="line"></span><br><span class="line">    EOCErrorUnknown &#x3D; –1,</span><br><span class="line">    EOCErrorInternalInconsistency &#x3D; 100,</span><br><span class="line">    EOCErrorGeneralFault &#x3D; 105,</span><br><span class="line">    EOCErrorBadInput &#x3D; 500,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; EOCErrors.m</span><br><span class="line">NSString *const EOCErrorDomain &#x3D; @&quot;EOCErrorDomain&quot;; &#x2F;&#x2F;定义错误范围</span><br></pre></td></tr></table></figure>
<h2 id="理解NSCopying协议"><a href="#理解NSCopying协议" class="headerlink" title="理解NSCopying协议"></a>理解NSCopying协议</h2><p>如果我们想令自己的类支持拷贝操作，那就要实现NSCopying协议，该协议只有一个方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (id)copyWithZone:(NSZone*)zone &#123;</span><br><span class="line"></span><br><span class="line">     EOCPerson *copy &#x3D; [[[self class] allocWithZone:zone] initWithFirstName:_firstName  andLastName:_lastName];</span><br><span class="line">    copy-&gt;_friends &#x3D; [_friends mutableCopy];</span><br><span class="line">     return copy;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;之所以是copy-&gt;_friends，而不是copy.friends是因为friends并不是属性，而是一个内部使用的实例变量。</span><br></pre></td></tr></table></figure>
<h3 id="复制可变的版本"><a href="#复制可变的版本" class="headerlink" title="复制可变的版本"></a>复制可变的版本</h3><p>注意：拷贝可变型和不可变型发送的是copy和mutableCopy消息，而我们实现的却是- (id)copyWithZone:(NSZone*)zone和- (id)mutableCopyWithZone:(NSZone*)zone 方法。</p>
<p>而且，如果我们想获得某对象的不可变型，统一调用copy方法；获得某对象的可变型，统一调用mutableCopy方法。<br>例如数组的拷贝：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-[NSMutableArray copy] &#x3D;&gt; NSArray</span><br><span class="line">-[NSArray mutableCopy] &#x3D;&gt; NSMutableArray</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h3><p>Foundation框架中的集合类默认都执行浅拷贝：只拷贝容器对象本身，而不复制其中的数据。而深拷贝的意思是连同对象本身和它的底层数据都要拷贝。</p>
<h2 id="理解引用计数"><a href="#理解引用计数" class="headerlink" title="理解引用计数"></a>理解引用计数</h2><h3 id="计数器的操作"><a href="#计数器的操作" class="headerlink" title="计数器的操作"></a>计数器的操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">retain：递增保留计数。</span><br><span class="line">release：递减保留计数</span><br><span class="line">autorelease ：待稍后清理“自动释放池时”，再递减保留计数。</span><br></pre></td></tr></table></figure>
<h3 id="自动释放池"><a href="#自动释放池" class="headerlink" title="自动释放池"></a>自动释放池</h3><p>将对象放入自动释放池之后，不会马上使其引用计数-1，而是在当前线程的下一次事件循环时递减</p>
<h3 id="保留环"><a href="#保留环" class="headerlink" title="保留环"></a>保留环</h3><p>对象之间相互用强引用指向对方，会使得全部都无法得以释放。解决方案是讲其中一端的引用改为弱引用（weak reference），在引用的同时不递增引用计数。</p>
<h2 id="以ARC简化引用计数"><a href="#以ARC简化引用计数" class="headerlink" title="以ARC简化引用计数"></a>以ARC简化引用计数</h2><p>ARC只负责管理OC对象的内存，CoreFoundation对象不归ARC管理</p>
<h2 id="理解“块”这一概念"><a href="#理解“块”这一概念" class="headerlink" title="理解“块”这一概念"></a>理解“块”这一概念</h2><p>NSGlobalBlock：类似函数，位于text段；<br>NSStackBlock：位于栈内存，函数返回后Block将无效；<br>NSMallocBlock：位于堆内存。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例1:</span><br><span class="line"></span><br><span class="line">BlkSum blk1 &#x3D; ^ long (int a, int b) &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;;</span><br><span class="line">NSLog(@&quot;blk1 &#x3D; %@&quot;, blk1);&#x2F;&#x2F; 打印结果：blk1 &#x3D; &lt;__NSGlobalBlock__: 0x47d0&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例2:</span><br><span class="line"></span><br><span class="line">int base &#x3D; 100;</span><br><span class="line">BlkSum blk2 &#x3D; ^ long (int a, int b) &#123;</span><br><span class="line">  &#x2F;&#x2F;局部变量base当前值被copy到栈上，作为常量供Block使用 耨需要改变则需要 ————block int base </span><br><span class="line">  return base + a + b;</span><br><span class="line">&#125;;</span><br><span class="line">NSLog(@&quot;blk2 &#x3D; %@&quot;, blk2); &#x2F;&#x2F; 打印结果：blk2 &#x3D; &lt;__NSStackBlock__: 0xbfffddf8&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例3:</span><br><span class="line"></span><br><span class="line">BlkSum blk3 &#x3D; [[blk2 copy] autorelease];</span><br><span class="line">NSLog(@&quot;blk3 &#x3D; %@&quot;, blk3); &#x2F;&#x2F; 打印结果：blk3 &#x3D; &lt;__NSMallocBlock__: 0x902fda0&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">static变量、全局变量。如果把上个例子的base改成全局的、或static。Block就可以对他进行读写了。因为全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量</span><br><span class="line">*&#x2F;</span><br><span class="line">static int base &#x3D; 100;</span><br><span class="line">BlkSum sum &#x3D; ^ long (int a, int b) &#123;</span><br><span class="line">  base++;</span><br><span class="line">  return base + a + b;</span><br><span class="line">&#125;;</span><br><span class="line">base &#x3D; 0;</span><br><span class="line">printf(&quot;%d\n&quot;, base);&#x2F;&#x2F;0</span><br><span class="line">printf(&quot;%ld\n&quot;,sum(1,2)); &#x2F;&#x2F; 这里输出是4</span><br><span class="line">printf(&quot;%d\n&quot;, base);&#x2F;&#x2F;1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>在ARC下不用__block ，而是用 __weak 为了避免出现循环引用</p>
<p>在MRC：用__block ，__block修饰的变量在Block copy时是不会retain的，所以，也可以做到破解循环引用。</p>
<h1 id="规范篇"><a href="#规范篇" class="headerlink" title="规范篇"></a>规范篇</h1><h2 id="在类的头文件中尽量少引用其他头文件"><a href="#在类的头文件中尽量少引用其他头文件" class="headerlink" title="在类的头文件中尽量少引用其他头文件"></a>在类的头文件中尽量少引用其他头文件</h2><p>有时，类A需要将类B的实例变量作为它公共API的属性。这个时候，我们不应该引入类B的头文件，而应该使用向前声明（forward declaring）使用class关键字，并且在A的实现文件引用B的头文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; EOCPerson.h</span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@class EOCEmployer;</span><br><span class="line"></span><br><span class="line">@interface EOCPerson : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSString *firstName;</span><br><span class="line">@property (nonatomic, copy) NSString *lastName;</span><br><span class="line">@property (nonatomic, strong) EOCEmployer *employer;&#x2F;&#x2F;将EOCEmployer作为属性</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; EOCPerson.m</span><br><span class="line">#import &quot;EOCEmployer.h&quot;</span><br></pre></td></tr></table></figure>
<p>优点：<br>不在A的头文件中引入B的头文件，就不会一并引入B的全部内容，这样就减少了编译时间。</p>
<p>可以避免循环引用：因为如果两个类在自己的头文件中都引入了对方的头文件，那么就会导致其中一个类无法被正确编译。</p>
<h2 id="多用字面量语法，少用与之等价的方法"><a href="#多用字面量语法，少用与之等价的方法" class="headerlink" title="多用字面量语法，少用与之等价的方法"></a>多用字面量语法，少用与之等价的方法</h2><h3 id="声明时的字面量语法"><a href="#声明时的字面量语法" class="headerlink" title="声明时的字面量语法"></a>声明时的字面量语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSNumber *intNumber &#x3D; @1;</span><br><span class="line">NSNumber *floatNumber &#x3D; @2.5f;</span><br><span class="line">Dictionary *dict &#x3D; @&#123;@&quot;animal&quot;:@&quot;tiger&quot;,@&quot;phone&quot;:@&quot;iPhone 6&quot;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="集合类取下标的字面量语法"><a href="#集合类取下标的字面量语法" class="headerlink" title="集合类取下标的字面量语法"></a>集合类取下标的字面量语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSString *cat &#x3D; animals[0];</span><br><span class="line">NSString *iphone &#x3D; dict[@&quot;phone&quot;];</span><br></pre></td></tr></table></figure>

<h2 id="多用类型常量，少用-define预处理命令"><a href="#多用类型常量，少用-define预处理命令" class="headerlink" title="多用类型常量，少用#define预处理命令"></a>多用类型常量，少用#define预处理命令</h2><p>预处理命令：简单的文本替换，不包括类型信息，并且可被任意修改。</p>
<p>类型常量：包括类型信息，并且可以设置其使用范围，而且不可被修改。</p>
<p>类型常量:static const NSTimeIntervalDuration = 0.3;<br>对外公开某个常量:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;header file</span><br><span class="line">extern NSString *const NotificationString;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;implementation file</span><br><span class="line">NSString *const  NotificationString &#x3D; @&quot;Finish Download&quot;;</span><br></pre></td></tr></table></figure>
<p>注意：公开的常量：常量的名字最好用与之相关的类名做前缀。<br>非公开的常量：局限于某个编译单元（tanslation unit，实现文件 implementation file）内，在签名加上字母k。</p>
<h2 id="用枚举表示状态，选项，状态码"><a href="#用枚举表示状态，选项，状态码" class="headerlink" title="用枚举表示状态，选项，状态码"></a>用枚举表示状态，选项，状态码</h2><p>我们经常需要给类定义几个状态，这些状态码可以用枚举来管理。下面是关于网络连接状态的状态码枚举：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef NS_ENUM(NSUInteger, EOCConnectionState) &#123;</span><br><span class="line">  EOCConnectionStateDisconnected,</span><br><span class="line">  EOCConnectionStateConnecting,</span><br><span class="line">  EOCConnectionStateConnected,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="用前缀-避免命名空间冲突"><a href="#用前缀-避免命名空间冲突" class="headerlink" title="用前缀 避免命名空间冲突"></a>用前缀 避免命名空间冲突</h2><p>Apple宣称其保留使用所有”两字母前缀”的权利，所以我们选用的前缀应该是三个字母的。<br>而且，如果自己开发的程序使用到了第三方库，也应该加上前缀。</p>
<h2 id="尽量使用不可变对象"><a href="#尽量使用不可变对象" class="headerlink" title="尽量使用不可变对象"></a>尽量使用不可变对象</h2><p>在头文件中，设置对象属性为readonly，在实现文件中设置为readwrite。这样一来，在外部就只能读取该数据，而不能修改它，使得这个类的实例所持有的数据更加安全</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">@interface EOCPerson : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy, readonly) NSString *firstName;</span><br><span class="line">@property (nonatomic, copy, readonly) NSString *lastName;</span><br><span class="line">@property (nonatomic, strong, readonly) NSSet *friends <span class="comment">//向外公开的不可变集合</span></span><br><span class="line"></span><br><span class="line">- (id)initWithFirstName:(NSString*)firstName andLastName:(NSString*)lastName;</span><br><span class="line">- (<span class="keyword">void</span>)addFriend:(EOCPerson*)person;</span><br><span class="line">- (<span class="keyword">void</span>)removeFriend:(EOCPerson*)person;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@<span class="function">interface <span class="title">EOCPerson</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">@property (nonatomic, copy, readwrite) NSString *firstName;</span><br><span class="line">@property (nonatomic, copy, readwrite) NSString *lastName;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation EOCPerson &#123;</span><br><span class="line">     NSMutableSet *_internalFriends;  <span class="comment">//实现文件里的可变集合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSSet*)friends &#123;</span><br><span class="line">     <span class="keyword">return</span> [_internalFriends copy]; <span class="comment">//get方法返回的永远是可变set的不可变型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addFriend:(EOCPerson*)person &#123;</span><br><span class="line">    [_internalFriends addObject:person]; <span class="comment">//在外部增加集合元素的操作</span></span><br><span class="line">    <span class="comment">//do something when add element</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeFriend:(EOCPerson*)person &#123;</span><br><span class="line">    [_internalFriends removeObject:person]; <span class="comment">//在外部移除元素的操作</span></span><br><span class="line">    <span class="comment">//do something when remove element</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id)initWithFirstName:(NSString*)firstName andLastName:(NSString*)lastName &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> ((self = [super init])) &#123;</span><br><span class="line">        _firstName = firstName;</span><br><span class="line">        _lastName = lastName;</span><br><span class="line">        _internalFriends = [NSMutableSet <span class="keyword">new</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用清晰而协调的命名方式"><a href="#使用清晰而协调的命名方式" class="headerlink" title="使用清晰而协调的命名方式"></a>使用清晰而协调的命名方式</h2><h3 id="每个冒号左边的方法部分最好与右边的参数名一致。"><a href="#每个冒号左边的方法部分最好与右边的参数名一致。" class="headerlink" title="每个冒号左边的方法部分最好与右边的参数名一致。"></a>每个冒号左边的方法部分最好与右边的参数名一致。</h3><h3 id="获取”是否“的布尔值，应该增加“is”前缀"><a href="#获取”是否“的布尔值，应该增加“is”前缀" class="headerlink" title="获取”是否“的布尔值，应该增加“is”前缀"></a>获取”是否“的布尔值，应该增加“is”前缀</h3><h3 id="获取“是否有”的布尔值，应该增加“has”前缀"><a href="#获取“是否有”的布尔值，应该增加“has”前缀" class="headerlink" title="获取“是否有”的布尔值，应该增加“has”前缀"></a>获取“是否有”的布尔值，应该增加“has”前缀</h3><h2 id="为私有方法名加前缀"><a href="#为私有方法名加前缀" class="headerlink" title="为私有方法名加前缀"></a>为私有方法名加前缀</h2><p>建议在实现文件里将非公开的方法都加上前缀，便于调试，而且这样一来也很容易区分哪些是公共方法，哪些是私有方法。因为往往公共方法是不便于任意修改的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">@interface EOCObject : NSObject</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)publicMethod;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation EOCObject</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)publicMethod &#123;</span><br><span class="line"> <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)p_privateMethod &#123;</span><br><span class="line"> <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>注意：<br>不要用下划线来区分私有方法和公共方法，因为会和苹果公司的API重复。</p>
<h2 id="将类的实现代码分散到便于管理的数个分类中"><a href="#将类的实现代码分散到便于管理的数个分类中" class="headerlink" title="将类的实现代码分散到便于管理的数个分类中"></a>将类的实现代码分散到便于管理的数个分类中</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无分类的类：</span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface EOCPerson : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy, readonly) NSString *firstName;</span><br><span class="line">@property (nonatomic, copy, readonly) NSString *lastName;</span><br><span class="line">@property (nonatomic, strong, readonly) NSArray *friends;</span><br><span class="line"></span><br><span class="line">- (id)initWithFirstName:(NSString*)firstName andLastName:(NSString*)lastName;</span><br><span class="line"></span><br><span class="line">&#x2F;* Friendship methods *&#x2F;</span><br><span class="line">- (void)addFriend:(EOCPerson*)person;</span><br><span class="line">- (void)removeFriend:(EOCPerson*)person;</span><br><span class="line">- (BOOL)isFriendsWith:(EOCPerson*)person;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* Work methods *&#x2F;</span><br><span class="line">- (void)performDaysWork;</span><br><span class="line">- (void)takeVacationFromWork;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* Play methods *&#x2F;</span><br><span class="line">- (void)goToTheCinema;</span><br><span class="line">- (void)goToSportsGame;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">分类之后：</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface EOCPerson : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy, readonly) NSString *firstName;</span><br><span class="line">@property (nonatomic, copy, readonly) NSString *lastName;</span><br><span class="line">@property (nonatomic, strong, readonly) NSArray *friends;</span><br><span class="line"></span><br><span class="line">- (id)initWithFirstName:(NSString*)firstName</span><br><span class="line"></span><br><span class="line">andLastName:(NSString*)lastName;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface EOCPerson (Friendship)</span><br><span class="line"></span><br><span class="line">- (void)addFriend:(EOCPerson*)person;</span><br><span class="line">- (void)removeFriend:(EOCPerson*)person;</span><br><span class="line">- (BOOL)isFriendsWith:(EOCPerson*)person;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface EOCPerson (Work)</span><br><span class="line"></span><br><span class="line">- (void)performDaysWork;</span><br><span class="line">- (void)takeVacationFromWork;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface EOCPerson (Play)</span><br><span class="line"></span><br><span class="line">- (void)goToTheCinema;</span><br><span class="line">- (void)goToSportsGame;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h2 id="总是为第三方类的分类名称加前缀"><a href="#总是为第三方类的分类名称加前缀" class="headerlink" title="总是为第三方类的分类名称加前缀"></a>总是为第三方类的分类名称加前缀</h2><h2 id="勿在分类中声明属性"><a href="#勿在分类中声明属性" class="headerlink" title="勿在分类中声明属性"></a>勿在分类中声明属性</h2><p>分类机制，目标在于扩展类的功能，而不是封装数据。</p>
<h2 id="在dealloc方法中只释放引用并解除监听"><a href="#在dealloc方法中只释放引用并解除监听" class="headerlink" title="在dealloc方法中只释放引用并解除监听"></a>在dealloc方法中只释放引用并解除监听</h2><p>永远不要自己调用dealloc方法，运行期系统会在适当的时候调用它。根据性能需求我们有时需要在dealloc方法中做一些操作。那么我们可以在dealloc方法里做什么呢？</p>
<p>释放对象所拥有的所有引用，不过ARC会自动添加这些释放代码，可以不必操心。</p>
<p>而且对象拥有的其他非OC对象也要释放（CoreFoundation对象就必须手动释放）</p>
<p>释放原来的观测行为：注销通知。如果没有及时注销，就会向其发送通知，使得程序崩溃。</p>
<p>尤其注意：在dealloc方法中不应该调用其他的方法，因为如果这些方法是异步的，并且回调中还要使用当前对象，那么很有可能当前对象已经被释放了，会导致崩溃。</p>
<p>并且在dealloc方法中也不能调用属性的存取方法，因为很有可能在这些方法里还有其他操作。而且这个属性还有可能处于键值观察状态，该属性的观察者可能会在属性改变时保留或者使用这个即将回收的对象。</p>
<h2 id="多用块枚举，少用for循环"><a href="#多用块枚举，少用for循环" class="headerlink" title="多用块枚举，少用for循环"></a>多用块枚举，少用for循环</h2><p>当遍历集合元素时，建议使用块枚举，因为相对于传统的for循环，它更加高效，而且简洁,还能获取到用传统的for循环无法提供的值：</p>
<h2 id="构建缓存时选用NSCache-而非NSDictionary"><a href="#构建缓存时选用NSCache-而非NSDictionary" class="headerlink" title="构建缓存时选用NSCache 而非NSDictionary"></a>构建缓存时选用NSCache 而非NSDictionary</h2><p>当系统资源将要耗尽时，NSCache具备自动删减缓冲的功能。并且还会先删减“最久未使用”的对象。</p>
<p>NSCache不拷贝键，而是保留键。因为并不是所有的键都遵从拷贝协议（字典的键是必须要支持拷贝协议的，有局限性）。</p>
<p>NSCache是线程安全的：不编写加锁代码的前提下，多个线程可以同时访问NSCache。</p>
<h2 id="精简initialize-与-load的实现代码"><a href="#精简initialize-与-load的实现代码" class="headerlink" title="精简initialize 与 load的实现代码"></a>精简initialize 与 load的实现代码</h2><h3 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h3><p>每个类和分类在加入运行期系统时，都会调用load方法，而且仅仅调用一次，可能有些小伙伴习惯在这里调用一些方法，但是作者建议尽量不要在这个方法里调用其他方法，尤其是使用其他的类。原因是每个类载入程序库的时机是不同的，如果该类调用了还未载入程序库的类，就会很危险</p>
<h3 id="initialize方法"><a href="#initialize方法" class="headerlink" title="initialize方法"></a>initialize方法</h3><p>这个方法与load方法类似，区别是这个方法会在程序首次调用这个类的时候调用（惰性调用），而且只调用一次（绝对不能主动使用代码调用）</p>
<p>值得注意的一点是，如果子类没有实现它，它的超类却实现了，那么就会运行超类的代码：这个情况往往很容易让人忽视</p>
<h3 id="别忘了NSTimer会保留其目标对象"><a href="#别忘了NSTimer会保留其目标对象" class="headerlink" title="别忘了NSTimer会保留其目标对象"></a>别忘了NSTimer会保留其目标对象</h3><p>在使用NSTimer的时候，NSTimer会生成指向其使用者的引用，而其使用者如果也引用了NSTimer，那么就会生成保留环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface EOCClass : NSObject</span><br><span class="line">- (void)startPolling;</span><br><span class="line">- (void)stopPolling;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation EOCClass &#123;</span><br><span class="line">     NSTimer *_pollTimer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (id)init &#123;</span><br><span class="line">     return [super init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    [_pollTimer invalidate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)stopPolling &#123;</span><br><span class="line"></span><br><span class="line">    [_pollTimer invalidate];</span><br><span class="line">    _pollTimer &#x3D; nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)startPolling &#123;</span><br><span class="line">   _pollTimer &#x3D; [NSTimer scheduledTimerWithTimeInterval:5.0</span><br><span class="line">                                                 target:self</span><br><span class="line">                                               selector:@selector(p_doPoll)</span><br><span class="line">                                               userInfo:nil</span><br><span class="line">                                                repeats:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)p_doPoll &#123;</span><br><span class="line">    &#x2F;&#x2F; Poll the resource</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>在这里，在EOCClass和_pollTimer之间形成了保留环，如果不主动调用stopPolling方法就无法打破这个保留环。像这种通过主动调用方法来打破保留环的设计显然是不好的。</p>
<p>通过给NSTimer增加一个分类就可以解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface NSTimer (EOCBlocksSupport)</span><br><span class="line"></span><br><span class="line">+ (NSTimer*)eoc_scheduledTimerWithTimeInterval:(NSTimeInterval)interval</span><br><span class="line">                                         block:(void(^)())block</span><br><span class="line">                                         repeats:(BOOL)repeats;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation NSTimer (EOCBlocksSupport)</span><br><span class="line"></span><br><span class="line">+ (NSTimer*)eoc_scheduledTimerWithTimeInterval:(NSTimeInterval)interval</span><br><span class="line">                                         block:(void(^)())block</span><br><span class="line">                                        repeats:(BOOL)repeats</span><br><span class="line">&#123;</span><br><span class="line">             return [self scheduledTimerWithTimeInterval:interval</span><br><span class="line">                                                  target:self</span><br><span class="line">                                                selector:@selector(eoc_blockInvoke:)</span><br><span class="line">                                                userInfo:[block copy]</span><br><span class="line">                                                 repeats:repeats];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (void)eoc_blockInvoke:(NSTimer*)timer &#123;</span><br><span class="line">     void (^block)() &#x3D; timer.userInfo;</span><br><span class="line">         if (block) &#123;</span><br><span class="line">             block();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)startPolling &#123;</span><br><span class="line"></span><br><span class="line">         __weak EOCClass *weakSelf &#x3D; self;    </span><br><span class="line">         _pollTimer &#x3D; [NSTimer eoc_scheduledTimerWithTimeInterval:5.0 block:^&#123;</span><br><span class="line"></span><br><span class="line">               EOCClass *strongSelf &#x3D; weakSelf;</span><br><span class="line">               [strongSelf p_doPoll];</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">                                                          repeats:YES];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="技巧篇"><a href="#技巧篇" class="headerlink" title="技巧篇"></a>技巧篇</h1><h2 id="以“类族模式“隐藏实现细节"><a href="#以“类族模式“隐藏实现细节" class="headerlink" title="以“类族模式“隐藏实现细节"></a>以“类族模式“隐藏实现细节</h2><p>为什么要这么做呢?</p>
<p>笔者认为这么做的原因是为了“弱化”子类的具体类型，让开发者无需关心创建出来的子类具体属于哪个类。（这里觉得还有点什么，但是还没有想到，欢迎补充！）</p>
<p>我们可以看一个具体的例子：<br>对于“员工”这个类，可以有各种不同的“子类型”：开发员工，设计员工和财政员工。这些“实体类”可以由“员工”这个抽象基类来获得：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">抽象基类:</span><br><span class="line">typedef NS_ENUM(NSUInteger, EOCEmployeeType) &#123;</span><br><span class="line">    EOCEmployeeTypeDeveloper,</span><br><span class="line">    EOCEmployeeTypeDesigner,</span><br><span class="line">    EOCEmployeeTypeFinance,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@interface EOCEmployee : NSObject</span><br><span class="line"></span><br><span class="line">@property (copy) NSString *name;</span><br><span class="line">@property NSUInteger salary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Helper for creating Employee objects</span><br><span class="line">+ (EOCEmployee*)employeeWithType:(EOCEmployeeType)type;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Make Employees do their respective day&#39;s work</span><br><span class="line">- (void)doADaysWork;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation EOCEmployee</span><br><span class="line"></span><br><span class="line">+ (EOCEmployee*)employeeWithType:(EOCEmployeeType)type &#123;</span><br><span class="line">     switch (type) &#123;</span><br><span class="line">         case EOCEmployeeTypeDeveloper:</span><br><span class="line">            return [EOCEmployeeDeveloper new];</span><br><span class="line">         break; </span><br><span class="line"></span><br><span class="line">        case EOCEmployeeTypeDesigner:</span><br><span class="line">             return [EOCEmployeeDesigner new];</span><br><span class="line">         break;</span><br><span class="line"></span><br><span class="line">        case EOCEmployeeTypeFinance:</span><br><span class="line">             return [EOCEmployeeFinance new];</span><br><span class="line">         break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)doADaysWork &#123;</span><br><span class="line"> &#x2F;&#x2F; 需要子类来实现</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">实体子类（concrete subclass）:</span><br><span class="line"></span><br><span class="line">@interface EOCEmployeeDeveloper : EOCEmployee</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation EOCEmployeeDeveloper</span><br><span class="line"></span><br><span class="line">- (void)doADaysWork &#123;</span><br><span class="line">    [self writeCode];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="在既有类中使用关联对象存放自定义数据"><a href="#在既有类中使用关联对象存放自定义数据" class="headerlink" title="在既有类中使用关联对象存放自定义数据"></a>在既有类中使用关联对象存放自定义数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">这里，第一个参数是主对象，第二个参数是键，第三个参数是关联的对象，第四个参数是存储策略:是枚举，定义了内存管理语义。</span><br><span class="line">*&#x2F;</span><br><span class="line">void objc_setAssociatedObject(id object, void *key, id value, objc_AssociationPolicy policy)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据给定的键从某对象中获取相应的关联对象值：</span><br><span class="line">id objc_getAssociatedObject(id object, void *key)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 移除指定对象的关联对象：</span><br><span class="line">void objc_removeAssociatedObjects(id object)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code:</span><br><span class="line">#import &lt;objc&#x2F;runtime.h&gt;</span><br><span class="line"></span><br><span class="line">static void *EOCMyAlertViewKey &#x3D; &quot;EOCMyAlertViewKey&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)askUserAQuestion &#123;</span><br><span class="line"></span><br><span class="line">         UIAlertView *alert &#x3D; [[UIAlertView alloc] initWithTitle:@&quot;Question&quot;</span><br><span class="line">                                                         message:@&quot;What do you want to do?&quot;</span><br><span class="line">                                                        delegate:self</span><br><span class="line">                                               cancelButtonTitle:@&quot;Cancel&quot;</span><br><span class="line">                                               otherButtonTitles:@&quot;Continue&quot;, nil];</span><br><span class="line"></span><br><span class="line">         void (^block)(NSInteger) &#x3D; ^(NSInteger buttonIndex)&#123;</span><br><span class="line"></span><br><span class="line">                     if (buttonIndex &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                            [self doCancel];</span><br><span class="line">                     &#125; else &#123;</span><br><span class="line">                            [self doContinue];</span><br><span class="line">                    &#125;</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         &#x2F;&#x2F;将alert和block关联在了一起</span><br><span class="line">         objc_setAssociatedObject(alert,EOCMyAlertViewKey,block, OBJC_ASSOCIATION_COPY);</span><br><span class="line">         [alert show];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; UIAlertViewDelegate protocol method</span><br><span class="line">- (void)alertView:(UIAlertView*)alertView clickedButtonAtIndex:(NSInteger)buttonIndex</span><br><span class="line">&#123;</span><br><span class="line">     &#x2F;&#x2F;alert取出关联的block</span><br><span class="line">      void (^block)(NSInteger) &#x3D; objc_getAssociatedObject(alertView, EOCMyAlertViewKey)</span><br><span class="line">     &#x2F;&#x2F;给block传入index值</span><br><span class="line">      block(buttonIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="用“方法调配技术”调试“黑盒方法”"><a href="#用“方法调配技术”调试“黑盒方法”" class="headerlink" title="用“方法调配技术”调试“黑盒方法”"></a>用“方法调配技术”调试“黑盒方法”</h2><p>那么如何在运行期改变选择子对应的方法呢？</p>
<p>答：通过操纵类的方法列表的IMP指针</p>
<p>什么是类方法表？什么是IMP指针呢？</p>
<p>类的方法列表会把选择子的名称映射到相关的方法实现上，使得“动态消息派发系统”能够据此找到应该调用的方法。这些方法均以函数指针的形式来表示，这些指针叫做IMP。例如NSString类的选择子列表：</p>
<p>有了这张表，OC的运行期系统提供的几个方法就能操纵它。开发者可以向其中增加选择子，也可以改变某选择子对应的方法实现，也可以交换两个选择子所映射到的指针以达到交换方法实现的目的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">举个 ：交换lowercaseString和uppercaseString方法的实现：</span><br><span class="line"></span><br><span class="line">Method originalMethod &#x3D; class_getInstanceMethod([NSString class], @selector(lowercaseString));</span><br><span class="line">Method swappedMethod &#x3D; class_getInstanceMethod([NSString class],@selector(uppercaseString));</span><br><span class="line"></span><br><span class="line">method_exchangeImplementations(originalMethod, swappedMethod);</span><br></pre></td></tr></table></figure>

<h2 id="提供”全能初始化方法”"><a href="#提供”全能初始化方法”" class="headerlink" title="提供”全能初始化方法”"></a>提供”全能初始化方法”</h2><p>有时，由于要实现各种设计需求，一个类可以有多个创建实例的初始化方法。我们应该选定其中一个作为全能初始化方法，令其他初始化方法都来调用它。</p>
<p>注意：</p>
<ul>
<li>只有在这个全能初始化方法里面才能存储内部数据。这样一来，当底层数据存储机制改变时，只需修改此方法的代码就好，无需改动其他初始化方法。</li>
<li>全能初始化方法是所有初始化方法里参数最多的一个，因为它使用了尽可能多的初始化所需要的参数，以便其他的方法来调用自己</li>
<li>在我们拥有了一个全能初始化方法后，最好还是要覆写init方法来设置默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;全能初始化方法</span><br><span class="line">- (id)initWithWidth:(float)width andHeight:(float)height</span><br><span class="line">&#123;</span><br><span class="line">     if ((self &#x3D; [super init])) &#123;</span><br><span class="line">        _width &#x3D; width;</span><br><span class="line">        _height &#x3D; height;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;init方法也调用了全能初始化方法</span><br><span class="line">- (id)init &#123;</span><br><span class="line">     return [self initWithWidth:5.0f andHeight:10.0f];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为子类的全能初始化方法（initWithDimension:）和其父类的初始化方法并不同，所以我们需要在子类里覆写initWithWidth: andHeight:方法。</p>
<h2 id="实现description方法"><a href="#实现description方法" class="headerlink" title="实现description方法"></a>实现description方法</h2><p>如果在我们自己定义的类覆写description方法，我们就可以在打印这个类的实例时输出我们想要的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (NSString*)description &#123;</span><br><span class="line">     return [NSString stringWithFormat:@&quot;&lt;%@: %p, %@&gt;&quot;,[self class],self,</span><br><span class="line"></span><br><span class="line">    @&#123;    @&quot;title&quot;:_title,</span><br><span class="line">       @&quot;latitude&quot;:@(_latitude),</span><br><span class="line">      @&quot;longitude&quot;:@(_longitude)&#125;</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过协议提供匿名对象"><a href="#通过协议提供匿名对象" class="headerlink" title="通过协议提供匿名对象"></a>通过协议提供匿名对象</h2><p>匿名对象（Annonymous object），可以理解为“没有名字的对象”。有时我们用协议来提供匿名对象，目的在于说明它仅仅表示“遵从某个协议的对象”，而不是“属于某个类的对象”。</p>
<p>它的表示方法为：id<protocol>。<br>通过协议提供匿名对象的主要使用场景有两个：</p>
<ul>
<li>作为属性</li>
<li>作为方法参数</li>
</ul>
<h3 id="匿名对象作为属性"><a href="#匿名对象作为属性" class="headerlink" title="匿名对象作为属性"></a>匿名对象作为属性</h3><p>@property (nonatomic, weak) id <EOCDelegate> delegate;</p>
<p>在这里使用匿名对象的原因有两个：</p>
<p>将来可能会有很多不同类的实例对象作为该类的代理。</p>
<p>我们不想指明具体要使用哪个类来作为这个类的代理。</p>
<h3 id="匿名对象作为方法参数"><a href="#匿名对象作为方法参数" class="headerlink" title="匿名对象作为方法参数"></a>匿名对象作为方法参数</h3><p>有时，我们不会在意方法里某个参数的具体类型，而是遵循了某种协议，这个时候就可以使用匿名对象来作为方法参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)setObject:(id)object forKey:(id&lt;NSCopying&gt;)key;</span><br></pre></td></tr></table></figure>

<h2 id="编写“异常安全代码”时留意内存管理问题"><a href="#编写“异常安全代码”时留意内存管理问题" class="headerlink" title="编写“异常安全代码”时留意内存管理问题"></a>编写“异常安全代码”时留意内存管理问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@try &#123;</span><br><span class="line">    NSMutableArray *object &#x3D; [[NSMutableArray array] copy];</span><br><span class="line">    [object addObject:@&quot;&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@catch (...) &#123;</span><br><span class="line">    NSLog(@&quot;Whoops, there was an error. Oh well...&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="以弱引用避免保留环"><a href="#以弱引用避免保留环" class="headerlink" title="以弱引用避免保留环"></a>以弱引用避免保留环</h2><p>解决方案是使用弱引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;EOCClassB.m</span><br><span class="line">&#x2F;&#x2F;第一种弱引用：unsafe_unretained</span><br><span class="line">@property (nonatomic, unsafe_unretained) EOCClassA *other;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二种弱引用：weak</span><br><span class="line">@property (nonatomic, weak) EOCClassA *other;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这两种弱引用有什么区别呢？</p>
<p>unsafe_unretained:当指向EOCClassA实例的引用移除后，unsafe_unretained属性仍然指向那个已经回收的实例，</p>
<p>而weak指向nil：</p>
<h2 id="以“自动释放池快”降低内存峰值-MRC"><a href="#以“自动释放池快”降低内存峰值-MRC" class="headerlink" title="以“自动释放池快”降低内存峰值 (MRC)"></a>以“自动释放池快”降低内存峰值 (MRC)</h2><h2 id="用“僵尸对象”调试内存管理问题"><a href="#用“僵尸对象”调试内存管理问题" class="headerlink" title="用“僵尸对象”调试内存管理问题"></a>用“僵尸对象”调试内存管理问题</h2><p>某个对象被回收后，再向它发送消息是不安全的，这并不一定会引起程序崩溃。<br>如果程序没有崩溃，可能是因为：</p>
<ul>
<li>该内存的部分原数据没有被覆写。</li>
<li>该内存恰好被另一个对象占据，而这个对象可以应答这个方法。</li>
</ul>
<p>Cocoa提供了“僵尸对象”的功能。如果开启了这个功能，运行期系统会把所有已经回收的实例转化成特殊的“僵尸对象”（通过修改isa指针，令其指向特殊的僵尸类），而不会真正回收它们，而且它们所占据的核心内存将无法被重用，这样也就避免了覆写的情况。</p>
<h2 id="为常用的块类型创建typedef"><a href="#为常用的块类型创建typedef" class="headerlink" title="为常用的块类型创建typedef"></a>为常用的块类型创建typedef</h2><p>如果我们需要重复创建某种块（相同参数，返回值）的变量，我们就可以通过typedef来给某一种块定义属于它自己的新类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef int(^EOCSomeBlock)(BOOL flag, int value);</span><br></pre></td></tr></table></figure>

<h2 id="用handler块降低代码分散程度"><a href="#用handler块降低代码分散程度" class="headerlink" title="用handler块降低代码分散程度"></a>用handler块降低代码分散程度</h2><p>delegate -&gt; block</p>
<h2 id="用块引用其所属对象时不要出现保留环"><a href="#用块引用其所属对象时不要出现保留环" class="headerlink" title="用块引用其所属对象时不要出现保留环"></a>用块引用其所属对象时不要出现保留环</h2><p>如果块捕获的对象直接或间接地保留了块本身，那么就需要小心保留环问题:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation EOCClass &#123;</span><br><span class="line"></span><br><span class="line">     EOCNetworkFetcher *_networkFetcher;</span><br><span class="line">     NSData *_fetchedData;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)downloadData &#123;</span><br><span class="line"></span><br><span class="line">     NSURL *url &#x3D; [[NSURL alloc] initWithString:@&quot;http:&#x2F;&#x2F;www.example.com&#x2F;something.dat&quot;];</span><br><span class="line">    _networkFetcher &#x3D;[[EOCNetworkFetcher alloc] initWithURL:url];</span><br><span class="line"></span><br><span class="line">    [_networkFetcher startWithCompletionHandler:^(NSData *data)&#123;</span><br><span class="line"></span><br><span class="line">             NSLog(@&quot;Request URL %@ finished&quot;, _networkFetcher.url);</span><br><span class="line">            _fetchedData &#x3D; data;</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里出现了保留环：块要设置_fetchedData变量，就需要捕获self变量。而self（EOCClass实例）通过实例变量保留了获取器_networkFetcher，而_networkFetcher又保留了块。</p>
<p>解决方案是：在块中取得了data后，将_networkFetcher设为nil。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)downloadData &#123;</span><br><span class="line"></span><br><span class="line">     NSURL *url &#x3D; [[NSURL alloc] initWithString:@&quot;http:&#x2F;&#x2F;www.example.com&#x2F;something.dat&quot;];</span><br><span class="line">    _networkFetcher &#x3D;[[EOCNetworkFetcher alloc] initWithURL:url];</span><br><span class="line">    [_networkFetcher startWithCompletionHandler:^(NSData *data)&#123;</span><br><span class="line"></span><br><span class="line">             NSLog(@&quot;Request URL %@ finished&quot;, _networkFetcher.url);</span><br><span class="line">            _fetchedData &#x3D; data;</span><br><span class="line">            _networkFetcher &#x3D; nil;</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多用派发队列，少用同步锁"><a href="#多用派发队列，少用同步锁" class="headerlink" title="多用派发队列，少用同步锁"></a>多用派发队列，少用同步锁</h2><p>多个线程执行同一份代码时，很可能会造成数据不同步。作者建议使用GCD来为代码加锁的方式解决这个问题。</p>
<h3 id="使用串行同步队列来将读写操作都安排到同一个队列里"><a href="#使用串行同步队列来将读写操作都安排到同一个队列里" class="headerlink" title="使用串行同步队列来将读写操作都安排到同一个队列里"></a>使用串行同步队列来将读写操作都安排到同一个队列里</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_syncQueue &#x3D; dispatch_queue_create(&quot;com.effectiveobjectivec.syncQueue&quot;, NULL);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;读取字符串</span><br><span class="line">- (NSString*)someString &#123;</span><br><span class="line"></span><br><span class="line">         __block NSString *localSomeString;</span><br><span class="line">         dispatch_sync(_syncQueue, ^&#123;</span><br><span class="line">            localSomeString &#x3D; _someString;</span><br><span class="line">        &#125;);</span><br><span class="line">         return localSomeString;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置字符串</span><br><span class="line">- (void)setSomeString:(NSString*)someString &#123;</span><br><span class="line"></span><br><span class="line">     dispatch_sync(_syncQueue, ^&#123;</span><br><span class="line">        _someString &#x3D; someString;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将写操作放入栅栏快中，让他们单独执行；将读取操作并发执行。"><a href="#将写操作放入栅栏快中，让他们单独执行；将读取操作并发执行。" class="headerlink" title="将写操作放入栅栏快中，让他们单独执行；将读取操作并发执行。"></a>将写操作放入栅栏快中，让他们单独执行；将读取操作并发执行。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_syncQueue &#x3D; dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">&#x2F;&#x2F;读取字符串</span><br><span class="line">- (NSString*)someString &#123;</span><br><span class="line"></span><br><span class="line">     __block NSString *localSomeString;</span><br><span class="line">     dispatch_sync(_syncQueue, ^&#123;</span><br><span class="line">        localSomeString &#x3D; _someString;</span><br><span class="line">    &#125;);</span><br><span class="line">     return localSomeString;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;设置字符串</span><br><span class="line">- (void)setSomeString:(NSString*)someString &#123;</span><br><span class="line"></span><br><span class="line">     dispatch_barrier_async(_syncQueue, ^&#123;</span><br><span class="line">        _someString &#x3D; someString;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>显然，数据的正确性主要取决于写入操作，那么只要保证写入时，线程是安全的，那么即便读取操作是并发的，也可以保证数据是同步的。<br>这里的dispatch_barrier_async方法使得操作放在了同步队列里“有序进行”，保证了写入操作的任务是在串行队列里。</p>
</blockquote>
<h2 id="多用GCD，少用performSelector系列方法"><a href="#多用GCD，少用performSelector系列方法" class="headerlink" title="多用GCD，少用performSelector系列方法"></a>多用GCD，少用performSelector系列方法</h2><p>在iOS开发中，有时会使用performSelector来执行某个方法，但是performSelector系列的方法能处理的选择子很局限：</p>
<ul>
<li>它无法处理带有多个参数的选择子。</li>
<li>返回值只能是void或者对象类型。</li>
</ul>
<p>但是如果将方法放在块中，通过GCD来操作就能很好地解决这些问题。尤其是我们如果想要让一个任务在另一个线程上执行，最好应该将任务放到块里，交给GCD来实现，而不是通过performSelector方法</p>
<h3 id="延后执行某个任务的方法："><a href="#延后执行某个任务的方法：" class="headerlink" title="延后执行某个任务的方法："></a>延后执行某个任务的方法：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用 performSelector:withObject:afterDelay:</span><br><span class="line">[self performSelector:@selector(doSomething) withObject:nil afterDelay:5.0];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用 dispatch_after</span><br><span class="line">dispatch_time_t time &#x3D; dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5.0 * NSEC_PER_SEC));</span><br><span class="line">dispatch_after(time, dispatch_get_main_queue(), ^(void)&#123;</span><br><span class="line">    [self doSomething];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="将任务放在主线程执行"><a href="#将任务放在主线程执行" class="headerlink" title="将任务放在主线程执行"></a>将任务放在主线程执行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用 performSelectorOnMainThread:withObject:waitUntilDone:</span><br><span class="line">[self performSelectorOnMainThread:@selector(doSomething) withObject:nil waitUntilDone:NO];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用 dispatch_async</span><br><span class="line">&#x2F;&#x2F; (or if waitUntilDone is YES, then dispatch_sync)</span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [self doSomething];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="掌握GCD及操作队列的使用时机"><a href="#掌握GCD及操作队列的使用时机" class="headerlink" title="掌握GCD及操作队列的使用时机"></a>掌握GCD及操作队列的使用时机</h2><p>除了GCD，操作队列（NSOperationQueue）也是解决多线程任务管理问题的一个方案。对于不同的环境，我们要采取不同的策略来解决问题：有时候使用GCD好些，有时则是使用操作队列更加合理。</p>
<h3 id="使用NSOperation和NSOperationQueue的优点："><a href="#使用NSOperation和NSOperationQueue的优点：" class="headerlink" title="使用NSOperation和NSOperationQueue的优点："></a>使用NSOperation和NSOperationQueue的优点：</h3><ul>
<li>可以取消操作：在运行任务前，可以在NSOperation对象调用cancel方法，标明此任务不需要执行。但是GCD队列是无法取消的，因为它遵循“安排好之后就不管了（fire and forget）”的原则。</li>
<li>可以指定操作间的依赖关系：例如从服务器下载并处理文件的动作可以用操作来表示。而在处理其他文件之前必须先下载“清单文件”。而后续的下载工作，都要依赖于先下载的清单文件这一操作。</li>
<li>监控NSOperation对象的属性：可以通过KVO来监听NSOperation的属性：可以通过isCancelled属性来判断任务是否已取消；通过isFinished属性来判断任务是否已经完成。</li>
<li>可以指定操作的优先级：操作的优先级表示此操作与队列中其他操作之间的优先关系，我们可以指定它。</li>
</ul>
<h2 id="通过Dispath-Group机制，根据系统资源状况来执行任务"><a href="#通过Dispath-Group机制，根据系统资源状况来执行任务" class="headerlink" title="通过Dispath Group机制，根据系统资源状况来执行任务"></a>通过Dispath Group机制，根据系统资源状况来执行任务</h2><p>有时需要等待多个并行任务结束的那一刻执行某个任务，这个时候就可以使用dispath group函数来实现这个需求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;一个优先级低的并发队列</span><br><span class="line">dispatch_queue_t lowPriorityQueue &#x3D; dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;一个优先级高的并发队列</span><br><span class="line">dispatch_queue_t highPriorityQueue &#x3D; dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建dispatch_group</span><br><span class="line">dispatch_group_t dispatchGroup &#x3D; dispatch_group_create();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将优先级低的队列放入dispatch_group</span><br><span class="line">for (id object in lowPriorityObjects) &#123;</span><br><span class="line"> dispatch_group_async(dispatchGroup,lowPriorityQueue,^&#123; [object performTask]; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将优先级高的队列放入dispatch_group</span><br><span class="line">for (id object in highPriorityObjects) &#123;</span><br><span class="line"> dispatch_group_async(dispatchGroup,highPriorityQueue,^&#123; [object performTask]; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;dispatch_group里的任务都结束后调用块中的代码</span><br><span class="line">dispatch_queue_t notifyQueue &#x3D; dispatch_get_main_queue();</span><br><span class="line">dispatch_group_notify(dispatchGroup,notifyQueue,^&#123;</span><br><span class="line">     &#x2F;&#x2F; Continue processing after completing tasks</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="使用dispatch-once来执行只需运行一次的线程安全代码"><a href="#使用dispatch-once来执行只需运行一次的线程安全代码" class="headerlink" title="使用dispatch_once来执行只需运行一次的线程安全代码"></a>使用dispatch_once来执行只需运行一次的线程安全代码</h2><p>有时我们可能只需要将某段代码执行一次，这时可以通过dispatch_once函数来解决。</p>
<p>dispatch_once函数比较重要的使用例子是单例模式：<br>我们在创建单例模式的实例时，可以使用dispatch_once函数来令初始化代码只执行一次，并且内部是线程安全的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ (id)sharedInstance &#123;</span><br><span class="line"></span><br><span class="line">     static EOCClass *sharedInstance &#x3D; nil;</span><br><span class="line">     static dispatch_once_t onceToken;</span><br><span class="line">     dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">            sharedInstance &#x3D; [[self alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">     return sharedInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="对自定义其内存管理语义的collection使用无缝桥接"><a href="#对自定义其内存管理语义的collection使用无缝桥接" class="headerlink" title="对自定义其内存管理语义的collection使用无缝桥接"></a>对自定义其内存管理语义的collection使用无缝桥接</h2><p>通过无缝桥接技术，可以再Foundation框架中的OC对象和CoreFoundation框架中的C语言数据结构之间来回转换</p>
]]></content>
      <categories>
        <category>技术读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>iOS提升点</title>
    <url>/2018/07/15/iOS%E6%8F%90%E5%8D%87%E7%82%B9/</url>
    <content><![CDATA[<p>iOS一些有趣的东西</p>
<h2 id="UI相关"><a href="#UI相关" class="headerlink" title="UI相关"></a>UI相关</h2><h3 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView"></a>UITableView</h3><ul>
<li>复用机制原理:一个列表中,有一部分显示在屏幕之中的cell 会放在一个已使用的池中,当滑动tableview的时候,首先会到待使用的池中去拿有没有可以复用的cell,如果没有就创建,有就从池中拿出来复用,一般池中的cell数量是屏幕最多能显示cell的数量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;ViewReusePool</span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line">&#x2F;&#x2F; 实现重用机制的类</span><br><span class="line">@interface ViewReusePool : NSObject</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 从重用池当中取出一个可重用的view</span><br><span class="line">- (UIView *)dequeueReusableView;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 向重用池当中添加一个视图</span><br><span class="line">- (void)addUsingView:(UIView *)view;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 重置方法，将当前使用中的视图移动到可重用队列当中</span><br><span class="line">- (void)reset;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;ViewReusePool.h&quot;</span><br><span class="line"></span><br><span class="line">@interface ViewReusePool ()</span><br><span class="line">&#x2F;&#x2F; 等待使用的队列</span><br><span class="line">@property (nonatomic, strong) NSMutableSet *waitUsedQueue;</span><br><span class="line">&#x2F;&#x2F; 使用中的队列</span><br><span class="line">@property (nonatomic, strong) NSMutableSet *usingQueue;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewReusePool</span><br><span class="line"></span><br><span class="line">- (id)init&#123;</span><br><span class="line">    self &#x3D; [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _waitUsedQueue &#x3D; [NSMutableSet set];</span><br><span class="line">        _usingQueue &#x3D; [NSMutableSet set];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UIView *)dequeueReusableView&#123;</span><br><span class="line">    UIView *view &#x3D; [_waitUsedQueue anyObject];</span><br><span class="line">    if (view &#x3D;&#x3D; nil) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        &#x2F;&#x2F; 进行队列移动</span><br><span class="line">        [_waitUsedQueue removeObject:view];</span><br><span class="line">        [_usingQueue addObject:view];</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)addUsingView:(UIView *)view</span><br><span class="line">&#123;</span><br><span class="line">    if (view &#x3D;&#x3D; nil) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 添加视图到使用中的队列</span><br><span class="line">    [_usingQueue addObject:view];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)reset&#123;</span><br><span class="line">    UIView *view &#x3D; nil;</span><br><span class="line">    while ((view &#x3D; [_usingQueue anyObject])) &#123;</span><br><span class="line">        &#x2F;&#x2F; 从使用中队列移除</span><br><span class="line">        [_usingQueue removeObject:view];</span><br><span class="line">        &#x2F;&#x2F; 加入等待使用的队列</span><br><span class="line">        [_waitUsedQueue addObject:view];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@protocol IndexedTableViewDataSource &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取一个tableview的字母索引条数据的方法</span><br><span class="line">- (NSArray &lt;NSString *&gt; *)indexTitlesForIndexTableView:(UITableView *)tableView;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface IndexedTableView : UITableView</span><br><span class="line">@property (nonatomic, weak) id &lt;IndexedTableViewDataSource&gt; indexedDataSource;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;IndexedTableView.h&quot;</span><br><span class="line">#import &quot;ViewReusePool.h&quot;</span><br><span class="line">@interface IndexedTableView ()</span><br><span class="line">&#123;</span><br><span class="line">    UIView *containerView;</span><br><span class="line">    ViewReusePool *reusePool;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation IndexedTableView</span><br><span class="line"></span><br><span class="line">- (void)reloadData&#123;</span><br><span class="line">    [super reloadData];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 懒加载</span><br><span class="line">    if (containerView &#x3D;&#x3D; nil) &#123;</span><br><span class="line">        containerView &#x3D; [[UIView alloc] initWithFrame:CGRectZero];</span><br><span class="line">        containerView.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;避免索引条随着table滚动</span><br><span class="line">        [self.superview insertSubview:containerView aboveSubview:self];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (reusePool &#x3D;&#x3D; nil) &#123;</span><br><span class="line">        reusePool &#x3D; [[ViewReusePool alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 标记所有视图为可重用状态</span><br><span class="line">    [reusePool reset];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; reload字母索引条</span><br><span class="line">    [self reloadIndexedBar];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)reloadIndexedBar</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 获取字母索引条的显示内容</span><br><span class="line">    NSArray &lt;NSString *&gt; *arrayTitles &#x3D; nil;</span><br><span class="line">    if ([self.indexedDataSource respondsToSelector:@selector(indexTitlesForIndexTableView:)]) &#123;</span><br><span class="line">        arrayTitles &#x3D; [self.indexedDataSource indexTitlesForIndexTableView:self];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 判断字母索引条是否为空</span><br><span class="line">    if (!arrayTitles || arrayTitles.count &lt;&#x3D; 0) &#123;</span><br><span class="line">        [containerView setHidden:YES];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSUInteger count &#x3D; arrayTitles.count;</span><br><span class="line">    CGFloat buttonWidth &#x3D; 60;</span><br><span class="line">    CGFloat buttonHeight &#x3D; self.frame.size.height &#x2F; count;</span><br><span class="line">    </span><br><span class="line">    for (int i &#x3D; 0; i &lt; [arrayTitles count]; i++) &#123;</span><br><span class="line">        NSString *title &#x3D; [arrayTitles objectAtIndex:i];</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 从重用池当中取一个Button出来</span><br><span class="line">        UIButton *button &#x3D; (UIButton *)[reusePool dequeueReusableView];</span><br><span class="line">        &#x2F;&#x2F; 如果没有可重用的Button重新创建一个</span><br><span class="line">        if (button &#x3D;&#x3D; nil) &#123;</span><br><span class="line">            button &#x3D; [[UIButton alloc] initWithFrame:CGRectZero];</span><br><span class="line">            button.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; 注册button到重用池当中</span><br><span class="line">            [reusePool addUsingView:button];</span><br><span class="line">            NSLog(@&quot;新创建一个Button&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            NSLog(@&quot;Button 重用了&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 添加button到父视图控件</span><br><span class="line">        [containerView addSubview:button];</span><br><span class="line">        [button setTitle:title forState:UIControlStateNormal];</span><br><span class="line">        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 设置button的坐标</span><br><span class="line">        [button setFrame:CGRectMake(0, i * buttonHeight, buttonWidth, buttonHeight)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [containerView setHidden:NO];</span><br><span class="line">    containerView.frame &#x3D; CGRectMake(self.frame.origin.x + self.frame.size.width - buttonWidth, self.frame.origin.y, buttonWidth, self.frame.size.height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li>
<li>数据源同步解决方案<ul>
<li>并发访问,数据拷贝(因为需要拷贝操作同步,所以对内存的开销有一定的影响)</li>
<li>串行访问:比如把主线的数据删除操作与子线程的网络请求操作,放到一个串行队列里面,等串行队列执行完之后在刷新UI(有可能删除操作会延时)<h3 id="事件传递-amp-视图响应"><a href="#事件传递-amp-视图响应" class="headerlink" title="事件传递&amp;视图响应"></a>事件传递&amp;视图响应</h3></li>
</ul>
</li>
<li>View的渲染是layer操作的,layer的渲染是content,content其实就是一个backing store 的位图,最终显示在屏幕上,View为其提供内容,以及负责处理触摸等事件,参与响应链,而CALayer负责显示内容content,单一设计原则</li>
<li>事件传递:点击屏幕-&gt;UIApplication-&gt;UIWindow-&gt;hitTest-&gt;与pointInside(查点是否在当前视图递减范围内)-&gt;SubView(倒叙遍历子视图的hitTest)-&gt;结束 (如果view透明,不可触摸,或者隐藏的话不进入hitTest,找到view之后最终谁来处理就涉及到响应链了)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;方形button指定原圆形区域有效</span><br><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event</span><br><span class="line">&#123;</span><br><span class="line">    if (!self.userInteractionEnabled ||</span><br><span class="line">        [self isHidden] ||</span><br><span class="line">        self.alpha &lt;&#x3D; 0.01) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self pointInside:point withEvent:event]) &#123;</span><br><span class="line">        &#x2F;&#x2F;遍历当前对象的子视图</span><br><span class="line">        __block UIView *hit &#x3D; nil;</span><br><span class="line">        [self.subviews enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(__kindof UIView * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">            &#x2F;&#x2F; 坐标转换</span><br><span class="line">            CGPoint vonvertPoint &#x3D; [self convertPoint:point toView:obj];</span><br><span class="line">            &#x2F;&#x2F;调用子视图的hittest方法</span><br><span class="line">            hit &#x3D; [obj hitTest:vonvertPoint withEvent:event];</span><br><span class="line">            &#x2F;&#x2F; 如果找到了接受事件的对象，则停止遍历</span><br><span class="line">            if (hit) &#123;</span><br><span class="line">                *stop &#x3D; YES;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        if (hit) &#123;</span><br><span class="line">            return hit;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            return self;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event</span><br><span class="line">&#123;</span><br><span class="line">    CGFloat x1 &#x3D; point.x;</span><br><span class="line">    CGFloat y1 &#x3D; point.y;</span><br><span class="line">    </span><br><span class="line">    CGFloat x2 &#x3D; self.frame.size.width &#x2F; 2;</span><br><span class="line">    CGFloat y2 &#x3D; self.frame.size.height &#x2F; 2;</span><br><span class="line">    </span><br><span class="line">    double dis &#x3D; sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));</span><br><span class="line">    &#x2F;&#x2F; 67.923</span><br><span class="line">    if (dis &lt;&#x3D; self.frame.size.width &#x2F; 2) &#123;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>视图响应 subView-&gt;View-&gt;UIViewConteoller(有的话)-&gt;UIWindow-&gt;Application-&gt;UIApplicationDelegate (如果没人接受,就忽略这个事件)<h3 id="图像显示原理"><a href="#图像显示原理" class="headerlink" title="图像显示原理"></a>图像显示原理</h3></li>
<li>cpu输出位图通过总线传输GPU(图层渲染和纹理的合成,OpenGL)放在帧缓冲区中,通过视频控制器通过Vync信号提取帧,最终显示</li>
<li>CPU(Layout DIsplay绘制(drawrec) prepare(图片解码) commit提交)</li>
<li>GPU(顶底着色 图元装配 光栅化 片段着色 片段处理)<h3 id="卡顿-amp-掉帧"><a href="#卡顿-amp-掉帧" class="headerlink" title="卡顿&amp;掉帧"></a>卡顿&amp;掉帧</h3></li>
<li>原因:Vsyn 信号是1/60s 提取一帧 如果cpu(时间多点)与gpu没有处理完成的下一帧就会出现掉帧</li>
<li>滑动优化方案:CPU中子线程(处理对象操作,预排版(布局),预渲染(文本绘制,图片解码)) GPU中(纹理渲染(离屏渲染),视图混合(视图不要太多层))<h3 id="绘制原理-amp-异步绘制"><a href="#绘制原理-amp-异步绘制" class="headerlink" title="绘制原理&amp;异步绘制"></a>绘制原理&amp;异步绘制</h3></li>
<li>setNeedsDisplay(没有立即渲染),只是给layer打上setNeedsDisplay标记,会在当前runloop将要结束的时候才会调用layer的display</li>
<li>系统的绘制:layer创建一个backing store 然后查看有没有代理,有的话就调用我们的[UIView drawRect:]最后上传到GPU</li>
<li>异步绘制:setNeedsDisplay时 实现displayLayer方法,开一个全局的队列去生成位图赋值给layer的content最后在会到主线程提交渲染<h3 id="离屏渲染"><a href="#离屏渲染" class="headerlink" title="离屏渲染"></a>离屏渲染</h3></li>
<li>GPU在当前屏幕缓冲区外再开辟一个缓冲区来进行渲染操作</li>
<li>圆角,图层蒙版,阴影,光栅化</li>
<li>创建新的缓冲区开销,上下文切换</li>
</ul>
<h2 id="OC的相关特性"><a href="#OC的相关特性" class="headerlink" title="OC的相关特性"></a>OC的相关特性</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>做什么:声明私有方法 分解类文件(功能区分) 把framework的私有方法公开化</li>
<li>特点:运行时决议,可以为系统类添加分类</li>
<li>实例方法 类方法 协议 属性(只是实现getset方法,实例变量通过关联)</li>
<li>分类的结构体<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct category_t &#123;</span><br><span class="line">    const char *name; &#x2F;&#x2F; 类名</span><br><span class="line">    classref_t cls; &#x2F;&#x2F; 分类所属的类</span><br><span class="line">    struct method_list_t *instanceMethods; &#x2F;&#x2F; 实例方法列表</span><br><span class="line">    struct method_list_t *classMethods; &#x2F;&#x2F; 类方法列表</span><br><span class="line">    struct protocol_list_t *protocols; &#x2F;&#x2F; 遵循的协议列表</span><br><span class="line">    struct property_list_t *instanceProperties; &#x2F;&#x2F; 属性列表</span><br><span class="line">    &#x2F;&#x2F; 如果是元类,就返回类方法列表;否则返回实例方法列表</span><br><span class="line">    method_list_t *methodsForMeta(bool isMeta) &#123;</span><br><span class="line">        if (isMeta) &#123;</span><br><span class="line">            return classMethods;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return instanceMethods;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 如果是元类,就返回 nil,因为元类没有属性;否则返回实例属性列表,但是...实例属性</span><br><span class="line">    property_list_t *propertiesForMeta(bool isMeta) &#123;</span><br><span class="line">        if (isMeta) &#123;</span><br><span class="line">            return nil; &#x2F;&#x2F; classProperties;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return instanceProperties;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></li>
<li>加载掉用栈 remethodizeClass(把所属的分类拼接到所属类上列表上,里面是一个二维数组,来添加分类的列表),列表通过倒叙遍历,最新访问最后编译的类,相同的分类名字会引起变异报错<h3 id="关联对象"><a href="#关联对象" class="headerlink" title="关联对象"></a>关联对象</h3></li>
<li>关联对象是由AssociateHashMap存储的,所有对象的关联内容都在同一个全局的容器中</li>
<li>key:ObjAssociation(copy,retain策略 value)-&gt;指针:ObjAssociationMap -&gt; AssociateHashMap<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;0x8888888888&quot;:&#123;</span><br><span class="line">        &quot;@selector(text)&quot;:&#123;</span><br><span class="line">            &quot;value&quot;:&quot;hello&quot;,</span><br><span class="line">            &quot;policy&quot;:&quot;retain&#x2F;copy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2></li>
<li>做什么:私有属性,私有方法,私有成员变量</li>
<li>与分类的区别:编译时决议,只有声明的方式形式存在,多数寄生在.m文件,不能为系统添加扩展</li>
</ul>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><ul>
<li>一对一的传递方式</li>
<li>一般声明weak以规避循环引用</li>
<li>代理模式实现</li>
</ul>
<h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><ul>
<li>使用观察者模式来现实的跨层传递消息</li>
<li>一对多</li>
<li>发送者发给通知中心(单例)广播给其他的接受者</li>
<li>如何实现:有一个Notifivation_Map表(key(通知名称):观察者列表(observer、SEL))</li>
</ul>
<h2 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h2><ul>
<li>键值观察者模式</li>
<li>使用isa-swizzing实现 系统会动态创建一个KVO_classname的类来重新Setter方法(调用willchangvalueforkey与didiChangValueForKey),来指向原来class的isa指针</li>
<li>成员变量使用手动添加调用willchangvalueforkey与didiChangValueForKey<h2 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h2></li>
<li>+(BOOL)accessInstance.. 返回NO 不会调用成员变量只能调setKey</li>
<li> getKey _key _isKey key isKey 如果找不到会抛异常闪退</li>
</ul>
<h2 id="属性关键字"><a href="#属性关键字" class="headerlink" title="属性关键字"></a>属性关键字</h2><ul>
<li>atomic/nonatomic 对成员属性的赋值和获取时线程安全的(atomic),但是进行操作不是线程安全的</li>
<li>retain</li>
<li>strong</li>
<li>assign/unsafe_unretain</li>
<li>weak 不改变引用计数 释放后自动变成nil,可以修饰对象</li>
<li>assign 会产生悬垂指针,修饰基本数据类型,不改变引用计数</li>
<li>copy 浅拷贝 指向同一块指针,引用计数+1 深拷贝 开辟新的内存空间 引用计数不加1</li>
<li>可变对象 copy 不可变(深) mutablecopy 可变(深)</li>
<li>不可变对象 copy 不可变(浅) mutablecopy 可变 (深)</li>
</ul>
<h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul>
<li>id = objc_object<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct objc_object &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>Class = objc_class<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct objc_class : objc_object &#123;</span><br><span class="line">    &#x2F;&#x2F; Class ISA;  &#x2F;&#x2F;对象实例的isa指向Class(类对象),Class又指向MetaClass(元类对象)</span><br><span class="line">    Class superclass;</span><br><span class="line">    cache_t cache;  &#x2F;&#x2F;cache 快速查找方法执行函数,可增量扩展的哈希表结构(key:IMP(函数指针))</span><br><span class="line">    &#x2F;&#x2F; 对class_rw_t 的封装 代表了对类的相关读写信息(分类的方法,属性,协议等等)</span><br><span class="line">    &#x2F;&#x2F; objc_ivar_list methodLists protocols &#x2F;对class_rot的封装 name </span><br><span class="line">    class_data_bits_t bits; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt;</span><br><span class="line">struct objc_class &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"></span><br><span class="line">#if !__OBJC2__</span><br><span class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class="line">    const char * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class="line">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class="line">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class="line">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li>method (SEL name;(名称) + const chart*types;(返回值和参数)  IMP imp;(函数体) )</li>
<li>Type Encodings -(void)method的chart*types(返回值,参数1,参数2 …. 参数n) == v(void)@(id):(SEL)<h3 id="类对象与元类对象"><a href="#类对象与元类对象" class="headerlink" title="类对象与元类对象"></a>类对象与元类对象</h3></li>
<li>类对象存储实例方法列表 元类对象存储类方法列表</li>
<li>实例可以通过isa指针找到类对象,类对象游可以通过isa指针知道元类对象,元类对象的isa指针指向根元元类对象,元类对象的superclass指针会指向类对象的Root(也就是说找不到某个类方法时候,如果实例列表有相同方法名的方法会调用)<h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3></li>
<li>objc_msgSend(void/<em>id self;SEL op…</em>/)  [objc test] =&gt; objc_msgSend(objc,@)<h3 id="方法缓存"><a href="#方法缓存" class="headerlink" title="方法缓存"></a>方法缓存</h3></li>
<li>cache 快速查找方法执行函数,可增量扩展的哈希表结构(key:IMP(函数指针))<h3 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h3></li>
<li>resolveInstanceMethod 是否需要消息转发</li>
<li>forwardingTargetForSelector 给转发目标</li>
<li>methodSignatureForSelector 返回方法签名</li>
<li>forwardInvocation<h3 id="swizzing"><a href="#swizzing" class="headerlink" title="swizzing"></a>swizzing</h3><h3 id="动态添加方法"><a href="#动态添加方法" class="headerlink" title="动态添加方法"></a>动态添加方法</h3></li>
<li> class_addMethod(self, @selector(test), testIMP, “v@:”);<h3 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h3></li>
<li>不需要编译器在编译的时候生成getsetff,在运行时生成 (动态运行时语言将函数决议推迟到运行时)</li>
<li>@dynamic与@synthesize的区别,@property有两个对应的词，一个是@synthesize，一个是@dynamic。如果@synthesize和@dynamic都没写，那么默认的就是@syntheszie var = _var;,@synthesize的语义是如果你没有手动实现setter方法和getter方法，那么编译器会自动为你加上这两个方法。,@dynamic告诉编译器,属性的setter与getter方法由用户自己实现，不自动生成。（当然对于readonly的属性只需提供getter即可）。假如一个属性被声明为@dynamic var，然后你没有提供@setter方法和@getter方法，编译的时候没问题，但是当程序运行到instance.var =someVar，由于缺setter方法会导致程序崩溃；或者当运行到 someVar = var时，由于缺getter方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定</li>
</ul>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><blockquote>
<p>栈(高到低 方法调用) 堆(低到高 alloc) 未初始化 已初始化 程序代码段</p>
</blockquote>
<h3 id="内存管理方案"><a href="#内存管理方案" class="headerlink" title="内存管理方案"></a>内存管理方案</h3><ul>
<li>NONPOINTER_ISA (非指针形的isa) 64位 33位指向类对象指针的地址和其他的是内存管理的操作</li>
<li>散列表 Side Tables (本质是哈希表 key(对象指针) vlaue(Side Table)) 有64张Side Table(有自旋锁 引用计数表 弱引用表),为什么要多张表是因为效率问题,引用分离锁<h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3></li>
<li>自旋锁 (忙等的锁,适用轻量访问)</li>
<li>引用计数表(哈希表 key(对象指针) vlaue(引用计数 64位 要右漂移2位))</li>
<li>弱引用表(哈希表 key(对象指针) vlaue(wek指针数组))<h3 id="ARC-amp-MRC"><a href="#ARC-amp-MRC" class="headerlink" title="ARC&amp;MRC"></a>ARC&amp;MRC</h3></li>
<li>MRC:手动引用计数 alloc retain release autorelease dealloc</li>
<li>ARC:自动引用计数,LLVM和Runtime协作的结果 weak strong<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3></li>
</ul>
<h3 id="自动释放池"><a href="#自动释放池" class="headerlink" title="自动释放池"></a>自动释放池</h3><ul>
<li>实现原理:</li>
<li>结构:以栈为结点通过双向链表的形式组合而成 是和线程一一对应的 autorelease先判断是否是栈顶不是的话就add(obj)在next位置,添加一个栈节点到链表上.</li>
<li>在每一次runloop要结束的时候release(AutolreasePoolPage:pop)</li>
<li>AutolreasePoolPage (id* next(栈的下一个位置空位置) ,前后指针,thread) AutolreasePoolPage:push(把next置nil,(就是一个autorelasepoo的代码块) 然后指向下一个) AutolreasePoolPage:pop(出栈) 拿到添加的对象依次fasongrelease消息</li>
<li>autoreleasepool可以嵌套就是多次插入next对象<h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3></li>
<li>自循环 (一个对象)</li>
<li>相互循环 (2个对象)</li>
<li>多循环 (多个循环)</li>
<li>避免,在适当的时候断环</li>
<li>代理,block,NSTimer(Runloop-&gt;NSTimer(相互循环)对象-&gt;VC,如果定时器是一次时候的话就可以在定时器的回调中调用time的invalid,然后把timer=nil,如果是多次的话可以加入中间变量对对象和nstimer进行弱引用 Runloop-&gt;NSTimer 强-&gt; &lt;-弱中间对象-弱-&gt;对象-&gt;VC)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface TimerWeakObject : NSObject</span><br><span class="line">@property (nonatomic, weak) id target; &#x2F;&#x2F;主要</span><br><span class="line">@property (nonatomic, assign) SEL selector;</span><br><span class="line">@property (nonatomic, weak) NSTimer *timer;&#x2F;&#x2F;主要</span><br><span class="line"></span><br><span class="line">- (void)fire:(NSTimer *)timer;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation TimerWeakObject</span><br><span class="line"></span><br><span class="line">- (void)fire:(NSTimer *)timer</span><br><span class="line">&#123;</span><br><span class="line">    if (self.target) &#123;</span><br><span class="line">        if ([self.target respondsToSelector:self.selector]) &#123;</span><br><span class="line">            [self.target performSelector:self.selector withObject:timer.userInfo];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        [self.timer invalidate];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation NSTimer (WeakTimer)</span><br><span class="line"></span><br><span class="line">+ (NSTimer *)scheduledWeakTimerWithTimeInterval:(NSTimeInterval)interval</span><br><span class="line">                                         target:(id)aTarget</span><br><span class="line">                                       selector:(SEL)aSelector</span><br><span class="line">                                       userInfo:(id)userInfo</span><br><span class="line">                                        repeats:(BOOL)repeats</span><br><span class="line">&#123;</span><br><span class="line">    TimerWeakObject *object &#x3D; [[TimerWeakObject alloc] init];</span><br><span class="line">    object.target &#x3D; aTarget;</span><br><span class="line">    object.selector &#x3D; aSelector;</span><br><span class="line">    object.timer &#x3D; [NSTimer scheduledTimerWithTimeInterval:interval target:object selector:@selector(fire:) userInfo:userInfo repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    return object.timer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="block"><a href="#block" class="headerlink" title="block"></a>block</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>将函数及其执行上下文封装起来的对象<br>int(^block)(int) = ^int(int num){};<br>block调用就是函数的调用</p>
</blockquote>
<h3 id="截获变量"><a href="#截获变量" class="headerlink" title="截获变量"></a>截获变量</h3></li>
<li>基本类型局部变量 (截获其值)</li>
<li>对象类型局部变量 (连同所有权修饰符一起截获)</li>
<li>静态局部 (指针形式对其截获)</li>
<li>全局 (不进行截获)</li>
<li>静态全局(不进行截获)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 全局变量</span><br><span class="line">int global_var &#x3D; 4;</span><br><span class="line">&#x2F;&#x2F; 静态全局变量</span><br><span class="line">static int static_global_var &#x3D; 5;</span><br><span class="line"></span><br><span class="line">- (void)method</span><br><span class="line">&#123;</span><br><span class="line">    static int multiplier &#x3D; 6;</span><br><span class="line">    &#x2F;&#x2F; int multiplier &#x3D; 6;</span><br><span class="line">    &#x2F;&#x2F;__block int multiplier &#x3D; 6;</span><br><span class="line">    int(^Block)(int) &#x3D; ^int(int num)</span><br><span class="line">    &#123;</span><br><span class="line">        return num * multiplier;</span><br><span class="line">    &#125;;</span><br><span class="line">    multiplier &#x3D; 4;</span><br><span class="line">    NSLog(@&quot;result is %d&quot;, Block(2)); &#x2F;&#x2F; multiplier 定义是static 是 8 不是是static 就是12 是__block 就是8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="block-1"><a href="#block-1" class="headerlink" title="__block"></a>__block</h3></li>
<li>对被截获变量进行赋值(不是调用)需要添加__block</li>
<li>只有基本类型局部变量和象类型局部变量 才需要添加__block</li>
<li>__block修饰的对象变成是会对象,栈上的__forwarding指针是指向__block变量的<h3 id="block的内存管理"><a href="#block的内存管理" class="headerlink" title="block的内存管理"></a>block的内存管理</h3></li>
<li>有三种block,全局,栈,堆上的block</li>
<li>栈上block进行copy的话就放到堆上,栈上的__forwarding指针是指向堆上的__block变量的,堆上的还是指向自身的__block变量,作用域结束之后,栈上的会销毁,而堆上的还会存在<h3 id="block的循环引用"><a href="#block的循环引用" class="headerlink" title="block的循环引用"></a>block的循环引用</h3></li>
<li>__weak 可以避免是因为对象类型局部变量 (连同所有权修饰符一起截获)</li>
</ul>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h3><ul>
<li>主队列：专门负责调度主线程度的任务，没有办法开辟新的线程</li>
<li>全局队列：本质是一个并发队列，由系统提供，方便编程，可以不用创建就直接使用</li>
<li>同步都是在当前线程执行</li>
<li>同步/异步和串行/并发<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;主队列的同步 &#x3D;&gt;导致主队列的引起的线程等待(死锁) </span><br><span class="line">&#x2F;&#x2F;主队列最后都会在主线程执行,viewDidLoad先到主线程执行,block等待,但是viewDidLoad又调用block,而block在等待viewDidLoad执行完毕,从而导致互相等待.</span><br><span class="line">-(void)viewDidLoad&#123;</span><br><span class="line">    dispatch_sync(dispatch_get_main_queue(),^&#123;</span><br><span class="line">        [self doSonmthing];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;同步串行</span><br><span class="line">&#x2F;&#x2F;因为队列不同,不必相互等待,从而不会导致相互等待</span><br><span class="line">-(void)viewDidLoad&#123;</span><br><span class="line">    dispatch_sync(serialQueue(),^&#123;</span><br><span class="line">        [self doSonmthing];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;同步并发</span><br><span class="line">-(void)viewDidLoad&#123;</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    dispatch_sync(global_queue(),^&#123;</span><br><span class="line">        dispatch_sync(global_queue(),^&#123;</span><br><span class="line">            NSLog(@&quot;1&quot;);</span><br><span class="line">            dispatch_sync(global_queue(),^&#123;</span><br><span class="line">                NSLog(@&quot;3&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            NSLog(@&quot;4&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">    &#x2F;&#x2F;因为是同步的,都会在当前线程执行,而并发队列又不需要等待,所以数次12345</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;异步串行</span><br><span class="line">-(void)viewDidLoad&#123;</span><br><span class="line">    dispatch_async(dispatch_get_main_queue(),^&#123;</span><br><span class="line">        [self doSonmthing];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;异步并发</span><br><span class="line">-(void)viewDidLoad&#123;</span><br><span class="line">    dispatch_async(global_queue(),^&#123;</span><br><span class="line">        [self doSonmthing];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>异步栅栏<blockquote>
<p>在进程管理中起到一个栅栏的作用,它等待所有位于barrier函数之前的操作执行完毕后执行,并且在barrier函数执行之后,barrier函数之后的操作才会得到执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;实现多度单写 dispatch_barrier_async</span><br><span class="line">- (id)objectForKey:(NSString *)key</span><br><span class="line">&#123;</span><br><span class="line">    __block id obj;</span><br><span class="line">    &#x2F;&#x2F; 同步读取指定数据</span><br><span class="line">    dispatch_sync(concurrent_queue, ^&#123;</span><br><span class="line">        obj &#x3D; [userCenterDic objectForKey:key];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setObject:(id)obj forKey:(NSString *)key</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 异步栅栏调用设置数据 会等待之前的完成才执行</span><br><span class="line">    dispatch_barrier_async(concurrent_queue, ^&#123;</span><br><span class="line">        [userCenterDic setObject:obj forKey:key];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_group_t group &#x3D; dispatch_group_create();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; for循环遍历各个元素执行操作</span><br><span class="line">for (NSURL *url in arrayURLs) &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 异步组分派到并发队列当中</span><br><span class="line">    dispatch_group_async(group, concurrent_queue, ^&#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;根据url去下载图片</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;url is %@&quot;, url);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    &#x2F;&#x2F; 当添加到组中的所有任务执行完成之后会调用该Block</span><br><span class="line">    NSLog(@&quot;所有图片已全部下载完成&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="NSOPeration"><a href="#NSOPeration" class="headerlink" title="NSOPeration"></a>NSOPeration</h3></li>
<li>NSOperation是苹果GCD、面向对象的封装 需要结合NSOPerationQueue来配合实现</li>
<li>特点: 添加移除依赖,执行状态的操作(任务准备,执行,完成,取消),最大并发量的控制</li>
<li>状态控制(重写mian方法(系统控制)和start方法(自己控制)) </li>
<li>KVO:operation 的状态是满足KVO的，可以被监听，可以被监听的<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)operationTest &#123;</span><br><span class="line">    NSOperationQueue *operationQueue&#x3D;[[NSOperationQueue alloc]init];</span><br><span class="line">    </span><br><span class="line">    NSBlockOperation * blockOperation1 &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">        NSLog(@&quot;进入操作1&quot;);</span><br><span class="line">        sleep(3);</span><br><span class="line">        NSLog(@&quot;操作1完成&quot;);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    NSBlockOperation * blockOperation2 &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">        NSLog(@&quot;进入依赖操作&quot;);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [blockOperation2 addDependency:blockOperation1];</span><br><span class="line">    </span><br><span class="line">    [operationQueue addOperation:blockOperation1];</span><br><span class="line">    [operationQueue addOperation:blockOperation2];</span><br><span class="line">    </span><br><span class="line">    [blockOperation1 addExecutionBlock:^&#123;</span><br><span class="line">        NSLog(@&quot;进入追加操作&quot;);</span><br><span class="line">        sleep(5);</span><br><span class="line">        NSLog(@&quot;追加操作完成&quot;);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">typedef void(^completeHanderBlock)(NSURLResponse *response, NSData *data, NSError *connectionError);</span><br><span class="line"></span><br><span class="line">@interface ImageDownloadOperation : NSOperation</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *  图片地址</span><br><span class="line"> *&#x2F;</span><br><span class="line">@property (nonatomic, copy) NSString *imageUrl;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy)  completeHanderBlock  completeBlock;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *  下载图片的网路请求类</span><br><span class="line"> *</span><br><span class="line"> *  @param url           下载的网址</span><br><span class="line"> *  @param downloadBlock 回调</span><br><span class="line"> *  @return 实例</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">+ (instancetype)operationWithImageUrl:(NSString *)url</span><br><span class="line">                              completeHander:(completeHanderBlock)downloadBlock;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;ImageDownloadOperation.h&quot;</span><br><span class="line">#import &quot;NSString+FileString.h&quot;</span><br><span class="line"></span><br><span class="line">#define WEAKSELF typeof(self) __weak weakSelf &#x3D; self;</span><br><span class="line">#define STRONGSELF  typeof(self) __strong strongSelf &#x3D; self;</span><br><span class="line">#define STRONGTOWEAK  typeof(self) __strong weakSelfToStrong &#x3D; weakSelf;</span><br><span class="line"></span><br><span class="line">@interface ImageDownloadOperation ()&#123;</span><br><span class="line">    BOOL        executing;</span><br><span class="line">    BOOL        finished;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSString  *md5String;</span><br><span class="line">@property (nonatomic, copy) NSString  *filePathString;</span><br><span class="line"></span><br><span class="line">- (void)completeOperation;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ImageDownloadOperation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (instancetype)operationWithImageUrl:(NSString *)url</span><br><span class="line">                       completeHander:(completeHanderBlock)downloadBlock&#123;</span><br><span class="line">    ImageDownloadOperation *operation &#x3D; [[ImageDownloadOperation alloc] init];</span><br><span class="line">    operation.imageUrl    &#x3D; url;</span><br><span class="line">    operation.completeBlock &#x3D; downloadBlock;</span><br><span class="line">    return operation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id)init &#123;</span><br><span class="line">    self &#x3D; [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        executing &#x3D; NO;</span><br><span class="line">        finished &#x3D; NO;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)isConcurrent &#123;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)isExecuting &#123;</span><br><span class="line">    return executing;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)isFinished &#123;</span><br><span class="line">    return finished;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)main &#123;</span><br><span class="line">    if (_imageUrl.length &lt;&#x3D; 0) &#123;</span><br><span class="line">        </span><br><span class="line">        [self completeOperation];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 生成文件路径</span><br><span class="line">    self.md5String      &#x3D; [NSString MD5HashWithString:_imageUrl];</span><br><span class="line">    self.filePathString &#x3D; [NSString pathWithFileName:self.md5String];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 文件如果存在则直接读取</span><br><span class="line">    BOOL exist &#x3D; [[NSFileManager defaultManager] fileExistsAtPath:self.filePathString isDirectory:nil];</span><br><span class="line">    if (exist) &#123;</span><br><span class="line">        NSData *data &#x3D;   [NSData dataWithContentsOfFile:self.filePathString];</span><br><span class="line">        self.completeBlock(nil,data,nil);</span><br><span class="line">        [self completeOperation];</span><br><span class="line">        </span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSURL *url &#x3D; [NSURL URLWithString:self.imageUrl];</span><br><span class="line">    </span><br><span class="line">    NSURLRequest *request &#x3D; [NSURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:30];</span><br><span class="line">    </span><br><span class="line">    NSURLSession *sharedSession &#x3D; [NSURLSession sharedSession];</span><br><span class="line">    WEAKSELF</span><br><span class="line">    NSURLSessionDataTask *dataTask &#x3D; [sharedSession dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class="line">        STRONGTOWEAK</span><br><span class="line">        NSLog(@&quot;%@&quot;,[NSThread currentThread]);</span><br><span class="line">        if (data &amp;&amp; (error &#x3D;&#x3D; nil)) &#123;</span><br><span class="line">            NSLog(@&quot;data&#x3D;%@&quot;,[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);</span><br><span class="line">             [weakSelfToStrong writeData:data toPath:weakSelfToStrong.filePathString];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            NSLog(@&quot;error&#x3D;%@&quot;,error);</span><br><span class="line">        &#125;</span><br><span class="line">        weakSelfToStrong.completeBlock(response,data,error);</span><br><span class="line">        [weakSelfToStrong completeOperation];</span><br><span class="line">    &#125;];</span><br><span class="line">    [dataTask resume];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 让线程不结束</span><br><span class="line">    do &#123;</span><br><span class="line">        </span><br><span class="line">        @autoreleasepool &#123;</span><br><span class="line">            </span><br><span class="line">            [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:0.1]];</span><br><span class="line">            </span><br><span class="line">            if (self.isCancelled) &#123;</span><br><span class="line">                </span><br><span class="line">                [self completeOperation];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; while (self.isExecuting &amp;&amp; self.isFinished &#x3D;&#x3D; NO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)completeOperation &#123;</span><br><span class="line">    [self willChangeValueForKey:@&quot;isFinished&quot;];</span><br><span class="line">    [self willChangeValueForKey:@&quot;isExecuting&quot;];</span><br><span class="line">    </span><br><span class="line">    executing &#x3D; NO;</span><br><span class="line">    finished &#x3D; YES;</span><br><span class="line">    </span><br><span class="line">    [self didChangeValueForKey:@&quot;isExecuting&quot;];</span><br><span class="line">    [self didChangeValueForKey:@&quot;isFinished&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)start &#123;</span><br><span class="line">    &#x2F;&#x2F; Always check for cancellation before launching the task.</span><br><span class="line">    if ([self isCancelled])&#123;</span><br><span class="line">        &#x2F;&#x2F; Must move the operation to the finished state if it is canceled.</span><br><span class="line">        [self willChangeValueForKey:@&quot;isFinished&quot;];</span><br><span class="line">        finished &#x3D; YES;</span><br><span class="line">        [self didChangeValueForKey:@&quot;isFinished&quot;];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; If the operation is not canceled, begin executing the task.</span><br><span class="line">    [self willChangeValueForKey:@&quot;isExecuting&quot;];</span><br><span class="line">    [NSThread detachNewThreadSelector:@selector(main) toTarget:self withObject:nil];</span><br><span class="line">    executing &#x3D; YES;</span><br><span class="line">    [self didChangeValueForKey:@&quot;isExecuting&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)writeData:(NSData *)data toPath:(NSString *)path &#123;</span><br><span class="line">    &#x2F;&#x2F;文件操作，需要注意两点：1: 不能同时读写。2:需要判断路径是否是唯一</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        [data writeToFile:path atomically:YES];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark -图片下载方法</span><br><span class="line">- (void)downloadImage&#123;</span><br><span class="line">    NSString *imageUrlStrin1 &#x3D; @&quot;http:&#x2F;&#x2F;ww2.sinaimg.cn&#x2F;mw690&#x2F;643be833gw1fba9vmlh08j21o42hc4qq.jpg&quot;;</span><br><span class="line">    NSString *imageUrlString2 &#x3D; @&quot;http:&#x2F;&#x2F;wx4.sinaimg.cn&#x2F;mw690&#x2F;68147f68ly1fbnkw2voj1j207w04y3ye.jpg&quot;;</span><br><span class="line"></span><br><span class="line">    NSOperationQueue *queue     &#x3D; [[NSOperationQueue alloc] init];</span><br><span class="line">    ImageDownloadOperation *imageDownOperation1 &#x3D; [ImageDownloadOperation operationWithImageUrl:imageUrlStrin1 completeHander:^(NSURLResponse *response, NSData *data, NSError *connectionError) &#123;</span><br><span class="line">        if (data.length&lt;&#x3D;0) &#123;</span><br><span class="line">            return ;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            self.imageView1.image &#x3D; [UIImage imageWithData:data];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    ImageDownloadOperation *imageDownOperation2 &#x3D; [ImageDownloadOperation operationWithImageUrl:imageUrlString2 completeHander:^(NSURLResponse *response, NSData *data, NSError *connectionError) &#123;</span><br><span class="line">        if (data.length&lt;&#x3D;0) &#123;</span><br><span class="line">            return ;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            self.imageView2.image &#x3D; [UIImage imageWithData:data];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    [queue addOperation:imageDownOperation1];</span><br><span class="line">    [queue addOperation:imageDownOperation2];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="NSThread"><a href="#NSThread" class="headerlink" title="NSThread"></a>NSThread</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;常驻线程</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    _queue &#x3D; dispatch_queue_create(&quot;com.rongcloud.sunchengxiu&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    _dic &#x3D; [NSMutableDictionary dictionary];</span><br><span class="line">&#x2F;&#x2F;    [self testGroup1];</span><br><span class="line">    [self testThread];</span><br><span class="line">&#125;</span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event</span><br><span class="line">&#123;</span><br><span class="line">    [self performSelector:@selector(print) onThread:_thread withObject:nil waitUntilDone:NO];</span><br><span class="line">&#125;</span><br><span class="line">- (void)testThread&#123;</span><br><span class="line">    _thread&#x3D;[[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</span><br><span class="line">    [_thread start];</span><br><span class="line">&#125;</span><br><span class="line">- (void)run&#123;</span><br><span class="line">    [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];</span><br><span class="line">    [[NSRunLoop currentRunLoop]run];</span><br><span class="line">&#125;</span><br><span class="line">- (void)print&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;,[NSThread currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="多线程与锁"><a href="#多线程与锁" class="headerlink" title="多线程与锁"></a>多线程与锁</h3><ul>
<li>@Syschronized 创建单例(保证多线程创建对象的唯一的)</li>
<li>atomic 属性关键字 原子操作(不负责操作)</li>
<li>OSSpinLock 自旋锁 忙等锁(循环等待,不释放的钱等待) 用于轻量级的数据方法 (比如简单的 +1/-1 操作)</li>
<li>NSRecursiveLock 递归锁 NSLock 线程加锁<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)a&#123;</span><br><span class="line">&#x2F;&#x2F; NSLock &#x3D; lock</span><br><span class="line">    [lock lock];</span><br><span class="line">    [self b];</span><br><span class="line">    [lock unlock];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)b&#123;</span><br><span class="line">    [lock lock];</span><br><span class="line">    &#x2F;&#x2F;option</span><br><span class="line">    [lock unlock];</span><br><span class="line">&#125;</span><br><span class="line">&#x3D;&gt; 导致死锁,换成NSRecursiveLock就没问题,递归方法就用递归锁</span><br></pre></td></tr></table></figure></li>
<li>diapatch_semaphore_t<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crate</span><br><span class="line">wait</span><br><span class="line">signal</span><br><span class="line"></span><br><span class="line">dispatch_semaphore_t sem &#x3D; dispatch_semaphore_create(0);</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;任务1:%@&quot;,[NSThread currentThread]);</span><br><span class="line">        dispatch_semaphore_signal(sem);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        NSLog(@&quot;任务2:%@&quot;,[NSThread currentThread]);</span><br><span class="line">        dispatch_semaphore_signal(sem);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        NSLog(@&quot;任务3:%@&quot;,[NSThread currentThread]);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Runloop"><a href="#Runloop" class="headerlink" title="Runloop"></a>Runloop</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>通过内部维护的事件循环对事件/消息进行管理的一个对象,没有消息需要处理时,有消息就处理(内核态-&gt;用户态),没消息就休眠(用户态-&gt;内核态).</p>
</blockquote>
<h3 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h3></li>
<li>NSRunLoop(对CFRunLoop的封装)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CFRunLoop (1对多model,model一对多个source,timer,observer)</span><br><span class="line">    pthread   线程</span><br><span class="line">    currentModel CFRunLoopModel</span><br><span class="line">    models  List&lt;CFRunLoopModel&gt;</span><br><span class="line">    commonModes List&lt;NSString *&gt;</span><br><span class="line">    commonItemModes) 集合包括多个Source&#x2F;timer&#x2F;observer</span><br><span class="line"></span><br><span class="line">CFRunLoopModel</span><br><span class="line">    name &#x3D;&gt; NSDefalutRunLoopMode(通过这些string来找到某个model)</span><br><span class="line">    Sources0 </span><br><span class="line">    Sources1</span><br><span class="line">    observers</span><br><span class="line">    timers</span><br><span class="line"></span><br><span class="line">CFRunLoopSource</span><br><span class="line">    source0 手动唤醒线程</span><br><span class="line">    source1 具备唤醒线程的内里</span><br><span class="line"></span><br><span class="line">CFRunLoopTimer</span><br><span class="line"></span><br><span class="line">CFRunLoopObserver &#x2F;&#x2F;检测runloop的时间点,将要进入runloop,对timer将要进行处理,对source将要进行处理,将要进入休眠runloop,已经进入休眠runloop,退出runloop</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>Runloop的Mode<blockquote>
<p>runlopp一次只能执行一个model,NSRunLoopCommonModels 的CommonMode不是实际存在的一个model,是同步Source/timer/observer到多个Model中的一种解决方案</p>
</blockquote>
</li>
</ul>
<h3 id="事件循环机制"><a href="#事件循环机制" class="headerlink" title="事件循环机制"></a>事件循环机制</h3><blockquote>
<p>将要进入runloop(发送observer)-&gt;将要处理timer和source0事件-&gt;处理source0-&gt;处理source1-&gt;将要休眠(发送observer)-&gt;休眠等待(source1,timer事件,外部手动唤醒)-&gt;唤醒(发送observer)</p>
</blockquote>
<h3 id="Runloop与NSTimer"><a href="#Runloop与NSTimer" class="headerlink" title="Runloop与NSTimer"></a>Runloop与NSTimer</h3><blockquote>
<p>一个比较常见的问题：滑动tableView时，定时器还会生效吗？<br>默认情况下RunLoop运行在kCFRunLoopDefaultMode下，而当滑动tableView时，RunLoop切换到UITrackingRunLoopMode，而Timer是在kCFRunLoopDefaultMode下的，就无法接受处理Timer的事件。<br>怎么去解决这个问题呢？把Timer添加到UITrackingRunLoopMode上并不能解决问题，因为这样在默认情况下就无法接受定时器事件了。<br>所以我们需要把Timer同时添加到UITrackingRunLoopMode和kCFRunLoopDefaultMode上。<br>那么如何把timer同时添加到多个mode上呢？就要用到NSRunLoopCommonModes了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Timer就被添加到多个mode上，这样即使RunLoop由kCFRunLoopDefaultMode切换到UITrackingRunLoopMode下，也不会影响接收Timer事件</p>
</blockquote>
<h3 id="Runloop与多线程"><a href="#Runloop与多线程" class="headerlink" title="Runloop与多线程"></a>Runloop与多线程</h3><ul>
<li>一一对应</li>
<li>默认没有开启线程<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    _queue &#x3D; dispatch_queue_create(&quot;com.rongcloud.sunchengxiu&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    _dic &#x3D; [NSMutableDictionary dictionary];</span><br><span class="line">&#x2F;&#x2F;    [self testGroup1];</span><br><span class="line">    [self testThread];</span><br><span class="line">&#125;</span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event</span><br><span class="line">&#123;</span><br><span class="line">    [self performSelector:@selector(print) onThread:_thread withObject:nil waitUntilDone:NO];</span><br><span class="line">&#125;</span><br><span class="line">- (void)testThread&#123;</span><br><span class="line">    _thread&#x3D;[[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</span><br><span class="line">    [_thread start];</span><br><span class="line">&#125;</span><br><span class="line">- (void)run&#123;</span><br><span class="line">    [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];</span><br><span class="line">    [[NSRunLoop currentRunLoop]run];</span><br><span class="line">&#125;</span><br><span class="line">- (void)print&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;,[NSThread currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="网络请求相关知识点"><a href="#网络请求相关知识点" class="headerlink" title="网络请求相关知识点"></a>网络请求相关知识点</h2><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><blockquote>
<p>超文本传输协议</p>
</blockquote>
<ul>
<li>请求报文<ul>
<li>请求行 方法 URL 协议版本 </li>
<li>请求首部字段(服务端据此获取客户端的信息,Cookie,Accept,Cache-Control,Aceept-Language,User-Agent,Content-type,Conent-Length,Connection)</li>
<li>请求体</li>
</ul>
</li>
<li>响应报文<ul>
<li>响应行 协议版本 状态吗 短语 </li>
<li>响应首部部字段(Cache-Control ,)</li>
<li>响应体</li>
</ul>
</li>
<li>请求方式<ul>
<li>get (获取资源,安全(不引起服务端的任何状态改变),幂等(多次与一次执行的效果时完全相同的),可缓存的)</li>
<li>post (处理资源,非安全,非幂等,不可缓存的)</li>
<li>head (安全,可缓存)</li>
<li>put</li>
<li>delete</li>
<li>option (安全)</li>
</ul>
</li>
<li>状态码<ul>
<li>1XX</li>
<li>2XX</li>
<li>3XX 网络重定向</li>
<li>4XX 客户端有问题</li>
<li>5XX 服务器端有问题</li>
</ul>
</li>
<li>流程<ul>
<li>三次握手建立连接</li>
<li>http请求报文</li>
<li>http响应报文</li>
<li>四次挥手断开连接</li>
</ul>
</li>
<li>特点<ul>
<li>短连接</li>
<li>无状态(Cookie/session)</li>
</ul>
</li>
</ul>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><blockquote>
<p>HTTPS = HTTP+SSL/TLS</p>
</blockquote>
<ul>
<li>流程<ul>
<li>客户端给服务端发TLS版本,支持的加密算法,randomC</li>
<li>服务端给客户端发商定的加密算法,randomS,server证书</li>
<li>客户端验证server证书</li>
<li>客户端组装会话密钥(randomC + randomS + 预主密钥)</li>
<li>客户端通过server的公钥对预主密钥进行加密传输</li>
<li>server通过私钥解密得到预主密钥</li>
<li>组转绘画密钥</li>
<li>客户端发送加密握手</li>
<li>服务端方式加密握手</li>
<li>确认安全通道完成</li>
</ul>
</li>
</ul>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul>
<li><p>UDP特点:无连接(不安全,没有三次四次握手) 面向报文,发了就不管了</p>
<h3 id="Session-Cookie"><a href="#Session-Cookie" class="headerlink" title="Session/Cookie"></a>Session/Cookie</h3></li>
<li><p>Session</p>
<ul>
<li>服务端区分用户</li>
</ul>
</li>
<li><p>Cookie</p>
<ul>
<li>对HTTP协议的无状态特点补偿</li>
<li>Cookie,记录状态,保存在客户端</li>
<li>Cookie存在于在首部字段</li>
<li>保证Cookie可以加密,或者使用https</li>
</ul>
</li>
</ul>
<h2 id="第三库"><a href="#第三库" class="headerlink" title="第三库"></a>第三库</h2><h3 id="AFNetworking"><a href="#AFNetworking" class="headerlink" title="AFNetworking"></a>AFNetworking</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">会话 网络监听模块 网络安全模块</span><br><span class="line">请求系列化 响应系列化</span><br><span class="line">UIKit集成模块</span><br><span class="line"></span><br><span class="line">NSURLSession AFSecurityPolicy AFNetReachalbilityManager</span><br><span class="line">AFURLSessionMannager:AFHTTPSessionMannager</span><br><span class="line">AFURLRequestSerialzation AFURLResponseSerialzation</span><br></pre></td></tr></table></figure>
<ul>
<li>AFURLSessionMannager<ul>
<li>创建管理NSURLSession,NSURLSessionTask(一个网络请求)</li>
<li>实现NSURLSessionDelegate的代理方法(代理用key来保存,taskIdentifier)</li>
<li>引入AFSecurityPolicy保证请求安全</li>
<li>引入AFNetReachalbilityManager监控网络状态</li>
</ul>
</li>
</ul>
<h3 id="AsyncDisplayKit"><a href="#AsyncDisplayKit" class="headerlink" title="AsyncDisplayKit"></a>AsyncDisplayKit</h3><ul>
<li>减少主线程的压力,能把一些能放到子线程的东西都放到子线程<ul>
<li>Layout(文本宽高技术,视图布局计算)</li>
<li>Rndering(文本渲染,图片编码,图像绘制)</li>
<li>对象创建,调整,销毁</li>
</ul>
</li>
<li>基本原理<ul>
<li>ASNode-&gt; UIVIew -&gt; CALayer</li>
<li>ASNode是在后台线程,是线程安全的</li>
<li>ASDK也在Tunloop中注册一个observer</li>
<li>当Runloop进行休眠前,ASDK执行该loop内提交的所有任务</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>flutter基础知识</title>
    <url>/2020/05/15/flutter%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>flutter基础知识</p>
<h1 id="flutter-基本知识点"><a href="#flutter-基本知识点" class="headerlink" title="flutter 基本知识点"></a>flutter 基本知识点</h1><h2 id="界面结构"><a href="#界面结构" class="headerlink" title="界面结构"></a>界面结构</h2><ul>
<li>1.leading</li>
<li>2.actions 右边组件集合</li>
<li>3.bottom nav底部的组件集合</li>
<li>4.DefalutTabController</li>
<li>5.tabs Tabbar的组件集合<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line">void main() &#x3D;&gt; runApp(MyApp());</span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  &#x2F;&#x2F; This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &#39;Flutter Demo&#39;,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: MyHomePage(title: &#39;Flutter Demo Home Page&#39;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyHomePage extends StatefulWidget &#123;</span><br><span class="line">  MyHomePage(&#123;Key key, this.title&#125;) : super(key: key);</span><br><span class="line">  final String title;</span><br><span class="line">  @override</span><br><span class="line">  _MyHomePageState createState() &#x3D;&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;</span><br><span class="line">  int _currentIndex &#x3D; 1;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return DefaultTabController(</span><br><span class="line">      length: 3, </span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar:AppBar(</span><br><span class="line">          bottom: TabBar(</span><br><span class="line">            &#x2F;&#x2F; 未选择的颜色</span><br><span class="line">            unselectedLabelColor: Colors.black54,</span><br><span class="line">            &#x2F;&#x2F;指示器的颜色</span><br><span class="line">            indicatorColor: Colors.red,</span><br><span class="line">            &#x2F;&#x2F;指示器的size</span><br><span class="line">            indicatorSize: TabBarIndicatorSize.label,</span><br><span class="line">            tabs: &lt;Widget&gt;[</span><br><span class="line">              Tab(icon:Icon(Icons.access_time)),</span><br><span class="line">              Tab(icon:Icon(Icons.backup)),</span><br><span class="line">              Tab(icon:Icon(Icons.dashboard)),</span><br><span class="line">          ]),</span><br><span class="line">        ),</span><br><span class="line">        body:TabBarView(children: &lt;Widget&gt;[</span><br><span class="line">          Icon(Icons.access_time),</span><br><span class="line">          Icon(Icons.backup),</span><br><span class="line">          Icon(Icons.dashboard),</span><br><span class="line">        ]),</span><br><span class="line">        drawer: Drawer(</span><br><span class="line">          child: ListView(</span><br><span class="line">            children:&lt;Widget&gt;[</span><br><span class="line">              DrawerHeader(child: Text(&#39;hank&#39;)),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(&quot;hank1&quot;),</span><br><span class="line">                onTap: ()&#x3D;&gt;&#123;</span><br><span class="line">                  Navigator.pop(context),</span><br><span class="line">                &#125;,</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ) ,</span><br><span class="line">        ),</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          type:  BottomNavigationBarType.fixed,</span><br><span class="line">          &#x2F;&#x2F; 选中的颜色 不写默认主题色</span><br><span class="line">          fixedColor: Colors.red,</span><br><span class="line">          currentIndex: _currentIndex,</span><br><span class="line">          onTap: (int index)&#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              _currentIndex &#x3D;  index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          items: [</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(Icons.dashboard),</span><br><span class="line">              title: Text(&quot;hank&quot;)</span><br><span class="line">            ),</span><br><span class="line">             BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(Icons.cached),</span><br><span class="line">              title: Text(&quot;hank2&quot;)</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="基础部件"><a href="#基础部件" class="headerlink" title="基础部件"></a>基础部件</h2><ul>
<li>1.RichText</li>
<li>2.BoxDecoration<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class BasicDemo  extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return RichText(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text:&#39;hank&#39;,</span><br><span class="line">        style:TextStyle(</span><br><span class="line">          color: Colors.deepOrange,</span><br><span class="line">          fontSize: 34,</span><br><span class="line">          fontStyle: FontStyle.italic,</span><br><span class="line">          fontWeight:FontWeight.w100</span><br><span class="line">        ),</span><br><span class="line">        children: [</span><br><span class="line">          TextSpan(</span><br><span class="line">            text: &quot;nk&quot;,</span><br><span class="line">            style:TextStyle(</span><br><span class="line">              color: Colors.red,</span><br><span class="line">              fontSize: 25,</span><br><span class="line">              fontStyle: FontStyle.italic,</span><br><span class="line">              fontWeight:FontWeight.w100</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BasicDemo  extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      &#x2F;&#x2F;用于设置 颜色 边距 圆角 阴影 渐变色 背景图片 滤镜等</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        image:DecorationImage(</span><br><span class="line">          image: NetworkImage(&#39;https:&#x2F;&#x2F;img2020.cnblogs.com&#x2F;blog&#x2F;48022&#x2F;202004&#x2F;48022-20200401085807919-945339226.png&#39;),</span><br><span class="line">          alignment: Alignment.topCenter,</span><br><span class="line">          &#x2F;&#x2F; repeat: ImageRepeat.repeat</span><br><span class="line">          &#x2F;&#x2F;填充</span><br><span class="line">          fit:BoxFit.fill,</span><br><span class="line">          &#x2F;&#x2F;滤镜</span><br><span class="line">          colorFilter: ColorFilter.mode(</span><br><span class="line">            Colors.indigoAccent[400].withOpacity(0.5),</span><br><span class="line">            BlendMode.hardLight</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">      child: Row(</span><br><span class="line">        mainAxisAlignment:MainAxisAlignment.center,</span><br><span class="line">        children:&lt;Widget&gt;[</span><br><span class="line">          Container(</span><br><span class="line">            child: Icon(Icons.pool,size: 35,color: Colors.red,),</span><br><span class="line">            padding: EdgeInsets.all(10),</span><br><span class="line">            margin: EdgeInsets.all(20),</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              color:Colors.blueAccent,</span><br><span class="line">              &#x2F;&#x2F;border</span><br><span class="line">              border: Border.all(</span><br><span class="line">                color:Colors.green,</span><br><span class="line">                width: 3,</span><br><span class="line">              ),</span><br><span class="line">              &#x2F;&#x2F;圆角</span><br><span class="line">              &#x2F;&#x2F; borderRadius:BorderRadius.circular(15),</span><br><span class="line">              boxShadow: [</span><br><span class="line">                BoxShadow(</span><br><span class="line">                  offset: Offset(5,6),</span><br><span class="line">                  color: Colors.yellow,</span><br><span class="line">                  &#x2F;&#x2F;模糊程度</span><br><span class="line">                  blurRadius: 1,</span><br><span class="line">                  &#x2F;&#x2F;阔散阴影面积</span><br><span class="line">                  spreadRadius: -2</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">              &#x2F;&#x2F;BoxShape.circle 不能与borderRadius 一起用</span><br><span class="line">              shape: BoxShape.circle,</span><br><span class="line">              &#x2F;&#x2F;RadialGradient 普通渐变   LinearGradient 线性渐变</span><br><span class="line">              gradient: LinearGradient(</span><br><span class="line">                colors: [</span><br><span class="line">                  Colors.blue,</span><br><span class="line">                  Colors.red</span><br><span class="line">                ],</span><br><span class="line">                begin:Alignment.topCenter,</span><br><span class="line">                end:Alignment.bottomCenter</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul>
<li>1.Colunm</li>
<li>2.Row</li>
<li>3.SizedBox</li>
<li>4.Stack</li>
<li>5.AspectRatio<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class LayoutDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;ConstrainedBox 带限制的盒子</span><br><span class="line">    return Container(</span><br><span class="line">      child:Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          ConstrainedBox(</span><br><span class="line">            &#x2F;&#x2F;设置子部件的最大最小w h</span><br><span class="line">            constraints: BoxConstraints(</span><br><span class="line">              minHeight: 100,</span><br><span class="line">              maxWidth: 100</span><br><span class="line">            ),</span><br><span class="line">            child: Container(</span><br><span class="line">              color:Colors.red,</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">      ],)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;AspectRatio</span><br><span class="line">    return Container(</span><br><span class="line">      child:Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          AspectRatio(</span><br><span class="line">            &#x2F;&#x2F;比例 1&#x2F;1 正方形  16:9 ...</span><br><span class="line">            aspectRatio: 16&#x2F;9,</span><br><span class="line">            child: Container(</span><br><span class="line">              color:Colors.red,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">      ],)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Stack</span><br><span class="line">     return Column(</span><br><span class="line">      &#x2F;&#x2F;主轴的对齐方式 spaceAround 剩下的空间分配在周围 spaceBetween 分配在之间 spaceEvenly 平均分配</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      &#x2F;&#x2F;交叉轴 stretch 拉伸 start 开始 end 结束</span><br><span class="line">      &#x2F;&#x2F; crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        &#x2F;&#x2F;从开始位置叠加在一起,以最大的最大的子部件作为背景,其他的叠加上去,常配合position使用</span><br><span class="line">        Stack(</span><br><span class="line">          &#x2F;&#x2F;子部件的对齐方式</span><br><span class="line">          alignment: Alignment.topLeft,</span><br><span class="line">          children:&lt;Widget&gt;[</span><br><span class="line">            SizedBox(</span><br><span class="line">              &#x2F;&#x2F;不加w h 就是 child 的size 所以SizedBox可以作为间隔使用</span><br><span class="line">              width: 200,</span><br><span class="line">              height: 200,</span><br><span class="line">              child: Container(</span><br><span class="line">                &#x2F;&#x2F;设置子部件的对齐方式 Alignment(0, 0) 锚点的中间位置</span><br><span class="line">                &#x2F;&#x2F; alignment: Alignment(0, -1),</span><br><span class="line">                decoration: BoxDecoration(</span><br><span class="line">                  color: Colors.blue,</span><br><span class="line">                  borderRadius:BorderRadius.circular(10)</span><br><span class="line">                ),</span><br><span class="line">                child: Icon(Icons.pool,color:Colors.white,size: 32,),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          SizedBox(</span><br><span class="line">              &#x2F;&#x2F;不加w h 就是 child 的size 所以SizedBox可以作为间隔使用</span><br><span class="line">              width: 150,</span><br><span class="line">              height: 150,</span><br><span class="line">              child: Container(</span><br><span class="line">                decoration: BoxDecoration(</span><br><span class="line">                  color: Colors.black,</span><br><span class="line">                  borderRadius:BorderRadius.circular(10)</span><br><span class="line">                ),</span><br><span class="line">                child: Icon(Icons.pool,color:Colors.white,size: 32,),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            SizedBox(</span><br><span class="line">              &#x2F;&#x2F;不加w h 就是 child 的size 所以SizedBox可以作为间隔使用</span><br><span class="line">              width: 50,</span><br><span class="line">              height: 50,</span><br><span class="line">              child: Container(</span><br><span class="line">                decoration: BoxDecoration(</span><br><span class="line">                  color: Colors.red,</span><br><span class="line">                  borderRadius:BorderRadius.circular(10)</span><br><span class="line">                ),</span><br><span class="line">                child: Icon(Icons.pool,color:Colors.white,size: 32,),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Positioned(</span><br><span class="line">              right: 20.0,</span><br><span class="line">              top: 20.0,</span><br><span class="line">              child: Icon(Icons.pool,color:Colors.white,size: 32,),</span><br><span class="line">              )</span><br><span class="line">          ]</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Colum</span><br><span class="line">    return Column(</span><br><span class="line">      &#x2F;&#x2F;主轴的对齐方式 spaceAround 剩下的空间分配在周围 spaceBetween 分配在之间 spaceEvenly 平均分配</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      &#x2F;&#x2F;交叉轴 stretch 拉伸 start 开始 end 结束</span><br><span class="line">      &#x2F;&#x2F; crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        &#x2F;&#x2F; IconBadge(Icons.pool),</span><br><span class="line">        &#x2F;&#x2F; IconBadge(Icons.pool),</span><br><span class="line">        &#x2F;&#x2F; IconBadge(Icons.pool)</span><br><span class="line">        SizedBox(</span><br><span class="line">          &#x2F;&#x2F;不加w h 就是 child 的size 所以SizedBox可以作为间隔使用</span><br><span class="line">          width: 200,</span><br><span class="line">          height: 200,</span><br><span class="line">          child: Container(</span><br><span class="line">            &#x2F;&#x2F;设置子部件的对齐方式 Alignment(0, 0) 锚点的中间位置</span><br><span class="line">            alignment: Alignment(0, -1),</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              color: Colors.blue,</span><br><span class="line">              borderRadius:BorderRadius.circular(10)</span><br><span class="line">            ),</span><br><span class="line">            child: Icon(Icons.pool,color:Colors.white,size: 32,),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        SizedBox(</span><br><span class="line">          height: 10,</span><br><span class="line">        ),</span><br><span class="line">         SizedBox(</span><br><span class="line">          &#x2F;&#x2F;不加w h 就是 child 的size 所以SizedBox可以作为间隔使用</span><br><span class="line">          width: 50,</span><br><span class="line">          height: 50,</span><br><span class="line">          child: Container(</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              color: Colors.blue,</span><br><span class="line">              borderRadius:BorderRadius.circular(10)</span><br><span class="line">            ),</span><br><span class="line">            child: Icon(Icons.pool,color:Colors.white,size: 32,),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Row</span><br><span class="line">    return Row(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        IconBadge(Icons.pool),</span><br><span class="line">        IconBadge(Icons.pool),</span><br><span class="line">        IconBadge(Icons.pool)</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class IconBadge extends StatelessWidget &#123;</span><br><span class="line">  </span><br><span class="line">  final IconData icon;</span><br><span class="line">  final double size;</span><br><span class="line"></span><br><span class="line">  IconBadge(this.icon,&#123;</span><br><span class="line">    this.size &#x3D;  32.0</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">    </span><br><span class="line">      child: Icon(icon,size:size,color:Colors.white),</span><br><span class="line">      width: size + 60,</span><br><span class="line">      height: size + 60,</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul>
<li>1.PageView</li>
<li>2.GriView<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class ViewDemo extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    &#x2F;&#x2F;GridViewBuild 总个数不确定</span><br><span class="line">    return GridViewBuildDemo();</span><br><span class="line">    &#x2F;&#x2F;GridViewExtent 交叉轴个数不确定 用w计算</span><br><span class="line">    return GridViewExtentDemo();</span><br><span class="line">    &#x2F;&#x2F;GridViewCount 交叉轴个数确定 w会变</span><br><span class="line">    return GridViewCountDemo();</span><br><span class="line">    &#x2F;&#x2F;PageView</span><br><span class="line">    return PageViewDemo();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GridViewBuildDemo extends StatelessWidget &#123;</span><br><span class="line">    Widget _grieItemBuild(BuildContext c,int index)&#123;</span><br><span class="line">    return Container(</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        color:Colors.red,</span><br><span class="line">        child: Text(&quot;hank$index&quot;),</span><br><span class="line">    );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    &#x2F;&#x2F;GridVieBuild 个数不确定</span><br><span class="line">    return GridView.builder(</span><br><span class="line">      itemCount: 100,</span><br><span class="line">      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">        &#x2F;&#x2F;交叉轴个数</span><br><span class="line">        crossAxisCount: 3,</span><br><span class="line">        &#x2F;&#x2F;交叉轴边距</span><br><span class="line">        crossAxisSpacing: 15,</span><br><span class="line">        &#x2F;&#x2F;主轴边距</span><br><span class="line">        mainAxisSpacing: 15,</span><br><span class="line">      ), </span><br><span class="line">      itemBuilder: _grieItemBuild,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GridViewExtentDemo extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">   List&lt;Widget&gt; _bulidTiles(int length)&#123;</span><br><span class="line">    return List.generate(length, (int index)&#123;</span><br><span class="line">      return Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          color:Colors.red,</span><br><span class="line">          child: Text(&quot;hank&quot;),</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return GridView.extent(</span><br><span class="line">      &#x2F;&#x2F;交叉轴子组件以50填充</span><br><span class="line">      maxCrossAxisExtent: 150,</span><br><span class="line">      &#x2F;&#x2F;交叉轴边距</span><br><span class="line">      crossAxisSpacing: 15,</span><br><span class="line">      &#x2F;&#x2F;主轴边距</span><br><span class="line">      mainAxisSpacing: 15,</span><br><span class="line">      &#x2F;&#x2F; scrollDirection: Axis.horizontal,</span><br><span class="line">      children: _bulidTiles(50),</span><br><span class="line">    ); </span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">class GridViewCountDemo extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">   List&lt;Widget&gt; _bulidTiles(int length)&#123;</span><br><span class="line">    return List.generate(length, (int index)&#123;</span><br><span class="line">      return Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          color:Colors.red,</span><br><span class="line">          child: Text(&quot;hank&quot;),</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return GridView.count(</span><br><span class="line">      &#x2F;&#x2F;交叉轴个数</span><br><span class="line">      crossAxisCount: 3,</span><br><span class="line">      &#x2F;&#x2F;交叉轴边距</span><br><span class="line">      crossAxisSpacing: 15,</span><br><span class="line">      &#x2F;&#x2F;主轴边距</span><br><span class="line">      mainAxisSpacing: 15,</span><br><span class="line">      scrollDirection: Axis.horizontal,</span><br><span class="line">      children: _bulidTiles(50),</span><br><span class="line">    ); </span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">class PageViewDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return PageView(</span><br><span class="line">      &#x2F;&#x2F;不回弹</span><br><span class="line">      &#x2F;&#x2F; pageSnapping: false,</span><br><span class="line">      &#x2F;&#x2F;界面倒叙</span><br><span class="line">      reverse: true,</span><br><span class="line">      &#x2F;&#x2F;滚动的方向</span><br><span class="line">      scrollDirection: Axis.vertical,</span><br><span class="line">      &#x2F;&#x2F;页面滚动事件 返回第几页</span><br><span class="line">      onPageChanged: (cindex) &#x3D;&gt; debugPrint(&#39;$cindex&#39;),</span><br><span class="line">      controller: PageController(</span><br><span class="line">        &#x2F;&#x2F;初始显示的页面</span><br><span class="line">        initialPage: 1,</span><br><span class="line">        &#x2F;&#x2F;不让pageview记住用户滚动道哪个页面</span><br><span class="line">        keepPage: false,</span><br><span class="line">        &#x2F;&#x2F;页面满这个屏幕</span><br><span class="line">        viewportFraction: 1.0</span><br><span class="line">      ),</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          alignment: Alignment(0, 0),</span><br><span class="line">          child: Text(&quot;data&quot;),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          color: Colors.green,</span><br><span class="line">          alignment: Alignment(0, 0),</span><br><span class="line">          child: Text(&quot;data&quot;),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          color: Colors.pink,</span><br><span class="line">          alignment: Alignment(0, 0),</span><br><span class="line">          child: Text(&quot;data&quot;),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Sliver"><a href="#Sliver" class="headerlink" title="Sliver"></a>Sliver</h2></li>
<li>CustomScrollView</li>
<li>SliverGrid</li>
<li>SliverPadding</li>
<li>padding //设置总的padding</li>
<li>SliverSafeArea</li>
<li>SliverList </li>
<li>SliverAppBar</li>
<li>Material<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class SliverDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      body: CustomScrollView(</span><br><span class="line">        slivers:&lt;Widget&gt;[</span><br><span class="line">          SliverAppBar(</span><br><span class="line">            &#x2F;&#x2F; title: Text(&quot;hank&quot;),</span><br><span class="line">            &#x2F;&#x2F; true Appbar固定 不随着scrollview滚动</span><br><span class="line">            &#x2F;&#x2F; pinned: true,</span><br><span class="line">            &#x2F;&#x2F; 状态栏是否需要滚动显示</span><br><span class="line">            &#x2F;&#x2F; floating: true,</span><br><span class="line">            &#x2F;&#x2F;伸展的高度</span><br><span class="line">            expandedHeight: 200,</span><br><span class="line">            &#x2F;&#x2F;可伸展的区域</span><br><span class="line">            flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">              &#x2F;&#x2F;文字</span><br><span class="line">              title:Text(&quot;hank&quot;),</span><br><span class="line">              &#x2F;&#x2F;背景</span><br><span class="line">              background:Image.network(</span><br><span class="line">                &#39;https:&#x2F;&#x2F;img2020.cnblogs.com&#x2F;blog&#x2F;48022&#x2F;202004&#x2F;48022-20200401085807919-945339226.png&#39;,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">           </span><br><span class="line">          ),</span><br><span class="line">          &#x2F;&#x2F;安全区域</span><br><span class="line">          SliverSafeArea(</span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;给SliverGrid添加padding</span><br><span class="line">            sliver: SliverPadding(</span><br><span class="line">              padding: EdgeInsets.all(8),</span><br><span class="line">              sliver: SliverListDemo(),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SliverListDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return SliverList(</span><br><span class="line">      &#x2F;&#x2F;内容委托</span><br><span class="line">      delegate:SliverChildBuilderDelegate(</span><br><span class="line">        (BuildContext c,int index)&#123;</span><br><span class="line">          return Padding(</span><br><span class="line">            padding:EdgeInsets.all(10),</span><br><span class="line">            &#x2F;&#x2F;Material 可以设置各种样式</span><br><span class="line">            child: Material(</span><br><span class="line">              borderRadius: BorderRadius.circular(12),</span><br><span class="line">              elevation: 10,</span><br><span class="line">              shadowColor: Colors.red,</span><br><span class="line">              child: Stack(</span><br><span class="line">                children:&lt;Widget&gt;[</span><br><span class="line">                  AspectRatio(</span><br><span class="line">                    aspectRatio: 16&#x2F;9,</span><br><span class="line">                    child: Image.network(</span><br><span class="line">                      &#39;https:&#x2F;&#x2F;img2020.cnblogs.com&#x2F;blog&#x2F;48022&#x2F;202004&#x2F;48022-20200401085807919-945339226.png&#39;,</span><br><span class="line">                      &#x2F;&#x2F; fit:BoxFit.cover</span><br><span class="line">                    )  </span><br><span class="line">                  )</span><br><span class="line">                ]</span><br><span class="line">              )</span><br><span class="line">            ),  </span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        childCount: 10</span><br><span class="line">      ),</span><br><span class="line">      </span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SliverGridDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return SliverGrid(</span><br><span class="line">        &#x2F;&#x2F;内容委托</span><br><span class="line">        delegate:SliverChildBuilderDelegate(</span><br><span class="line">          (BuildContext c,int index)&#123;</span><br><span class="line">                return Container(</span><br><span class="line">                alignment: Alignment.center,</span><br><span class="line">                color:Colors.red,</span><br><span class="line">                child: Text(&quot;hank$index&quot;),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          childCount: 10</span><br><span class="line">        ),</span><br><span class="line">        &#x2F;&#x2F;布局委托</span><br><span class="line">        gridDelegate:  SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">          &#x2F;&#x2F;交叉轴个数</span><br><span class="line">          crossAxisCount: 3,</span><br><span class="line">          &#x2F;&#x2F;交叉轴边距</span><br><span class="line">          crossAxisSpacing: 15,</span><br><span class="line">          &#x2F;&#x2F;主轴边距</span><br><span class="line">          mainAxisSpacing: 15,</span><br><span class="line">          &#x2F;&#x2F;比例</span><br><span class="line">          childAspectRatio: 0.5</span><br><span class="line">        ), </span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul>
<li>Navigator</li>
<li>MaterialPageRoute</li>
<li>routes<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  &#x2F;&#x2F; This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: false,</span><br><span class="line">      title: &#39;Flutter Demo&#39;,</span><br><span class="line">      &#x2F;&#x2F;路由与routes 对应</span><br><span class="line">      initialRoute:&#39;&#x2F;&#39;,</span><br><span class="line">      routes: &#123;</span><br><span class="line">        &#39;&#x2F;&#39;:(context) &#x3D;&gt; NavgetorDemo(),</span><br><span class="line">        &#x2F;&#x2F; 反斜杠是根路径 代表从home开始 也可以使用initialRoute 设置初始路由</span><br><span class="line">        &#39;&#x2F;hank1&#39;:(context) &#x3D;&gt; Page(t:&quot;hank1&quot;),</span><br><span class="line">      &#125;,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        &#x2F;&#x2F;总的主题颜色</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: NavgetorDemo(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class NavgetorDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child:Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            FlatButton(onPressed: ()&#123;</span><br><span class="line">              Navigator.of(context).push(</span><br><span class="line">                MaterialPageRoute(</span><br><span class="line">                  builder: (BuildContext c) &#x3D;&gt; Page(t: &quot;hank&quot;,)</span><br><span class="line">                )</span><br><span class="line">              );</span><br><span class="line">            &#125;, child: Text(&quot;hank&quot;)),</span><br><span class="line">            FlatButton(onPressed: ()&#123;</span><br><span class="line">              Navigator.pushNamed(context, &#39;&#x2F;hank1&#39;);</span><br><span class="line">            &#125;, child: Text(&quot;hank1&quot;))</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Page extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">  final String t;</span><br><span class="line">  Page(&#123;</span><br><span class="line">    this.t</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(t),</span><br><span class="line">        elevation:0</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.arrow_back),</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          Navigator.pop(context);</span><br><span class="line">        &#125;</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul>
<li>Theme 覆盖总的主题 (Theme.of(context) 拿到总主题的东西)</li>
<li>TextField</li>
<li>TextFormField</li>
<li>GlobalKey<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class FormDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    var textFieldDemo &#x3D; TextFieldDemo();</span><br><span class="line">    return Scaffold(</span><br><span class="line">      body: Theme(</span><br><span class="line">        data:Theme.of(context).copyWith(</span><br><span class="line">          primaryColor: Colors.black</span><br><span class="line">        ), child:Container(</span><br><span class="line">          child: Column(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              &#x2F;&#x2F; textFieldDemo</span><br><span class="line">              RegisterForm()</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          padding: EdgeInsets.all(10),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ThemeDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      color: Theme.of(context).splashColor,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TextFieldDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _TextFieldDemoState createState() &#x3D;&gt; _TextFieldDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _TextFieldDemoState extends State&lt;TextFieldDemo&gt; &#123;</span><br><span class="line"></span><br><span class="line">  final textEdittingController &#x3D; TextEditingController();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    textEdittingController.dispose();</span><br><span class="line">    super.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    &#x2F;&#x2F;设置初始值</span><br><span class="line">    textEdittingController.text &#x3D; &quot;frist&quot;;</span><br><span class="line">    &#x2F;&#x2F;监听器</span><br><span class="line">    textEdittingController.addListener(</span><br><span class="line">      ()&#123;</span><br><span class="line">        &#x2F;&#x2F;值变化时</span><br><span class="line">        debugPrint(&quot;$textEdittingController.text&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    super.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return TextField(</span><br><span class="line"></span><br><span class="line">      controller: textEdittingController,</span><br><span class="line">      &#x2F;&#x2F;变化时</span><br><span class="line">      &#x2F;&#x2F; onChanged: (v)&#123;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; &#125;,</span><br><span class="line">      &#x2F;&#x2F;确定时</span><br><span class="line">      onSubmitted: (v)&#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      decoration: InputDecoration(</span><br><span class="line">        icon:Icon(Icons.subject),</span><br><span class="line">        &#x2F;&#x2F;上部标题</span><br><span class="line">        labelText: &#39;tetx&#39;,</span><br><span class="line">        &#x2F;&#x2F;提示文字</span><br><span class="line">        hintText: &#39;tishi&#39;,</span><br><span class="line">        &#x2F;&#x2F;border  InputBorder.none</span><br><span class="line">        &#x2F;&#x2F; border: OutlineInputBorder()</span><br><span class="line">        &#x2F;&#x2F;开启背景颜色</span><br><span class="line">        filled: true</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class RegisterForm extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _RegisterFormState createState() &#x3D;&gt; _RegisterFormState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _RegisterFormState extends State&lt;RegisterForm&gt; &#123;</span><br><span class="line"></span><br><span class="line">  final registerFormKey &#x3D; GlobalKey&lt;FormState&gt;();</span><br><span class="line"></span><br><span class="line">  String username,password;</span><br><span class="line"></span><br><span class="line">  void submit()&#123;</span><br><span class="line">    &#x2F;&#x2F;执行一下save</span><br><span class="line">    registerFormKey.currentState.save();</span><br><span class="line">    &#x2F;&#x2F;执行一下validate</span><br><span class="line">    registerFormKey.currentState.validate();</span><br><span class="line">    debugPrint(username+&quot; &quot;+password);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String validatorUsername(v)&#123;</span><br><span class="line">    if (v.isEmpty)&#123;</span><br><span class="line">      return &quot;Username is Empty&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Form(</span><br><span class="line">      key: registerFormKey,</span><br><span class="line">      child: Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        TextFormField(</span><br><span class="line">          decoration: InputDecoration(</span><br><span class="line">            labelText:&quot;UserName&quot;,</span><br><span class="line">            hintText: &quot;&quot;</span><br><span class="line">          ),</span><br><span class="line">          onSaved: (value)&#123;</span><br><span class="line">            username &#x3D; value;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#x2F;&#x2F;校验</span><br><span class="line">          validator:validatorUsername ,</span><br><span class="line">          &#x2F;&#x2F;自动执行验证</span><br><span class="line">          autovalidate: true,</span><br><span class="line">        ),</span><br><span class="line">        TextFormField(</span><br><span class="line">          &#x2F;&#x2F;敏感文字</span><br><span class="line">          obscureText: true,</span><br><span class="line">          decoration: InputDecoration(</span><br><span class="line">            labelText:&quot;password&quot;,</span><br><span class="line">          ),</span><br><span class="line">          onSaved: (value)&#123;</span><br><span class="line">            password &#x3D; value;</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          width: double.infinity,</span><br><span class="line">          child: RaisedButton(</span><br><span class="line">            onPressed:submit,</span><br><span class="line">            child: Text(&#39;register&#39;),</span><br><span class="line">          )</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><ul>
<li>FloatActionButton</li>
<li>FloatButton</li>
<li>RaisedButton</li>
<li>ButtonBar</li>
<li>OutLineButton</li>
<li>PopupMenuButton<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line">import &#39;package:flutter&#x2F;services.dart&#39;;</span><br><span class="line"></span><br><span class="line">class MaterialComponentsDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&#39;MaterialComponentsDemo&#39;),</span><br><span class="line">        elevation:0,</span><br><span class="line">      ),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children:&lt;Widget&gt;[</span><br><span class="line">          ListItem(&quot;FloatActionButtonDemo&quot;,()&#123;</span><br><span class="line">            Navigator.of(context).push(</span><br><span class="line">                    MaterialPageRoute(</span><br><span class="line">                      builder: (BuildContext c) &#x3D;&gt; FloatActionButtonDemo()</span><br><span class="line">                    )</span><br><span class="line">            );</span><br><span class="line">          &#125;),</span><br><span class="line">          ListItem(&quot;ButtonDemo&quot;,    ()&#123;</span><br><span class="line">              Navigator.of(context).push(</span><br><span class="line">                      MaterialPageRoute(</span><br><span class="line">                        builder: (BuildContext c) &#x3D;&gt; ButtonDemo()</span><br><span class="line">                      )</span><br><span class="line">              );</span><br><span class="line">            &#125;,),</span><br><span class="line"></span><br><span class="line">          ListItem(&quot;PopipMenuButtonDemo&quot;,    ()&#123;</span><br><span class="line">              Navigator.of(context).push(</span><br><span class="line">                      MaterialPageRoute(</span><br><span class="line">                        builder: (BuildContext c) &#x3D;&gt; PopipMenuButtonDemo()</span><br><span class="line">                      )</span><br><span class="line">              );</span><br><span class="line">            &#125;,),</span><br><span class="line">            </span><br><span class="line">          ListItem(&quot;runiOSMethod&quot;, () async &#123;</span><br><span class="line">            var futureValue &#x3D; await runiOSMethod();</span><br><span class="line">              return showDialog(</span><br><span class="line">                context: context,</span><br><span class="line">                builder: (context) &#123;</span><br><span class="line">                  return AlertDialog(</span><br><span class="line">                    content: Text(</span><br><span class="line">                      futureValue,</span><br><span class="line">                      textAlign: TextAlign.center,</span><br><span class="line">                    ),</span><br><span class="line">                  );</span><br><span class="line">                &#125;,                                </span><br><span class="line">              );</span><br><span class="line">          &#125;,</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  Future runiOSMethod() async &#123;</span><br><span class="line">          const platform &#x3D; const MethodChannel(&#39;lianchu&#39;);</span><br><span class="line">          var result;</span><br><span class="line">          try &#123;</span><br><span class="line">            result &#x3D; await platform.invokeMethod(&#39;comeonman&#39;);</span><br><span class="line">            return Future.value(result);</span><br><span class="line">          &#125; on PlatformException catch (e) &#123;</span><br><span class="line">            return Future.error(e.toString());</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ListItem extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">  final String t;</span><br><span class="line">  final GestureTapCallback ontap;</span><br><span class="line">  ListItem(this.t, this.ontap);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return ListTile(</span><br><span class="line">      title: Text(this.t),</span><br><span class="line">      onTap:this.ontap,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PopipMenuButtonDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;button&quot;),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        padding: EdgeInsets.all(10),</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children:&lt;Widget&gt;[</span><br><span class="line">            Row(</span><br><span class="line">              mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                PopupMenuButton(</span><br><span class="line">                  itemBuilder: (BuildContext c) &#x3D;&gt; [</span><br><span class="line">                    PopupMenuItem(</span><br><span class="line">                      value: &quot;1&quot;,</span><br><span class="line">                      child: Text(&quot;but 1&quot;)</span><br><span class="line">                    ),</span><br><span class="line">                    PopupMenuItem(</span><br><span class="line">                      value: &quot;2&quot;,</span><br><span class="line">                      child: Text(&quot;but 2&quot;)</span><br><span class="line">                    ),</span><br><span class="line">                    PopupMenuItem(</span><br><span class="line">                      value: &quot;3&quot;,</span><br><span class="line">                      child: Text(&quot;but 3&quot;)</span><br><span class="line">                    )</span><br><span class="line">                  ],</span><br><span class="line">                  onSelected: (v)&#123;</span><br><span class="line">                    print(v);</span><br><span class="line">                  &#125;,</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class FloatActionButtonDemo extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    final Widget _floatAction &#x3D; FloatingActionButton(</span><br><span class="line">      onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      child: Icon(Icons.add),</span><br><span class="line">      elevation: 0,</span><br><span class="line">      backgroundColor: Colors.red,</span><br><span class="line">      </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;带图标 文字</span><br><span class="line">    final Widget _floationActionExtend &#x3D; FloatingActionButton.extended(</span><br><span class="line">      onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">      &#125;, </span><br><span class="line">      icon: Icon(Icons.add),</span><br><span class="line">      label: Text(&#39;data&#39;),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;Button&quot;),</span><br><span class="line">        elevation: 0,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton:_floatAction,</span><br><span class="line">      &#x2F;&#x2F;与底部工具栏的叠合</span><br><span class="line">      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,</span><br><span class="line">      &#x2F;&#x2F;底部的视图</span><br><span class="line">      bottomNavigationBar: BottomAppBar(</span><br><span class="line">        child:Container(</span><br><span class="line">          height:10</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ButtonDemo extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F;文字&#x2F;文字+图标</span><br><span class="line">final Widget FloatButtonDemo &#x3D; Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children:&lt;Widget&gt;[</span><br><span class="line">          FlatButton(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">            &#125;, </span><br><span class="line">            child: Text(&quot;FlatButton&quot;),</span><br><span class="line">            &#x2F;&#x2F;按钮颜色</span><br><span class="line">            &#x2F;&#x2F; splashColor: Colors.red,</span><br><span class="line">            textColor:Colors.red,</span><br><span class="line">          ),</span><br><span class="line">          FlatButton.icon(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">            &#125;, </span><br><span class="line">            icon:Icon(Icons.ac_unit),</span><br><span class="line">            label:Text(&quot;FlatButton.icon&quot;) ,</span><br><span class="line">            &#x2F;&#x2F;按钮颜色</span><br><span class="line">            &#x2F;&#x2F; splashColor: Colors.red,</span><br><span class="line">            textColor:Colors.red,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;FloatButton + 带背景颜色 默认是主题的buttonColor</span><br><span class="line">final Widget RaisedButtonDemo &#x3D; Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children:&lt;Widget&gt;[</span><br><span class="line">          RaisedButton(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">            &#125;, </span><br><span class="line">            child: Text(&quot;RaisedButton&quot;),</span><br><span class="line">            &#x2F;&#x2F;按钮颜色</span><br><span class="line">            splashColor: Colors.red,</span><br><span class="line">            textColor:Colors.white,</span><br><span class="line">            &#x2F;&#x2F;与下一层的阴影效果 0 就是没有</span><br><span class="line">            elevation: 0,</span><br><span class="line">            &#x2F;&#x2F;按钮的填充颜色</span><br><span class="line">            color: Colors.green,</span><br><span class="line">            &#x2F;&#x2F;形状</span><br><span class="line">            shape: BeveledRectangleBorder(</span><br><span class="line">              borderRadius:BorderRadius.circular(10)</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          RaisedButton.icon(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">            &#125;, </span><br><span class="line">            icon:Icon(Icons.ac_unit),</span><br><span class="line">            label:Text(&quot;RaisedButton.icon&quot;) ,</span><br><span class="line">            &#x2F;&#x2F;按钮颜色</span><br><span class="line">            splashColor: Colors.red,</span><br><span class="line">            textColor:Colors.white,</span><br><span class="line">            elevation: 10,</span><br><span class="line">            shape:StadiumBorder()</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">final Widget ContainButtonDemo &#x3D; Container(</span><br><span class="line">              width: 160,</span><br><span class="line">              child:OutlineButton(</span><br><span class="line">                onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">                &#125;, </span><br><span class="line">                child: Text(&quot;RaisedButton&quot;),</span><br><span class="line">                &#x2F;&#x2F;溅墨颜色</span><br><span class="line">                splashColor: Colors.red,</span><br><span class="line">                &#x2F;&#x2F;按钮颜色</span><br><span class="line">                textColor:Colors.black,</span><br><span class="line">                &#x2F;&#x2F;与下一层的阴影效果 0 就是没有</span><br><span class="line">                &#x2F;&#x2F;按钮的填充颜色</span><br><span class="line">                color: Colors.green,</span><br><span class="line">                borderSide: BorderSide(</span><br><span class="line">                  color:Colors.red</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">final Widget FlexButtonDemo &#x3D;  Expanded(</span><br><span class="line">              child: OutlineButton(</span><br><span class="line">                onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">                &#125;, </span><br><span class="line">                child: Text(&quot;button&quot;),</span><br><span class="line">                &#x2F;&#x2F;溅墨颜色</span><br><span class="line">                splashColor: Colors.red,</span><br><span class="line">                &#x2F;&#x2F;按钮颜色</span><br><span class="line">                textColor:Colors.black,</span><br><span class="line">                &#x2F;&#x2F;与下一层的阴影效果 0 就是没有</span><br><span class="line">                &#x2F;&#x2F;按钮的填充颜色</span><br><span class="line">                color: Colors.green,</span><br><span class="line">                borderSide: BorderSide(</span><br><span class="line">                  color:Colors.red</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">final Widget ButtonBarDemo &#x3D;  Row(</span><br><span class="line">              mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                 ButtonBar(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      OutlineButton(</span><br><span class="line">                        onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">                        &#125;, </span><br><span class="line">                        child: Text(&quot;button&quot;),</span><br><span class="line">                        &#x2F;&#x2F;溅墨颜色</span><br><span class="line">                        splashColor: Colors.red,</span><br><span class="line">                        &#x2F;&#x2F;按钮颜色</span><br><span class="line">                        textColor:Colors.black,</span><br><span class="line">                        &#x2F;&#x2F;与下一层的阴影效果 0 就是没有</span><br><span class="line">                        &#x2F;&#x2F;按钮的填充颜色</span><br><span class="line">                        color: Colors.green,</span><br><span class="line">                        borderSide: BorderSide(</span><br><span class="line">                          color:Colors.red</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                      OutlineButton(</span><br><span class="line">                        onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">                        &#125;, </span><br><span class="line">                        child: Text(&quot;button&quot;),</span><br><span class="line">                        &#x2F;&#x2F;溅墨颜色</span><br><span class="line">                        splashColor: Colors.red,</span><br><span class="line">                        &#x2F;&#x2F;按钮颜色</span><br><span class="line">                        textColor:Colors.black,</span><br><span class="line">                        &#x2F;&#x2F;与下一层的阴影效果 0 就是没有</span><br><span class="line">                        &#x2F;&#x2F;按钮的填充颜色</span><br><span class="line">                        color: Colors.green,</span><br><span class="line">                        borderSide: BorderSide(</span><br><span class="line">                          color:Colors.red</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                    )</span><br><span class="line">                  ],</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;OutLieButton 描边按钮</span><br><span class="line">final Widget OutLineButtonDemo &#x3D; Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children:&lt;Widget&gt;[</span><br><span class="line">          OutlineButton(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">            &#125;, </span><br><span class="line">            child: Text(&quot;OutLineButton&quot;),</span><br><span class="line">            &#x2F;&#x2F;溅墨颜色</span><br><span class="line">            splashColor: Colors.red,</span><br><span class="line">            &#x2F;&#x2F;按钮颜色</span><br><span class="line">            textColor:Colors.black,</span><br><span class="line">            &#x2F;&#x2F;与下一层的阴影效果 0 就是没有</span><br><span class="line">            &#x2F;&#x2F;按钮的填充颜色</span><br><span class="line">            color: Colors.green,</span><br><span class="line">            borderSide: BorderSide(</span><br><span class="line">              color:Colors.red</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">           OutlineButton.icon(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line"></span><br><span class="line">            &#125;, </span><br><span class="line">            icon:Icon(Icons.ac_unit),</span><br><span class="line">            label:Text(&quot;OutLineButton.icon&quot;) ,</span><br><span class="line">            &#x2F;&#x2F;按钮颜色</span><br><span class="line">            textColor:Colors.black,</span><br><span class="line">            shape:StadiumBorder()</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar:AppBar(</span><br><span class="line">        title: Text(&quot;button&quot;),</span><br><span class="line">      ),</span><br><span class="line">      body:Container(</span><br><span class="line">        padding: EdgeInsets.all(10),</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children:&lt;Widget&gt;[</span><br><span class="line">            FloatButtonDemo,</span><br><span class="line">            RaisedButtonDemo,</span><br><span class="line">            OutLineButtonDemo,</span><br><span class="line">            ContainButtonDemo,</span><br><span class="line">            FlexButtonDemo,</span><br><span class="line">            ButtonBarDemo,</span><br><span class="line">          ]</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><ul>
<li>Checkbox</li>
<li>Radio</li>
<li>Switch</li>
<li>Slider<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class CheckBoxDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _CheckBoxDemoState createState() &#x3D;&gt; _CheckBoxDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _CheckBoxDemoState extends State&lt;CheckBoxDemo&gt; &#123;</span><br><span class="line"></span><br><span class="line">  bool _checkboxstatus &#x3D; true;</span><br><span class="line">  bool _switchstatus &#x3D; true;</span><br><span class="line">  double _sliderItem &#x3D; 0;</span><br><span class="line">  int _radioGroupA &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;test&quot;),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        padding:EdgeInsets.all(10),</span><br><span class="line">        child:Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            CheckboxListTile(</span><br><span class="line">                  value: _checkboxstatus,</span><br><span class="line">                  onChanged: (v)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _checkboxstatus &#x3D; v;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  title: Text(&quot;CheckboxListTile&quot;),</span><br><span class="line">                  subtitle: Text(&quot;subtitle&quot;),</span><br><span class="line">                  secondary: Icon(Icons.face),</span><br><span class="line">                  &#x2F;&#x2F;控制是否激活状态</span><br><span class="line">                  selected: _checkboxstatus,</span><br><span class="line">            ),</span><br><span class="line">            Row(</span><br><span class="line">              mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Checkbox(</span><br><span class="line">                  value: _checkboxstatus, </span><br><span class="line">                  onChanged: (v)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _checkboxstatus &#x3D; v;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#x2F;&#x2F;勾选状态复选框的颜色</span><br><span class="line">                  checkColor: Colors.red,</span><br><span class="line">                  &#x2F;&#x2F;背景颜色</span><br><span class="line">                  activeColor: Colors.green,</span><br><span class="line">                ),</span><br><span class="line">              ]</span><br><span class="line">            ),</span><br><span class="line">            RadioListTile(</span><br><span class="line">                  value: 0,</span><br><span class="line">                  onChanged: (v)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _radioGroupA &#x3D; v;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  title: Text(&quot;RadioListTile&quot;),</span><br><span class="line">                  subtitle: Text(&quot;subtitle&quot;),</span><br><span class="line">                  secondary: Icon(Icons.face),</span><br><span class="line">                  &#x2F;&#x2F;控制是否激活状态</span><br><span class="line">                  selected: _radioGroupA &#x3D;&#x3D; 0,</span><br><span class="line">                  groupValue: _radioGroupA,</span><br><span class="line">            ),</span><br><span class="line">            RadioListTile(</span><br><span class="line">                  value: 1,</span><br><span class="line">                  onChanged: (v)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _radioGroupA &#x3D; v;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  title: Text(&quot;RadioListTile&quot;),</span><br><span class="line">                  subtitle: Text(&quot;subtitle&quot;),</span><br><span class="line">                  secondary: Icon(Icons.face),</span><br><span class="line">                  &#x2F;&#x2F;控制是否激活状态</span><br><span class="line">                  selected: _radioGroupA &#x3D;&#x3D; 1, groupValue: _radioGroupA,</span><br><span class="line">            ),</span><br><span class="line">            Row(</span><br><span class="line">              children:&lt;Widget&gt;[</span><br><span class="line">                Radio(value: 0, groupValue: _radioGroupA, </span><br><span class="line">                  onChanged: (v)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _radioGroupA &#x3D; v;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#x2F;&#x2F;选中的颜色</span><br><span class="line">                  activeColor: Colors.green,</span><br><span class="line">                ),</span><br><span class="line">                Radio(value: 1, groupValue: _radioGroupA, </span><br><span class="line">                  onChanged: (v)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _radioGroupA &#x3D; v;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#x2F;&#x2F;选中的颜色</span><br><span class="line">                  activeColor: Colors.green,</span><br><span class="line">                ),</span><br><span class="line">              ]</span><br><span class="line">            ),</span><br><span class="line">            SwitchListTile(value: _switchstatus, onChanged: (v)&#123;</span><br><span class="line">                setState(() &#123;</span><br><span class="line">                      _switchstatus &#x3D; v;</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;,</span><br><span class="line">              title: Text(&quot;RadioListTile&quot;),</span><br><span class="line">              subtitle: Text(&quot;subtitle&quot;),</span><br><span class="line">              secondary: Icon(Icons.face),</span><br><span class="line">              selected: _switchstatus,</span><br><span class="line">            ),</span><br><span class="line">            Row(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Switch(value: _switchstatus, onChanged: (v)&#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    _switchstatus &#x3D; v;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">            Slider(value: _sliderItem, onChanged: (v)&#123;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                _sliderItem &#x3D; v;</span><br><span class="line">              &#125;);</span><br><span class="line">             &#125;,</span><br><span class="line">             &#x2F;&#x2F;滑倒的颜色</span><br><span class="line">             activeColor: Colors.red,</span><br><span class="line">             &#x2F;&#x2F;未滑倒的颜色</span><br><span class="line">             inactiveColor: Colors.green,</span><br><span class="line">             min: 0,</span><br><span class="line">             max: 10,</span><br><span class="line">             &#x2F;&#x2F;分成10分</span><br><span class="line">             divisions: 10,</span><br><span class="line">             &#x2F;&#x2F;滑到显示分的比例</span><br><span class="line">             label:&quot;$_sliderItem.toInt()&quot;,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><ul>
<li>SimpleDialog</li>
<li>AlterDialog</li>
<li>BottomSheet</li>
<li>ModalBottomSheet</li>
<li>SnackBar</li>
<li>ExpansionPanelList</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class DialogDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _DialogDemoState createState() &#x3D;&gt; _DialogDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum Option&#123;</span><br><span class="line">  A,B,C</span><br><span class="line">&#125;</span><br><span class="line">enum AlterOption&#123;</span><br><span class="line">  OK,Cancel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _DialogDemoState extends State&lt;DialogDemo&gt; &#123;</span><br><span class="line"></span><br><span class="line">  bool _isExpand &#x3D; false;</span><br><span class="line">  bool _isExpandtwo &#x3D; false;</span><br><span class="line"></span><br><span class="line">  String _choice &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">  Future _openSimpleDialog() async&#123;</span><br><span class="line">    final option &#x3D;  await showDialog(</span><br><span class="line">      context: context,</span><br><span class="line">      builder: (BuildContext c)&#123;</span><br><span class="line">        return SimpleDialog(</span><br><span class="line">          title:Text(&quot;SimpleDialog&quot;),</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            SimpleDialogOption(</span><br><span class="line">              child:Text(&quot;A&quot;),</span><br><span class="line">              onPressed:()&#123;</span><br><span class="line">                Navigator.pop(context,Option.A);</span><br><span class="line">              &#125;</span><br><span class="line">            ),SimpleDialogOption(</span><br><span class="line">              child:Text(&quot;B&quot;),</span><br><span class="line">              onPressed:()&#123;</span><br><span class="line">                Navigator.pop(context,Option.B);</span><br><span class="line">              &#125;</span><br><span class="line">            ),</span><br><span class="line">            SimpleDialogOption(</span><br><span class="line">              child:Text(&quot;C&quot;),</span><br><span class="line">              onPressed:()&#123;</span><br><span class="line">                Navigator.pop(context,Option.C);</span><br><span class="line">              &#125;</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    switch(option)&#123;</span><br><span class="line">    case Option.A:</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _choice &#x3D; &quot;A&quot;;</span><br><span class="line">      &#125;);</span><br><span class="line">    break;</span><br><span class="line">    case Option.B:</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _choice &#x3D; &quot;B&quot;;</span><br><span class="line">      &#125;);</span><br><span class="line">    break;</span><br><span class="line">    case Option.C:</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _choice &#x3D; &quot;C&quot;;</span><br><span class="line">      &#125;);</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future _openAlterDialog() async&#123;</span><br><span class="line">     final option &#x3D;  await showDialog(</span><br><span class="line">      context: context,</span><br><span class="line">      &#x2F;&#x2F;点击空白是否关闭</span><br><span class="line">      barrierDismissible: false,</span><br><span class="line">      builder: (BuildContext c)&#123;</span><br><span class="line">        return AlertDialog(</span><br><span class="line">          title:Text(&quot;AlertDialog&quot;),</span><br><span class="line">          content: Text(&quot;are you sure ?&quot;),</span><br><span class="line">          actions: &lt;Widget&gt;[</span><br><span class="line">            FlatButton(onPressed: ()&#123;</span><br><span class="line">                Navigator.pop(context,AlterOption.Cancel);</span><br><span class="line">            &#125;, child: Text(&quot;cancel&quot;)),</span><br><span class="line">             FlatButton(onPressed: ()&#123;</span><br><span class="line">                Navigator.pop(context,AlterOption.OK);</span><br><span class="line">            &#125;, child: Text(&quot;ok&quot;))</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    switch(option)&#123;</span><br><span class="line">    case AlterOption.OK:</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _choice &#x3D; &quot;OK&quot;;</span><br><span class="line">      &#125;);</span><br><span class="line">    break;</span><br><span class="line">    case AlterOption.Cancel:</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _choice &#x3D; &quot;Cancel&quot;;</span><br><span class="line">      &#125;);</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  final _bottomSheetkey &#x3D; GlobalKey&lt;ScaffoldState&gt;();</span><br><span class="line">  _openBottomSheet() &#123;</span><br><span class="line">    _bottomSheetkey.currentState.showBottomSheet((BuildContext builder)&#123;</span><br><span class="line">      return BottomAppBar(</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          height: 150,</span><br><span class="line">          width: double.infinity,</span><br><span class="line">          padding: EdgeInsets.all(10),</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children:&lt;Widget&gt;[</span><br><span class="line">              Text(&quot;BottomAppBar&quot;),</span><br><span class="line">            ]</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future _openModelBottomSheet() async&#123;</span><br><span class="line">    final option &#x3D;  await showModalBottomSheet(context: context, builder: (BuildContext builder)&#123;</span><br><span class="line">      return  Container(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          height: 200,</span><br><span class="line">          width: double.infinity,</span><br><span class="line">          padding: EdgeInsets.all(10),</span><br><span class="line">          child: Column(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children:&lt;Widget&gt;[</span><br><span class="line">              ListTile(title:Text(&quot;A&quot;),onTap: ()&#123;Navigator.pop(context,Option.A);&#125;,),</span><br><span class="line">              ListTile(title:Text(&quot;B&quot;),onTap: ()&#123;Navigator.pop(context,Option.B);&#125;,),</span><br><span class="line">              ListTile(title:Text(&quot;C&quot;),onTap: ()&#123;Navigator.pop(context,Option.C);&#125;,),</span><br><span class="line">            ]</span><br><span class="line">          ),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    switch(option)&#123;</span><br><span class="line">    case Option.A:</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _choice &#x3D; &quot;A&quot;;</span><br><span class="line">    &#125;);</span><br><span class="line">    break;</span><br><span class="line">    case Option.B:</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _choice &#x3D; &quot;B&quot;;</span><br><span class="line">    &#125;);</span><br><span class="line">    break;</span><br><span class="line">    case Option.C:</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _choice &#x3D; &quot;C&quot;;</span><br><span class="line">    &#125;);</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _openSnackBar()&#123;</span><br><span class="line">     _bottomSheetkey.currentState.showSnackBar(</span><br><span class="line">      SnackBar(</span><br><span class="line">        content: Text(&quot;...&quot;),</span><br><span class="line">        action: SnackBarAction(label: &#39;ok&#39;, onPressed: ()&#123;</span><br><span class="line">          print(&quot;ok&quot;);</span><br><span class="line">        &#125;),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  _openExpandsionPanel()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      key: _bottomSheetkey,</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;DialogDemo&quot;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(child:Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Text(&quot;$&#123;_choice&#125;&quot;),</span><br><span class="line">          </span><br><span class="line">          Column(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              RaisedButton(onPressed:_openSimpleDialog,child: Text(&quot;SimpleDialog&quot;),),</span><br><span class="line">              RaisedButton(onPressed:_openAlterDialog,child: Text(&quot;AlterDialog&quot;),),</span><br><span class="line">              RaisedButton(onPressed:_openBottomSheet,child: Text(&quot;BottomSheet&quot;),),</span><br><span class="line">              RaisedButton(onPressed:_openModelBottomSheet,child: Text(&quot;Model BottomSheet&quot;),),</span><br><span class="line">              RaisedButton(onPressed:_openSnackBar,child: Text(&quot;snackBar&quot;),),</span><br><span class="line">              &#x2F;&#x2F; RaisedButton(onPressed:_openExpandsionPanel,child: Text(&quot;ExpandsionPanel&quot;),)</span><br><span class="line">              ExpansionPanelList(</span><br><span class="line">                expansionCallback: (int index,bool isExpand)&#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    if (index &#x3D;&#x3D; 0)&#123;</span><br><span class="line">                      _isExpand &#x3D; !isExpand;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                      _isExpandtwo &#x3D; !isExpand;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                children:[</span><br><span class="line">                  ExpansionPanel(</span><br><span class="line">                    headerBuilder: (BuildContext c,bool isExpand)&#123;</span><br><span class="line">                      return Container(</span><br><span class="line">                        padding:EdgeInsets.all(10),</span><br><span class="line">                        child:Text(&quot;panle A&quot;),</span><br><span class="line">                      );</span><br><span class="line">                    &#125;,</span><br><span class="line">                    body:Container(</span><br><span class="line">                        padding:EdgeInsets.all(10),</span><br><span class="line">                        width: double.infinity,</span><br><span class="line">                        child: Text(&quot;content A&quot;),</span><br><span class="line">                    ),</span><br><span class="line">                    isExpanded: _isExpand</span><br><span class="line">                  ),</span><br><span class="line">                  ExpansionPanel(</span><br><span class="line">                    headerBuilder: (BuildContext c,bool isExpand)&#123;</span><br><span class="line">                      return Container(</span><br><span class="line">                        padding:EdgeInsets.all(10),</span><br><span class="line">                        child:Text(&quot;panle B&quot;),</span><br><span class="line">                      );</span><br><span class="line">                    &#125;,</span><br><span class="line">                    body:Container(</span><br><span class="line">                        padding:EdgeInsets.all(10),</span><br><span class="line">                        width: double.infinity,</span><br><span class="line">                        child: Text(&quot;content B&quot;),</span><br><span class="line">                    ),</span><br><span class="line">                    isExpanded: _isExpandtwo</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MDC"><a href="#MDC" class="headerlink" title="MDC"></a>MDC</h2><ul>
<li>Chip</li>
<li>Wrap</li>
<li>Divider</li>
<li>Chip(ActionChip,FilterChip,ChoiceChip)</li>
<li>DataTable</li>
<li>PaginatedDataTable</li>
<li>Card</li>
<li>ClipRRect</li>
<li>Stepper</li>
<li>AspectRatio //比例</li>
<li>ClipRRect //切圆角<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.cip</span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class ChipDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _ChipDemoState createState() &#x3D;&gt; _ChipDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _ChipDemoState extends State&lt;ChipDemo&gt; &#123;</span><br><span class="line"></span><br><span class="line">  List&lt;String&gt; _tags &#x3D; [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;];</span><br><span class="line">  List&lt;String&gt; _select &#x3D; [];</span><br><span class="line"></span><br><span class="line">  String _action &#x3D; &quot;&quot;;</span><br><span class="line">  String _choice &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;ChipDemo&quot;)</span><br><span class="line">      ),</span><br><span class="line">      body: Column(</span><br><span class="line">        mainAxisAlignment:MainAxisAlignment.center,</span><br><span class="line">        children:&lt;Widget&gt;[</span><br><span class="line">          Wrap(</span><br><span class="line">            &#x2F;&#x2F;相隔间隔</span><br><span class="line">            spacing: 10,</span><br><span class="line">            &#x2F;&#x2F;行的间隔</span><br><span class="line">            runSpacing: 10,</span><br><span class="line">            children:&lt;Widget&gt;[</span><br><span class="line">              Chip(label: Text(&quot;chip1&quot;),backgroundColor: Colors.red,),</span><br><span class="line">              Chip(label: Text(&quot;chip2&quot;),avatar: CircleAvatar(</span><br><span class="line">                backgroundColor:Colors.red,</span><br><span class="line">                child: Text(&quot;Hank&quot;),</span><br><span class="line">              ),),</span><br><span class="line">              Chip(label: Text(&quot;chip3&quot;),</span><br><span class="line">                &#x2F;&#x2F;删除</span><br><span class="line">                onDeleted: ()&#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                &#x2F;&#x2F;删除icon</span><br><span class="line">                deleteIcon: Icon(Icons.delete),</span><br><span class="line">                &#x2F;&#x2F;删除icon的颜色</span><br><span class="line">                deleteIconColor: Colors.red,</span><br><span class="line">                &#x2F;&#x2F;长按显示的提示语</span><br><span class="line">                deleteButtonTooltipMessage: &quot;delete?&quot;,</span><br><span class="line">              ),</span><br><span class="line">              Chip(label: Text(&quot;chip4&quot;)),</span><br><span class="line">              Divider(</span><br><span class="line">                color:Colors.red,</span><br><span class="line">                &#x2F;&#x2F;与顶上的高度</span><br><span class="line">                height:10,</span><br><span class="line">                &#x2F;&#x2F;间进</span><br><span class="line">                indent:20</span><br><span class="line">              ),</span><br><span class="line">              Wrap(</span><br><span class="line">                spacing: 10,</span><br><span class="line">                children: _tags.map((tag)&#123;</span><br><span class="line">                  return Chip(label: Text(tag),</span><br><span class="line">                    &#x2F;&#x2F;删除</span><br><span class="line">                    onDeleted: ()&#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        _tags.remove(tag);</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#x2F;&#x2F;删除icon</span><br><span class="line">                    deleteIcon: Icon(Icons.delete),</span><br><span class="line">                    &#x2F;&#x2F;删除icon的颜色</span><br><span class="line">                    deleteIconColor: Colors.red,</span><br><span class="line">                    &#x2F;&#x2F;长按显示的提示语</span><br><span class="line">                    deleteButtonTooltipMessage: &quot;delete?&quot;,</span><br><span class="line">                  );</span><br><span class="line">                &#125;).toList(),</span><br><span class="line">              ),</span><br><span class="line">              Divider(</span><br><span class="line">                color:Colors.red,</span><br><span class="line">                &#x2F;&#x2F;与顶上的高度</span><br><span class="line">                height:10,</span><br><span class="line">                &#x2F;&#x2F;间进</span><br><span class="line">                indent:20</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: double.infinity,</span><br><span class="line">                child:Text(&quot;$_action&quot;),</span><br><span class="line">              ),</span><br><span class="line">              Wrap(</span><br><span class="line">                spacing: 10,</span><br><span class="line">                children: _tags.map((tag)&#123;</span><br><span class="line">                  return ActionChip(label: Text(tag), </span><br><span class="line">                    onPressed: () &#123;</span><br><span class="line">                     setState(() &#123;</span><br><span class="line">                      _action &#x3D; tag;</span><br><span class="line">                     &#125;);</span><br><span class="line">                    &#125;,</span><br><span class="line">                  );</span><br><span class="line">                &#125;).toList(),</span><br><span class="line">              ),</span><br><span class="line">              Divider(</span><br><span class="line">                color:Colors.red,</span><br><span class="line">                &#x2F;&#x2F;与顶上的高度</span><br><span class="line">                height:10,</span><br><span class="line">                &#x2F;&#x2F;间进</span><br><span class="line">                indent:20</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: double.infinity,</span><br><span class="line">                child:Text(&quot;$_select&quot;),</span><br><span class="line">              ),</span><br><span class="line">              Wrap(</span><br><span class="line">                spacing: 10,</span><br><span class="line">                children: _tags.map((tag)&#123;</span><br><span class="line">                  return FilterChip(label: Text(tag), </span><br><span class="line">                    selected: _select.contains(tag),</span><br><span class="line">                    onSelected: (v)&#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        if(_select.contains(tag))&#123;</span><br><span class="line">                          _select.remove(tag);</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                          _select.add(tag);</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;,</span><br><span class="line">                  );</span><br><span class="line">                &#125;).toList(),</span><br><span class="line">              ),</span><br><span class="line">              Divider(</span><br><span class="line">                color:Colors.red,</span><br><span class="line">                &#x2F;&#x2F;与顶上的高度</span><br><span class="line">                height:10,</span><br><span class="line">                &#x2F;&#x2F;间进</span><br><span class="line">                indent:20</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: double.infinity,</span><br><span class="line">                child:Text(&quot;$_choice&quot;),</span><br><span class="line">              ),</span><br><span class="line">              Wrap(</span><br><span class="line">                spacing: 10,</span><br><span class="line">                children: _tags.map((tag)&#123;</span><br><span class="line">                  return ChoiceChip(label: Text(tag), </span><br><span class="line">                    selected: _choice &#x3D;&#x3D; tag,</span><br><span class="line">                    onSelected: (v)&#123;</span><br><span class="line">                     setState(() &#123;</span><br><span class="line">                        _choice &#x3D; tag;</span><br><span class="line">                     &#125;);</span><br><span class="line">                    &#125;,</span><br><span class="line">                  );</span><br><span class="line">                &#125;).toList(),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ) </span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.dataTable</span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PostDataSource extends DataTableSource&#123;</span><br><span class="line"></span><br><span class="line">  final List&lt;String&gt; _datas &#x3D; [&quot;1&quot;,&quot;3333&quot;,&quot;22&quot;,&quot;4444&quot;,&quot;55555&quot;,&quot;666666&quot;,&quot;7777777&quot;,&quot;88888888&quot;];</span><br><span class="line">  int _selectedRowCount &#x3D; 0;</span><br><span class="line">  @override</span><br><span class="line">  DataRow getRow(int index) &#123;</span><br><span class="line">    </span><br><span class="line">    return DataRow.byIndex(</span><br><span class="line">      cells: &lt;DataCell&gt;[</span><br><span class="line">        DataCell(Text(_datas[index])),</span><br><span class="line">        DataCell(Text(_datas[index])),</span><br><span class="line">      ],</span><br><span class="line">      index: index</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool get isRowCountApproximate &#x3D;&gt; false;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  int get rowCount &#x3D;&gt; _datas.length;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  int get selectedRowCount &#x3D;&gt; _selectedRowCount;</span><br><span class="line"></span><br><span class="line">  void _sort(getField(post),bool ascending)&#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">     _post._sort((dataPosts)&#x3D;&gt;dataPosts.length, sce);</span><br><span class="line">    相当getField &#x3D; dataPosts.length</span><br><span class="line">    *&#x2F;</span><br><span class="line">    _datas.sort((a,b)&#123;</span><br><span class="line">      &#x2F;&#x2F; print(a + &quot;----&quot; + b);</span><br><span class="line">      if(!ascending)&#123;</span><br><span class="line">        final c &#x3D; a;</span><br><span class="line">        a &#x3D; b;</span><br><span class="line">        b &#x3D; c;</span><br><span class="line">      &#125;  </span><br><span class="line">      final aValue &#x3D; getField(a);</span><br><span class="line">      final bValue &#x3D; getField(b);</span><br><span class="line">      &#x2F;&#x2F;按照长度排序</span><br><span class="line">      return Comparable.compare(aValue, bValue);</span><br><span class="line">    &#125;);</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DataTableDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _DataTableDemoState createState() &#x3D;&gt; _DataTableDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _DataTableDemoState extends State&lt;DataTableDemo&gt; &#123;</span><br><span class="line"></span><br><span class="line">  int _sortColumnIndex &#x3D;  0;</span><br><span class="line">  bool _sortAscending &#x3D; false;</span><br><span class="line">  bool _isChoice &#x3D; false;</span><br><span class="line">  </span><br><span class="line">  final PostDataSource _post &#x3D; PostDataSource();</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;DataTable</span><br><span class="line">    List&lt;Widget&gt; _dataTables &#x3D; [</span><br><span class="line">        DataTable(</span><br><span class="line">              &#x2F;&#x2F;定制全选的动作</span><br><span class="line">              onSelectAll: (bool v)&#123;</span><br><span class="line">                setState(() &#123;</span><br><span class="line">                      _isChoice &#x3D; v;</span><br><span class="line">                    &#125;);</span><br><span class="line">              &#125;,</span><br><span class="line">              &#x2F;&#x2F;第一列排序</span><br><span class="line">              sortColumnIndex:_sortColumnIndex,</span><br><span class="line">              &#x2F;&#x2F;默认升序排列</span><br><span class="line">              sortAscending: _sortAscending,</span><br><span class="line">              columns: &lt;DataColumn&gt;[</span><br><span class="line">                DataColumn(</span><br><span class="line">                  &#x2F;&#x2F;这样可以设置宽度</span><br><span class="line">                  label: Container(</span><br><span class="line">                    width:100,</span><br><span class="line">                    child:Text(&quot;header 1&quot;),</span><br><span class="line">                  ),</span><br><span class="line">                  &#x2F;&#x2F;总列的排序按钮</span><br><span class="line">                  onSort: (int index ,bool sce)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _sortAscending &#x3D; sce;</span><br><span class="line">                      _sortColumnIndex &#x3D; index;</span><br><span class="line">                      &#x2F;&#x2F; 排序方法 .sort</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;</span><br><span class="line">                ),</span><br><span class="line">                DataColumn(</span><br><span class="line">                  label: Text(&quot;header 2&quot;)</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">              rows: &lt;DataRow&gt;[</span><br><span class="line">                DataRow(</span><br><span class="line">                  cells: [</span><br><span class="line">                    DataCell(Text(&quot;header 1 1&quot;)),</span><br><span class="line">                    DataCell(Text(&quot;header 2 1&quot;)),</span><br><span class="line">                  ],</span><br><span class="line">                  selected:_isChoice,</span><br><span class="line">                  onSelectChanged: (bool v)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _isChoice &#x3D; v;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;</span><br><span class="line">                ),</span><br><span class="line">                DataRow(cells: [</span><br><span class="line">                  DataCell(Text(&quot;header 1 2&quot;)),</span><br><span class="line">                  DataCell(Text(&quot;header 2 2&quot;)),</span><br><span class="line">                ],selected:false, onSelectChanged: (bool v)&#123;</span><br><span class="line">                   </span><br><span class="line">                  &#125;),</span><br><span class="line">                DataRow(cells: [</span><br><span class="line">                  DataCell(Text(&quot;header 1 3&quot;)),</span><br><span class="line">                  DataCell(Text(&quot;header 2 3&quot;)),</span><br><span class="line">                ],selected:true, onSelectChanged: (bool v)&#123;</span><br><span class="line">                    </span><br><span class="line">                  &#125;)</span><br><span class="line">              ],</span><br><span class="line">            )</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    List&lt;Widget&gt; _paginatedDataTables &#x3D; [</span><br><span class="line">        PaginatedDataTable(</span><br><span class="line">              header: Text(&quot;header&quot;),</span><br><span class="line">              &#x2F;&#x2F;cell 数据源</span><br><span class="line">              source: _post,</span><br><span class="line">              &#x2F;&#x2F;没页的个数</span><br><span class="line">              rowsPerPage: 5,</span><br><span class="line">              &#x2F;&#x2F;定制全选的动作</span><br><span class="line">              onSelectAll: (bool v)&#123;</span><br><span class="line">                setState(() &#123;</span><br><span class="line">                      _isChoice &#x3D; v;</span><br><span class="line">                    &#125;);</span><br><span class="line">              &#125;,</span><br><span class="line">              &#x2F;&#x2F;第一列排序</span><br><span class="line">              sortColumnIndex:_sortColumnIndex,</span><br><span class="line">              &#x2F;&#x2F;默认升序排列</span><br><span class="line">              sortAscending: _sortAscending,</span><br><span class="line">              columns: &lt;DataColumn&gt;[</span><br><span class="line">                DataColumn(</span><br><span class="line">                  &#x2F;&#x2F;这样可以设置宽度</span><br><span class="line">                  label: Container(</span><br><span class="line">                    width:100,</span><br><span class="line">                    child:Text(&quot;header 1&quot;),</span><br><span class="line">                  ),</span><br><span class="line">                  &#x2F;&#x2F;总列的排序按钮</span><br><span class="line">                  onSort: (int index ,bool sce)&#123;</span><br><span class="line">                    _post._sort((dataPosts)&#x3D;&gt;dataPosts.length, sce);</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _sortAscending &#x3D; sce;</span><br><span class="line">                      _sortColumnIndex &#x3D; index;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;</span><br><span class="line">                ),</span><br><span class="line">                DataColumn(</span><br><span class="line">                  label: Text(&quot;header 2&quot;)</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">             </span><br><span class="line">            )</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;DataTable&quot;)</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child:ListView(</span><br><span class="line">          children:_paginatedDataTables,</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.Card</span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class CardDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _CardDemoState createState() &#x3D;&gt; _CardDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _CardDemoState extends State&lt;CardDemo&gt; &#123;</span><br><span class="line"></span><br><span class="line">  final List&lt;String&gt; _datas &#x3D; [&quot;1&quot;,&quot;3333&quot;,&quot;22&quot;,&quot;4444&quot;,&quot;55555&quot;,&quot;666666&quot;,&quot;7777777&quot;,&quot;88888888&quot;];</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;DataTable&quot;)</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child:ListView(</span><br><span class="line">          children:_datas.map((v)&#123;</span><br><span class="line">            return Card(</span><br><span class="line">              child: Column(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  AspectRatio(</span><br><span class="line">                    child: ClipRRect(</span><br><span class="line">                      borderRadius:BorderRadius.circular(10),</span><br><span class="line">                      child:Container(</span><br><span class="line">                        height:50,</span><br><span class="line">                        color:Colors.red</span><br><span class="line">                      )</span><br><span class="line">                    ),</span><br><span class="line">                    aspectRatio: 16&#x2F;9,</span><br><span class="line">                  ),</span><br><span class="line">                  ListTile(</span><br><span class="line">                    title: Text(v),</span><br><span class="line">                    subtitle: Text(v),</span><br><span class="line">                  ),</span><br><span class="line">                  ButtonBar(</span><br><span class="line">                    &#x2F;&#x2F; alignment:MainAxisAlignment.start,</span><br><span class="line">                    children:[</span><br><span class="line">                      FlatButton(</span><br><span class="line">                        child:Text(&quot;like&quot;), onPressed: () &#123;&#125;,</span><br><span class="line">                      ),</span><br><span class="line">                      FlatButton(</span><br><span class="line">                        child:Text(&quot;read&quot;), onPressed: () &#123;&#125;,</span><br><span class="line">                      )</span><br><span class="line">                    ]</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;).toList(),</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;4.stepper</span><br><span class="line">&#x2F;&#x2F; Copyright 2016 The Chromium Authors. All rights reserved.</span><br><span class="line">&#x2F;&#x2F; Use of this source code is governed by a BSD-style license that can be</span><br><span class="line">&#x2F;&#x2F; found in the LICENSE file.</span><br><span class="line"></span><br><span class="line">import &#39;package:flutter&#x2F;widgets.dart&#39;;</span><br><span class="line"></span><br><span class="line">import &#39;button_theme.dart&#39;;</span><br><span class="line">import &#39;colors.dart&#39;;</span><br><span class="line">import &#39;debug.dart&#39;;</span><br><span class="line">import &#39;flat_button.dart&#39;;</span><br><span class="line">import &#39;icons.dart&#39;;</span><br><span class="line">import &#39;ink_well.dart&#39;;</span><br><span class="line">import &#39;material.dart&#39;;</span><br><span class="line">import &#39;material_localizations.dart&#39;;</span><br><span class="line">import &#39;text_theme.dart&#39;;</span><br><span class="line">import &#39;theme.dart&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; TODO(dragostis): Missing functionality:</span><br><span class="line">&#x2F;&#x2F;   * mobile horizontal mode with adding&#x2F;removing steps</span><br><span class="line">&#x2F;&#x2F;   * alternative labeling</span><br><span class="line">&#x2F;&#x2F;   * stepper feedback in the case of high-latency interactions</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; The state of a [Step] which is used to control the style of the circle and</span><br><span class="line">&#x2F;&#x2F;&#x2F; text.</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F; See also:</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F;  * [Step]</span><br><span class="line">enum StepState &#123;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; A step that displays its index in its circle.</span><br><span class="line">  indexed,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; A step that displays a pencil icon in its circle.</span><br><span class="line">  editing,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; A step that displays a tick icon in its circle.</span><br><span class="line">  complete,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; A step that is disabled and does not to react to taps.</span><br><span class="line">  disabled,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; A step that is currently having an error. e.g. the user has submitted wrong</span><br><span class="line">  &#x2F;&#x2F;&#x2F; input.</span><br><span class="line">  error,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; Defines the [Stepper]&#39;s main axis.</span><br><span class="line">enum StepperType &#123;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; A vertical layout of the steps with their content in-between the titles.</span><br><span class="line">  vertical,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; A horizontal layout of the steps with their content below the titles.</span><br><span class="line">  horizontal,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const TextStyle _kStepStyle &#x3D; TextStyle(</span><br><span class="line">  fontSize: 12.0,</span><br><span class="line">  color: Colors.white,</span><br><span class="line">);</span><br><span class="line">const Color _kErrorLight &#x3D; Colors.red;</span><br><span class="line">final Color _kErrorDark &#x3D; Colors.red.shade400;</span><br><span class="line">const Color _kCircleActiveLight &#x3D; Colors.white;</span><br><span class="line">const Color _kCircleActiveDark &#x3D; Colors.black87;</span><br><span class="line">const Color _kDisabledLight &#x3D; Colors.black38;</span><br><span class="line">const Color _kDisabledDark &#x3D; Colors.white38;</span><br><span class="line">const double _kStepSize &#x3D; 24.0;</span><br><span class="line">const double _kTriangleHeight &#x3D; _kStepSize * 0.866025; &#x2F;&#x2F; Triangle height. sqrt(3.0) &#x2F; 2.0</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; A material step used in [Stepper]. The step can have a title and subtitle,</span><br><span class="line">&#x2F;&#x2F;&#x2F; an icon within its circle, some content and a state that governs its</span><br><span class="line">&#x2F;&#x2F;&#x2F; styling.</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F; See also:</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F;  * [Stepper]</span><br><span class="line">&#x2F;&#x2F;&#x2F;  * &lt;https:&#x2F;&#x2F;material.io&#x2F;archive&#x2F;guidelines&#x2F;components&#x2F;steppers.html&gt;</span><br><span class="line">@immutable</span><br><span class="line">class Step &#123;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; Creates a step for a [Stepper].</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; The [title], [content], and [state] arguments must not be null.</span><br><span class="line">  const Step(&#123;</span><br><span class="line">    @required this.title,</span><br><span class="line">    this.subtitle,</span><br><span class="line">    @required this.content,</span><br><span class="line">    this.state &#x3D; StepState.indexed,</span><br><span class="line">    this.isActive &#x3D; false,</span><br><span class="line">  &#125;) : assert(title !&#x3D; null),</span><br><span class="line">       assert(content !&#x3D; null),</span><br><span class="line">       assert(state !&#x3D; null);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The title of the step that typically describes it.</span><br><span class="line">  final Widget title;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The subtitle of the step that appears below the title and has a smaller</span><br><span class="line">  &#x2F;&#x2F;&#x2F; font size. It typically gives more details that complement the title.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; If null, the subtitle is not shown.</span><br><span class="line">  final Widget subtitle;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The content of the step that appears below the [title] and [subtitle].</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; Below the content, every step has a &#39;continue&#39; and &#39;cancel&#39; button.</span><br><span class="line">  final Widget content;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The state of the step which determines the styling of its components</span><br><span class="line">  &#x2F;&#x2F;&#x2F; and whether steps are interactive.</span><br><span class="line">  final StepState state;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; Whether or not the step is active. The flag only influences styling.</span><br><span class="line">  final bool isActive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; A material stepper widget that displays progress through a sequence of</span><br><span class="line">&#x2F;&#x2F;&#x2F; steps. Steppers are particularly useful in the case of forms where one step</span><br><span class="line">&#x2F;&#x2F;&#x2F; requires the completion of another one, or where multiple steps need to be</span><br><span class="line">&#x2F;&#x2F;&#x2F; completed in order to submit the whole form.</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F; The widget is a flexible wrapper. A parent class should pass [currentStep]</span><br><span class="line">&#x2F;&#x2F;&#x2F; to this widget based on some logic triggered by the three callbacks that it</span><br><span class="line">&#x2F;&#x2F;&#x2F; provides.</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F; See also:</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F;  * [Step]</span><br><span class="line">&#x2F;&#x2F;&#x2F;  * &lt;https:&#x2F;&#x2F;material.io&#x2F;archive&#x2F;guidelines&#x2F;components&#x2F;steppers.html&gt;</span><br><span class="line">class Stepper extends StatefulWidget &#123;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; Creates a stepper from a list of steps.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; This widget is not meant to be rebuilt with a different list of steps</span><br><span class="line">  &#x2F;&#x2F;&#x2F; unless a key is provided in order to distinguish the old stepper from the</span><br><span class="line">  &#x2F;&#x2F;&#x2F; new one.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; The [steps], [type], and [currentStep] arguments must not be null.</span><br><span class="line">  const Stepper(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    @required this.steps,</span><br><span class="line">    this.physics,</span><br><span class="line">    this.type &#x3D; StepperType.vertical,</span><br><span class="line">    this.currentStep &#x3D; 0,</span><br><span class="line">    this.onStepTapped,</span><br><span class="line">    this.onStepContinue,</span><br><span class="line">    this.onStepCancel,</span><br><span class="line">    this.controlsBuilder,</span><br><span class="line">  &#125;) : assert(steps !&#x3D; null),</span><br><span class="line">       assert(type !&#x3D; null),</span><br><span class="line">       assert(currentStep !&#x3D; null),</span><br><span class="line">       assert(0 &lt;&#x3D; currentStep &amp;&amp; currentStep &lt; steps.length),</span><br><span class="line">       super(key: key);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The steps of the stepper whose titles, subtitles, icons always get shown.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; The length of [steps] must not change.</span><br><span class="line">  final List&lt;Step&gt; steps;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; How the stepper&#39;s scroll view should respond to user input.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; For example, determines how the scroll view continues to</span><br><span class="line">  &#x2F;&#x2F;&#x2F; animate after the user stops dragging the scroll view.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; If the stepper is contained within another scrollable it</span><br><span class="line">  &#x2F;&#x2F;&#x2F; can be helpful to set this property to [ClampingScrollPhysics].</span><br><span class="line">  final ScrollPhysics physics;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The type of stepper that determines the layout. In the case of</span><br><span class="line">  &#x2F;&#x2F;&#x2F; [StepperType.horizontal], the content of the current step is displayed</span><br><span class="line">  &#x2F;&#x2F;&#x2F; underneath as opposed to the [StepperType.vertical] case where it is</span><br><span class="line">  &#x2F;&#x2F;&#x2F; displayed in-between.</span><br><span class="line">  final StepperType type;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The index into [steps] of the current step whose content is displayed.</span><br><span class="line">  final int currentStep;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The callback called when a step is tapped, with its index passed as</span><br><span class="line">  &#x2F;&#x2F;&#x2F; an argument.</span><br><span class="line">  final ValueChanged&lt;int&gt; onStepTapped;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The callback called when the &#39;continue&#39; button is tapped.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; If null, the &#39;continue&#39; button will be disabled.</span><br><span class="line">  final VoidCallback onStepContinue;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The callback called when the &#39;cancel&#39; button is tapped.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; If null, the &#39;cancel&#39; button will be disabled.</span><br><span class="line">  final VoidCallback onStepCancel;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F; The callback for creating custom controls.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; If null, the default controls from the current theme will be used.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; This callback which takes in a context and two functions,[onStepContinue]</span><br><span class="line">  &#x2F;&#x2F;&#x2F; and [onStepCancel]. These can be used to control the stepper.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; &#123;@tool snippet --template&#x3D;stateless_widget_scaffold&#125;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; Creates a stepper control with custom buttons.</span><br><span class="line">  &#x2F;&#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; &#96;&#96;&#96;dart</span><br><span class="line">  &#x2F;&#x2F;&#x2F; Widget build(BuildContext context) &#123;</span><br><span class="line">  &#x2F;&#x2F;&#x2F;   return Stepper(</span><br><span class="line">  &#x2F;&#x2F;&#x2F;     controlsBuilder:</span><br><span class="line">  &#x2F;&#x2F;&#x2F;       (BuildContext context, &#123;VoidCallback onStepContinue, VoidCallback onStepCancel&#125;) &#123;</span><br><span class="line">  &#x2F;&#x2F;&#x2F;          return Row(</span><br><span class="line">  &#x2F;&#x2F;&#x2F;            children: &lt;Widget&gt;[</span><br><span class="line">  &#x2F;&#x2F;&#x2F;              FlatButton(</span><br><span class="line">  &#x2F;&#x2F;&#x2F;                onPressed: onStepContinue,</span><br><span class="line">  &#x2F;&#x2F;&#x2F;                child: const Text(&#39;CONTINUE&#39;),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;              ),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;              FlatButton(</span><br><span class="line">  &#x2F;&#x2F;&#x2F;                onPressed: onStepCancel,</span><br><span class="line">  &#x2F;&#x2F;&#x2F;                child: const Text(&#39;CANCEL&#39;),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;              ),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;            ],</span><br><span class="line">  &#x2F;&#x2F;&#x2F;          );</span><br><span class="line">  &#x2F;&#x2F;&#x2F;       &#125;,</span><br><span class="line">  &#x2F;&#x2F;&#x2F;     steps: const &lt;Step&gt;[</span><br><span class="line">  &#x2F;&#x2F;&#x2F;       Step(</span><br><span class="line">  &#x2F;&#x2F;&#x2F;         title: Text(&#39;A&#39;),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;         content: SizedBox(</span><br><span class="line">  &#x2F;&#x2F;&#x2F;           width: 100.0,</span><br><span class="line">  &#x2F;&#x2F;&#x2F;           height: 100.0,</span><br><span class="line">  &#x2F;&#x2F;&#x2F;         ),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;       ),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;       Step(</span><br><span class="line">  &#x2F;&#x2F;&#x2F;         title: Text(&#39;B&#39;),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;         content: SizedBox(</span><br><span class="line">  &#x2F;&#x2F;&#x2F;           width: 100.0,</span><br><span class="line">  &#x2F;&#x2F;&#x2F;           height: 100.0,</span><br><span class="line">  &#x2F;&#x2F;&#x2F;         ),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;       ),</span><br><span class="line">  &#x2F;&#x2F;&#x2F;     ],</span><br><span class="line">  &#x2F;&#x2F;&#x2F;   );</span><br><span class="line">  &#x2F;&#x2F;&#x2F; &#125;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; &#96;&#96;&#96;</span><br><span class="line">  &#x2F;&#x2F;&#x2F; &#123;@end-tool&#125;</span><br><span class="line">  final ControlsWidgetBuilder controlsBuilder;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _StepperState createState() &#x3D;&gt; _StepperState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _StepperState extends State&lt;Stepper&gt; with TickerProviderStateMixin &#123;</span><br><span class="line">  List&lt;GlobalKey&gt; _keys;</span><br><span class="line">  final Map&lt;int, StepState&gt; _oldStates &#x3D; &lt;int, StepState&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    super.initState();</span><br><span class="line">    _keys &#x3D; List&lt;GlobalKey&gt;.generate(</span><br><span class="line">      widget.steps.length,</span><br><span class="line">      (int i) &#x3D;&gt; GlobalKey(),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 0; i &lt; widget.steps.length; i +&#x3D; 1)</span><br><span class="line">      _oldStates[i] &#x3D; widget.steps[i].state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void didUpdateWidget(Stepper oldWidget) &#123;</span><br><span class="line">    super.didUpdateWidget(oldWidget);</span><br><span class="line">    assert(widget.steps.length &#x3D;&#x3D; oldWidget.steps.length);</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 0; i &lt; oldWidget.steps.length; i +&#x3D; 1)</span><br><span class="line">      _oldStates[i] &#x3D; oldWidget.steps[i].state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bool _isFirst(int index) &#123;</span><br><span class="line">    return index &#x3D;&#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bool _isLast(int index) &#123;</span><br><span class="line">    return widget.steps.length - 1 &#x3D;&#x3D; index;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bool _isCurrent(int index) &#123;</span><br><span class="line">    return widget.currentStep &#x3D;&#x3D; index;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bool _isDark() &#123;</span><br><span class="line">    return Theme.of(context).brightness &#x3D;&#x3D; Brightness.dark;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildLine(bool visible) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      width: visible ? 1.0 : 0.0,</span><br><span class="line">      height: 16.0,</span><br><span class="line">      color: Colors.grey.shade400,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildCircleChild(int index, bool oldState) &#123;</span><br><span class="line">    final StepState state &#x3D; oldState ? _oldStates[index] : widget.steps[index].state;</span><br><span class="line">    final bool isDarkActive &#x3D; _isDark() &amp;&amp; widget.steps[index].isActive;</span><br><span class="line">    assert(state !&#x3D; null);</span><br><span class="line">    switch (state) &#123;</span><br><span class="line">      case StepState.indexed:</span><br><span class="line">      case StepState.disabled:</span><br><span class="line">        return Text(</span><br><span class="line">          &#39;$&#123;index + 1&#125;&#39;,</span><br><span class="line">          style: isDarkActive ? _kStepStyle.copyWith(color: Colors.black87) : _kStepStyle,</span><br><span class="line">        );</span><br><span class="line">      case StepState.editing:</span><br><span class="line">        return Icon(</span><br><span class="line">          Icons.edit,</span><br><span class="line">          color: isDarkActive ? _kCircleActiveDark : _kCircleActiveLight,</span><br><span class="line">          size: 18.0,</span><br><span class="line">        );</span><br><span class="line">      case StepState.complete:</span><br><span class="line">        return Icon(</span><br><span class="line">          Icons.check,</span><br><span class="line">          color: isDarkActive ? _kCircleActiveDark : _kCircleActiveLight,</span><br><span class="line">          size: 18.0,</span><br><span class="line">        );</span><br><span class="line">      case StepState.error:</span><br><span class="line">        return const Text(&#39;!&#39;, style: _kStepStyle);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Color _circleColor(int index) &#123;</span><br><span class="line">    final ThemeData themeData &#x3D; Theme.of(context);</span><br><span class="line">    if (!_isDark()) &#123;</span><br><span class="line">      return widget.steps[index].isActive ? themeData.primaryColor : Colors.black38;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return widget.steps[index].isActive ? themeData.accentColor : themeData.backgroundColor;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildCircle(int index, bool oldState) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      margin: const EdgeInsets.symmetric(vertical: 8.0),</span><br><span class="line">      width: _kStepSize,</span><br><span class="line">      height: _kStepSize,</span><br><span class="line">      child: AnimatedContainer(</span><br><span class="line">        curve: Curves.fastOutSlowIn,</span><br><span class="line">        duration: kThemeAnimationDuration,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: _circleColor(index),</span><br><span class="line">          shape: BoxShape.circle,</span><br><span class="line">        ),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: _buildCircleChild(index, oldState &amp;&amp; widget.steps[index].state &#x3D;&#x3D; StepState.error),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildTriangle(int index, bool oldState) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      margin: const EdgeInsets.symmetric(vertical: 8.0),</span><br><span class="line">      width: _kStepSize,</span><br><span class="line">      height: _kStepSize,</span><br><span class="line">      child: Center(</span><br><span class="line">        child: SizedBox(</span><br><span class="line">          width: _kStepSize,</span><br><span class="line">          height: _kTriangleHeight, &#x2F;&#x2F; Height of 24dp-long-sided equilateral triangle.</span><br><span class="line">          child: CustomPaint(</span><br><span class="line">            painter: _TrianglePainter(</span><br><span class="line">              color: _isDark() ? _kErrorDark : _kErrorLight,</span><br><span class="line">            ),</span><br><span class="line">            child: Align(</span><br><span class="line">              alignment: const Alignment(0.0, 0.8), &#x2F;&#x2F; 0.8 looks better than the geometrical 0.33.</span><br><span class="line">              child: _buildCircleChild(index, oldState &amp;&amp; widget.steps[index].state !&#x3D; StepState.error),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildIcon(int index) &#123;</span><br><span class="line">    if (widget.steps[index].state !&#x3D; _oldStates[index]) &#123;</span><br><span class="line">      return AnimatedCrossFade(</span><br><span class="line">        firstChild: _buildCircle(index, true),</span><br><span class="line">        secondChild: _buildTriangle(index, true),</span><br><span class="line">        firstCurve: const Interval(0.0, 0.6, curve: Curves.fastOutSlowIn),</span><br><span class="line">        secondCurve: const Interval(0.4, 1.0, curve: Curves.fastOutSlowIn),</span><br><span class="line">        sizeCurve: Curves.fastOutSlowIn,</span><br><span class="line">        crossFadeState: widget.steps[index].state &#x3D;&#x3D; StepState.error ? CrossFadeState.showSecond : CrossFadeState.showFirst,</span><br><span class="line">        duration: kThemeAnimationDuration,</span><br><span class="line">      );</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      if (widget.steps[index].state !&#x3D; StepState.error)</span><br><span class="line">        return _buildCircle(index, false);</span><br><span class="line">      else</span><br><span class="line">        return _buildTriangle(index, false);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildVerticalControls() &#123;</span><br><span class="line">    if (widget.controlsBuilder !&#x3D; null)</span><br><span class="line">      return widget.controlsBuilder(context, onStepContinue: widget.onStepContinue, onStepCancel: widget.onStepCancel);</span><br><span class="line"></span><br><span class="line">    Color cancelColor;</span><br><span class="line"></span><br><span class="line">    switch (Theme.of(context).brightness) &#123;</span><br><span class="line">      case Brightness.light:</span><br><span class="line">        cancelColor &#x3D; Colors.black54;</span><br><span class="line">        break;</span><br><span class="line">      case Brightness.dark:</span><br><span class="line">        cancelColor &#x3D; Colors.white70;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assert(cancelColor !&#x3D; null);</span><br><span class="line"></span><br><span class="line">    final ThemeData themeData &#x3D; Theme.of(context);</span><br><span class="line">    final MaterialLocalizations localizations &#x3D; MaterialLocalizations.of(context);</span><br><span class="line"></span><br><span class="line">    return Container(</span><br><span class="line">      margin: const EdgeInsets.only(top: 16.0),</span><br><span class="line">      child: ConstrainedBox(</span><br><span class="line">        constraints: const BoxConstraints.tightFor(height: 48.0),</span><br><span class="line">        child: Row(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            FlatButton(</span><br><span class="line">              onPressed: widget.onStepContinue,</span><br><span class="line">              color: _isDark() ? themeData.backgroundColor : themeData.primaryColor,</span><br><span class="line">              textColor: Colors.white,</span><br><span class="line">              textTheme: ButtonTextTheme.normal,</span><br><span class="line">              child: Text(localizations.continueButtonLabel),</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              margin: const EdgeInsetsDirectional.only(start: 8.0),</span><br><span class="line">              child: FlatButton(</span><br><span class="line">                onPressed: widget.onStepCancel,</span><br><span class="line">                textColor: cancelColor,</span><br><span class="line">                textTheme: ButtonTextTheme.normal,</span><br><span class="line">                child: Text(localizations.cancelButtonLabel),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TextStyle _titleStyle(int index) &#123;</span><br><span class="line">    final ThemeData themeData &#x3D; Theme.of(context);</span><br><span class="line">    final TextTheme textTheme &#x3D; themeData.textTheme;</span><br><span class="line"></span><br><span class="line">    assert(widget.steps[index].state !&#x3D; null);</span><br><span class="line">    switch (widget.steps[index].state) &#123;</span><br><span class="line">      case StepState.indexed:</span><br><span class="line">      case StepState.editing:</span><br><span class="line">      case StepState.complete:</span><br><span class="line">        return textTheme.body2;</span><br><span class="line">      case StepState.disabled:</span><br><span class="line">        return textTheme.body2.copyWith(</span><br><span class="line">          color: _isDark() ? _kDisabledDark : _kDisabledLight</span><br><span class="line">        );</span><br><span class="line">      case StepState.error:</span><br><span class="line">        return textTheme.body2.copyWith(</span><br><span class="line">          color: _isDark() ? _kErrorDark : _kErrorLight</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TextStyle _subtitleStyle(int index) &#123;</span><br><span class="line">    final ThemeData themeData &#x3D; Theme.of(context);</span><br><span class="line">    final TextTheme textTheme &#x3D; themeData.textTheme;</span><br><span class="line"></span><br><span class="line">    assert(widget.steps[index].state !&#x3D; null);</span><br><span class="line">    switch (widget.steps[index].state) &#123;</span><br><span class="line">      case StepState.indexed:</span><br><span class="line">      case StepState.editing:</span><br><span class="line">      case StepState.complete:</span><br><span class="line">        return textTheme.caption;</span><br><span class="line">      case StepState.disabled:</span><br><span class="line">        return textTheme.caption.copyWith(</span><br><span class="line">          color: _isDark() ? _kDisabledDark : _kDisabledLight</span><br><span class="line">        );</span><br><span class="line">      case StepState.error:</span><br><span class="line">        return textTheme.caption.copyWith(</span><br><span class="line">          color: _isDark() ? _kErrorDark : _kErrorLight</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildHeaderText(int index) &#123;</span><br><span class="line">    return Column(</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">      mainAxisSize: MainAxisSize.min,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        AnimatedDefaultTextStyle(</span><br><span class="line">          style: _titleStyle(index),</span><br><span class="line">          duration: kThemeAnimationDuration,</span><br><span class="line">          curve: Curves.fastOutSlowIn,</span><br><span class="line">          child: widget.steps[index].title,</span><br><span class="line">        ),</span><br><span class="line">        if (widget.steps[index].subtitle !&#x3D; null)</span><br><span class="line">          Container(</span><br><span class="line">            margin: const EdgeInsets.only(top: 2.0),</span><br><span class="line">            child: AnimatedDefaultTextStyle(</span><br><span class="line">              style: _subtitleStyle(index),</span><br><span class="line">              duration: kThemeAnimationDuration,</span><br><span class="line">              curve: Curves.fastOutSlowIn,</span><br><span class="line">              child: widget.steps[index].subtitle,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildVerticalHeader(int index) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      margin: const EdgeInsets.symmetric(horizontal: 24.0),</span><br><span class="line">      child: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Column(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              &#x2F;&#x2F; Line parts are always added in order for the ink splash to</span><br><span class="line">              &#x2F;&#x2F; flood the tips of the connector lines.</span><br><span class="line">              _buildLine(!_isFirst(index)),</span><br><span class="line">              _buildIcon(index),</span><br><span class="line">              _buildLine(!_isLast(index)),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          Container(</span><br><span class="line">            margin: const EdgeInsetsDirectional.only(start: 12.0),</span><br><span class="line">            child: _buildHeaderText(index),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildVerticalBody(int index) &#123;</span><br><span class="line">    return Stack(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        PositionedDirectional(</span><br><span class="line">          start: 24.0,</span><br><span class="line">          top: 0.0,</span><br><span class="line">          bottom: 0.0,</span><br><span class="line">          child: SizedBox(</span><br><span class="line">            width: 24.0,</span><br><span class="line">            child: Center(</span><br><span class="line">              child: SizedBox(</span><br><span class="line">                width: _isLast(index) ? 0.0 : 1.0,</span><br><span class="line">                child: Container(</span><br><span class="line">                  color: Colors.grey.shade400,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        AnimatedCrossFade(</span><br><span class="line">          firstChild: Container(height: 0.0),</span><br><span class="line">          secondChild: Container(</span><br><span class="line">            margin: const EdgeInsetsDirectional.only(</span><br><span class="line">              start: 60.0,</span><br><span class="line">              end: 24.0,</span><br><span class="line">              bottom: 24.0,</span><br><span class="line">            ),</span><br><span class="line">            child: Column(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                widget.steps[index].content,</span><br><span class="line">                _buildVerticalControls(),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          firstCurve: const Interval(0.0, 0.6, curve: Curves.fastOutSlowIn),</span><br><span class="line">          secondCurve: const Interval(0.4, 1.0, curve: Curves.fastOutSlowIn),</span><br><span class="line">          sizeCurve: Curves.fastOutSlowIn,</span><br><span class="line">          crossFadeState: _isCurrent(index) ? CrossFadeState.showSecond : CrossFadeState.showFirst,</span><br><span class="line">          duration: kThemeAnimationDuration,</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildVertical() &#123;</span><br><span class="line">    return ListView(</span><br><span class="line">      shrinkWrap: true,</span><br><span class="line">      physics: widget.physics,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        for (int i &#x3D; 0; i &lt; widget.steps.length; i +&#x3D; 1)</span><br><span class="line">          Column(</span><br><span class="line">            key: _keys[i],</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              InkWell(</span><br><span class="line">                onTap: widget.steps[i].state !&#x3D; StepState.disabled ? () &#123;</span><br><span class="line">                  &#x2F;&#x2F; In the vertical case we need to scroll to the newly tapped</span><br><span class="line">                  &#x2F;&#x2F; step.</span><br><span class="line">                  Scrollable.ensureVisible(</span><br><span class="line">                    _keys[i].currentContext,</span><br><span class="line">                    curve: Curves.fastOutSlowIn,</span><br><span class="line">                    duration: kThemeAnimationDuration,</span><br><span class="line">                  );</span><br><span class="line"></span><br><span class="line">                  if (widget.onStepTapped !&#x3D; null)</span><br><span class="line">                    widget.onStepTapped(i);</span><br><span class="line">                &#125; : null,</span><br><span class="line">                canRequestFocus: widget.steps[i].state !&#x3D; StepState.disabled,</span><br><span class="line">                child: _buildVerticalHeader(i),</span><br><span class="line">              ),</span><br><span class="line">              _buildVerticalBody(i),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildHorizontal() &#123;</span><br><span class="line">    final List&lt;Widget&gt; children &#x3D; &lt;Widget&gt;[</span><br><span class="line">      for (int i &#x3D; 0; i &lt; widget.steps.length; i +&#x3D; 1) ...&lt;Widget&gt;[</span><br><span class="line">        InkResponse(</span><br><span class="line">          onTap: widget.steps[i].state !&#x3D; StepState.disabled ? () &#123;</span><br><span class="line">            if (widget.onStepTapped !&#x3D; null)</span><br><span class="line">              widget.onStepTapped(i);</span><br><span class="line">          &#125; : null,</span><br><span class="line">          canRequestFocus: widget.steps[i].state !&#x3D; StepState.disabled,</span><br><span class="line">          child: Row(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                height: 72.0,</span><br><span class="line">                child: Center(</span><br><span class="line">                  child: _buildIcon(i),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                margin: const EdgeInsetsDirectional.only(start: 12.0),</span><br><span class="line">                child: _buildHeaderText(i),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        if (!_isLast(i))</span><br><span class="line">          Expanded(</span><br><span class="line">            child: Container(</span><br><span class="line">              margin: const EdgeInsets.symmetric(horizontal: 8.0),</span><br><span class="line">              height: 1.0,</span><br><span class="line">              color: Colors.grey.shade400,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">      ],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    return Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Material(</span><br><span class="line">          elevation: 2.0,</span><br><span class="line">          child: Container(</span><br><span class="line">            margin: const EdgeInsets.symmetric(horizontal: 24.0),</span><br><span class="line">            child: Row(</span><br><span class="line">              children: children,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Expanded(</span><br><span class="line">          child: ListView(</span><br><span class="line">            padding: const EdgeInsets.all(24.0),</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              AnimatedSize(</span><br><span class="line">                curve: Curves.fastOutSlowIn,</span><br><span class="line">                duration: kThemeAnimationDuration,</span><br><span class="line">                vsync: this,</span><br><span class="line">                child: widget.steps[widget.currentStep].content,</span><br><span class="line">              ),</span><br><span class="line">              _buildVerticalControls(),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    assert(debugCheckHasMaterial(context));</span><br><span class="line">    assert(debugCheckHasMaterialLocalizations(context));</span><br><span class="line">    assert(() &#123;</span><br><span class="line">      if (context.findAncestorWidgetOfExactType&lt;Stepper&gt;() !&#x3D; null)</span><br><span class="line">        throw FlutterError(</span><br><span class="line">          &#39;Steppers must not be nested.\n&#39;</span><br><span class="line">          &#39;The material specification advises that one should avoid embedding &#39;</span><br><span class="line">          &#39;steppers within steppers. &#39;</span><br><span class="line">          &#39;https:&#x2F;&#x2F;material.io&#x2F;archive&#x2F;guidelines&#x2F;components&#x2F;steppers.html#steppers-usage&#39;</span><br><span class="line">        );</span><br><span class="line">      return true;</span><br><span class="line">    &#125;());</span><br><span class="line">    assert(widget.type !&#x3D; null);</span><br><span class="line">    switch (widget.type) &#123;</span><br><span class="line">      case StepperType.vertical:</span><br><span class="line">        return _buildVertical();</span><br><span class="line">      case StepperType.horizontal:</span><br><span class="line">        return _buildHorizontal();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Paints a triangle whose base is the bottom of the bounding rectangle and its</span><br><span class="line">&#x2F;&#x2F; top vertex the middle of its top.</span><br><span class="line">class _TrianglePainter extends CustomPainter &#123;</span><br><span class="line">  _TrianglePainter(&#123;</span><br><span class="line">    this.color,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  final Color color;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool hitTest(Offset point) &#x3D;&gt; true; &#x2F;&#x2F; Hitting the rectangle is fine enough.</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool shouldRepaint(_TrianglePainter oldPainter) &#123;</span><br><span class="line">    return oldPainter.color !&#x3D; color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    final double base &#x3D; size.width;</span><br><span class="line">    final double halfBase &#x3D; size.width &#x2F; 2.0;</span><br><span class="line">    final double height &#x3D; size.height;</span><br><span class="line">    final List&lt;Offset&gt; points &#x3D; &lt;Offset&gt;[</span><br><span class="line">      Offset(0.0, height),</span><br><span class="line">      Offset(base, height),</span><br><span class="line">      Offset(halfBase, 0.0),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    canvas.drawPath(</span><br><span class="line">      Path()..addPolygon(points, true),</span><br><span class="line">      Paint()..color &#x3D; color,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><ul>
<li>StatelessWidget</li>
<li>StatefulWidget</li>
<li>InheritedWidget //多层父子直接传递数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class StateManagementDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _StateManagementDemoState createState() &#x3D;&gt; _StateManagementDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _StateManagementDemoState extends State&lt;StateManagementDemo&gt; &#123;</span><br><span class="line"></span><br><span class="line">  int _count &#x3D; 0;</span><br><span class="line">  void _icAction()&#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _count++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return CountProvicer(</span><br><span class="line">      count:_count,</span><br><span class="line">      ic: _icAction,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title:Text(&quot;statemannager&quot;),</span><br><span class="line">          elevation:0,</span><br><span class="line">        ),</span><br><span class="line">        &#x2F;&#x2F;层层传递</span><br><span class="line">        &#x2F;&#x2F; body:CountDemo(_count,_icAction),</span><br><span class="line">        &#x2F;&#x2F;Provider 管理</span><br><span class="line">        body:CountDemo(),</span><br><span class="line">        floatingActionButton: FloatingActionButton(</span><br><span class="line">          child: Icon(Icons.add),</span><br><span class="line">          onPressed: ()&#123;</span><br><span class="line">            &#x2F;&#x2F;小部件重建,显示变化的状态</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              _count++;</span><br><span class="line">            &#125;);</span><br><span class="line">            debugPrint(&quot;$_count&quot;);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CountDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    &#x2F;&#x2F;  使用InheritedWidget</span><br><span class="line">    final int count &#x3D; CountProvicer.of(context).count;</span><br><span class="line">    final VoidCallback ic &#x3D; CountProvicer.of(context).ic;</span><br><span class="line"></span><br><span class="line">    return  Center(</span><br><span class="line">        child:ActionChip(</span><br><span class="line">          label:Text(&quot;$count&quot;),</span><br><span class="line">          onPressed: ic,</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CountProvicer extends InheritedWidget&#123;</span><br><span class="line">  &#x2F;&#x2F; 第三方 scope_model provide 也可以</span><br><span class="line">  &#x2F;&#x2F;直接传递数据</span><br><span class="line"></span><br><span class="line">  final int count;</span><br><span class="line">  final VoidCallback ic;</span><br><span class="line">  final Widget child;</span><br><span class="line"></span><br><span class="line">  CountProvicer(&#123;</span><br><span class="line">    this.count,</span><br><span class="line">    this.ic,</span><br><span class="line">    this.child</span><br><span class="line">  &#125;):super(child:child);</span><br><span class="line"></span><br><span class="line">  static CountProvicer of(BuildContext c) &#x3D;&gt; c.inheritFromWidgetOfExactType(CountProvicer);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  &#x2F;&#x2F;小部件是否需要重建</span><br><span class="line">  bool updateShouldNotify(InheritedWidget oldWidget) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CountDemo extends StatelessWidget &#123;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;  由父类管理</span><br><span class="line">  final int count;</span><br><span class="line">  final VoidCallback ic;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;这个数据传递需要一层一层的传递下来</span><br><span class="line">  const CountDemo(this.count,this.ic);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return  Center(</span><br><span class="line">        child:ActionChip(</span><br><span class="line">          label:Text(&quot;$count&quot;),</span><br><span class="line">          onPressed: ic,</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class StateManagementDemo extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;StatelessWidget 不包含可以变化的状态 状态可以理解为校部件的数据 由于部件的状态时不可变的 收益不会改变</span><br><span class="line">  int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;statemannager&quot;),</span><br><span class="line">        elevation:0,</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child:Chip(</span><br><span class="line">          label:Text(&quot;$count&quot;),</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(onPressed: </span><br><span class="line">        ()&#123;</span><br><span class="line">          count++;</span><br><span class="line">          debugPrint(&quot;$count&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2></li>
<li>StreamSubscription</li>
<li>StreamController</li>
<li>StreamSink<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;dart:async&#39;;</span><br><span class="line"></span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Stream 用来处理连续的异步操作</span><br><span class="line"></span><br><span class="line">class StreamDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;StreamDemo&quot;),</span><br><span class="line">        elevation:0,</span><br><span class="line">      ),</span><br><span class="line">      body: StreamHome(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class StreamHome extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _StreamHomeState createState() &#x3D;&gt; _StreamHomeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _StreamHomeState extends State&lt;StreamHome&gt; &#123;</span><br><span class="line"></span><br><span class="line">  StreamSubscription _streamSubscription;</span><br><span class="line">  &#x2F;&#x2F;用于控制Stream</span><br><span class="line">  StreamController&lt;String&gt; _streamController;</span><br><span class="line">  StreamSink _streamSink;</span><br><span class="line">  String _data &#x3D; &quot;....&quot;;</span><br><span class="line">  @override</span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    _streamController.close();</span><br><span class="line">    super.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    super.initState();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    _streamController &#x3D; StreamController.broadcast();</span><br><span class="line">    _streamSubscription &#x3D; _streamController.stream.listen(onData,onError:onError,onDone: onDone );</span><br><span class="line">    _streamSubscription &#x3D; _streamController.stream.listen(onData2,onError:onError2,onDone: onDone2 );</span><br><span class="line"></span><br><span class="line">    _streamSink &#x3D; _streamController.sink;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    &#x2F;&#x2F;单订阅</span><br><span class="line">    _streamController &#x3D; StreamController&lt;String&gt;();</span><br><span class="line">    </span><br><span class="line">    _streamSubscription &#x3D; _streamController.stream.listen(onData,onError:onError,onDone: onDone );</span><br><span class="line">    _streamSink &#x3D; _streamController.sink;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    Stream&lt;String&gt; _StreamDemo &#x3D; Stream.fromFuture(fetchData());</span><br><span class="line">    _streamSubscription &#x3D; _StreamDemo.listen(onData,onError:onError,onDone: onDone );</span><br><span class="line">    *&#x2F;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void onData2(String data)&#123;</span><br><span class="line">    print(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void onError2(error)&#123;</span><br><span class="line">    print(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void onDone2()&#123;</span><br><span class="line">    print(&#39;onDone&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void onData(String data)&#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _data &#x3D; data;</span><br><span class="line">    &#125;);</span><br><span class="line">    print(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void onError(error)&#123;</span><br><span class="line">    print(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void onDone()&#123;</span><br><span class="line">    print(&#39;onDone&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;String&gt; fetchData() async&#123;</span><br><span class="line">    await Future.delayed(Duration(seconds:3));</span><br><span class="line">    return &#39;hank&#39;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void _pause()&#123;</span><br><span class="line">    _streamSubscription.pause();</span><br><span class="line">  &#125;</span><br><span class="line">  void _resume()&#123;</span><br><span class="line">    _streamSubscription.resume();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  void _cancel()&#123;</span><br><span class="line">    _streamSubscription.cancel();</span><br><span class="line">  &#125;</span><br><span class="line">  void _add() async&#123;</span><br><span class="line">    String data &#x3D; await fetchData();</span><br><span class="line">    &#x2F;&#x2F; _streamController.add(data);</span><br><span class="line">    _streamSink.add(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    return Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        &#x2F;&#x2F; Text(&#39;$_data&#39;),</span><br><span class="line">        StreamBuilder(</span><br><span class="line">          stream: _streamController.stream,</span><br><span class="line">          initialData: &#39;...&#39;,</span><br><span class="line">          builder: (c,d)&#123;</span><br><span class="line">            return Text(&quot;$&#123;d.data&#125;&quot;);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        Row(</span><br><span class="line">          children: &lt;Widget&gt;[   </span><br><span class="line">            FlatButton(onPressed: _add, child: Text(&quot;add&quot;)),</span><br><span class="line">            FlatButton(onPressed: _pause, child: Text(&quot;pause&quot;)),</span><br><span class="line">            FlatButton(onPressed: _resume, child: Text(&quot;resume&quot;)),</span><br><span class="line">            FlatButton(onPressed: _cancel, child: Text(&quot;cancel&quot;)),</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="rxdart"><a href="#rxdart" class="headerlink" title="rxdart"></a>rxdart</h2><ul>
<li>PublishSubject</li>
<li>BehaviorSubject</li>
<li>ReplaySubject<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line">import &#39;package:rxdart&#x2F;rxdart.dart&#39;;</span><br><span class="line">import &#39;dart:async&#39;;</span><br><span class="line"></span><br><span class="line">class RxdaerDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(title:Text(&quot;RxdaerDemoHome&quot;)),</span><br><span class="line">      body: RxdaerDemoHome(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class RxdaerDemoHome extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _RxdaerDemoHomeState createState() &#x3D;&gt; _RxdaerDemoHomeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _RxdaerDemoHomeState extends State&lt;RxdaerDemoHome&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  PublishSubject&lt;String&gt; _textFieldSubject;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    super.initState();</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 创建Observable的几种方法</span><br><span class="line">&#x2F;&#x2F;    Observable&lt;String&gt; _observable &#x3D; Observable(Stream.fromIterable([&#39;Hello&#39;, &#39;World&#39;]));</span><br><span class="line">&#x2F;&#x2F;    Observable&lt;String&gt; _observable &#x3D; Observable.fromFuture(Future.value(&#39;Future创建的&#39;));</span><br><span class="line">&#x2F;&#x2F;    Observable&lt;String&gt; _observable &#x3D; Observable.just(&#39;just创建的&#39;);</span><br><span class="line">    &#x2F;&#x2F; 使用 periodic 这个工厂方法可以创建在指定时间间隔重复触发事件的 observable</span><br><span class="line">    &#x2F;&#x2F; Duration ：间隔的时间，后面提供重复要做的方法，这个方法可以接收一个参数就是重复的次数用x来表示，在方法里可以制作并且返回每次的数据，这里返回每间隔3秒中返回重复的次数</span><br><span class="line">&#x2F;&#x2F;    Observable&lt;String&gt; _observable &#x3D; Observable.periodic(Duration(seconds: 3), (x) &#x3D;&gt; x.toString());</span><br><span class="line">&#x2F;&#x2F;    _observable.listen(print);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 使用subject控制Observable</span><br><span class="line">    &#x2F;&#x2F; PublishSubject 需要先设置监听再添加数据才能监听到</span><br><span class="line">   &#x2F;&#x2F;PublishSubject&lt;String&gt; _subject &#x3D; PublishSubject&lt;String&gt;();</span><br><span class="line">    &#x2F;&#x2F; BehaviorSubject 可以把最后一次添加的数据作为第一个项目交给新来的监听</span><br><span class="line">  &#x2F;&#x2F;  BehaviorSubject&lt;String&gt; _subject &#x3D; BehaviorSubject&lt;String&gt;();</span><br><span class="line">    &#x2F;&#x2F; ReplaySubject 把添加到subject的数据全部交给监听器，maxSize可以设置最大接收数据的个数 </span><br><span class="line">  &#x2F;&#x2F;  ReplaySubject&lt;String&gt; _subject &#x3D; ReplaySubject&lt;String&gt;(maxSize: 2); 假如设置2的话, 只能收到最后2个 </span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;  _subject.add(&#39;add Data 1&#39;);</span><br><span class="line">  &#x2F;&#x2F;  _subject.add(&#39;add Data 2&#39;);</span><br><span class="line">  &#x2F;&#x2F;  _subject.add(&#39;add Data 3&#39;);</span><br><span class="line">  &#x2F;&#x2F;  _subject.add(&#39;add Data 4&#39;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;  _subject.listen((data) &#x3D;&gt; print(&#39;listen 1: $data&#39;));</span><br><span class="line">  &#x2F;&#x2F;  _subject.listen((data) &#x3D;&gt; print(&#39;listen 2: $&#123;data.toUpperCase()&#125;&#39;));</span><br><span class="line">  &#x2F;&#x2F;  _subject.close();</span><br><span class="line"></span><br><span class="line">   ;</span><br><span class="line">      _textFieldSubject &#x3D; PublishSubject&lt;String&gt;();</span><br><span class="line">      _textFieldSubject</span><br><span class="line">      &#x2F;&#x2F; .map((i)&#x3D;&gt;&quot;item:&quot;+i)</span><br><span class="line">      &#x2F;&#x2F; .where((i)&#x3D;&gt;i.length&gt;9)</span><br><span class="line">      .debounceTime(Duration(milliseconds: 500))&#x2F;&#x2F;停止输入过来500ms显示</span><br><span class="line">      .listen((data) &#x3D;&gt; print(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @override</span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    super.dispose();</span><br><span class="line">    _textFieldSubject.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return TextField(</span><br><span class="line">        decoration: InputDecoration(labelText: &#39;Title&#39;, filled: true),</span><br><span class="line">        onChanged: (value) &#123;</span><br><span class="line">          _textFieldSubject.add(&#39;input: $value&#39;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onSubmitted: (value) &#123;</span><br><span class="line">          _textFieldSubject.add(&#39;submit: $value&#39;);</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="BLoC"><a href="#BLoC" class="headerlink" title="BLoC"></a>BLoC</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;dart:async&#39;;</span><br><span class="line"></span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BlocDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    return CounterProvider(</span><br><span class="line">      bloc: CounterBloc(),</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title:Text(&quot;BlocDemo&quot;)</span><br><span class="line">        ),</span><br><span class="line">        body: CounterDemo(),</span><br><span class="line">        floatingActionButton: CountActionButton(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CounterBloc&#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;事务的处理</span><br><span class="line">  </span><br><span class="line">  int _count &#x3D; 0;</span><br><span class="line">  final _cac &#x3D; StreamController&lt;int&gt;();</span><br><span class="line">  StreamSink&lt;int&gt; get counter &#x3D;&gt; _cac.sink;</span><br><span class="line"></span><br><span class="line">  final _caci &#x3D; StreamController&lt;int&gt;();</span><br><span class="line">  Stream&lt;int&gt; get count &#x3D;&gt; _caci.stream;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;创建的时候监听_cac的stream</span><br><span class="line">  CounterBloc()&#123;</span><br><span class="line">    _cac.stream.listen(onData);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void onData(int data)&#123;</span><br><span class="line">    print(&#39;$data&#39;);</span><br><span class="line">    _count &#x3D; data + _count;</span><br><span class="line">    _caci.add(_count);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void disponse()&#123;</span><br><span class="line">    _cac.close();</span><br><span class="line">    _caci.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void log()&#123;</span><br><span class="line">    print(&#39;BLoc&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CounterProvider extends InheritedWidget&#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;管理事务与更新控件</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool updateShouldNotify(InheritedWidget oldWidget) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  final Widget child;</span><br><span class="line">  final CounterBloc bloc;</span><br><span class="line"></span><br><span class="line">  CounterProvider(&#123;</span><br><span class="line">    this.child,</span><br><span class="line">    this.bloc</span><br><span class="line">  &#125;):super(child:child);</span><br><span class="line"></span><br><span class="line">  static CounterProvider of(BuildContext context) &#x3D;&gt; context.inheritFromWidgetOfExactType(CounterProvider);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CounterDemo extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    CounterBloc _cb &#x3D; CounterProvider.of(context).bloc;</span><br><span class="line"></span><br><span class="line">    return StreamBuilder(</span><br><span class="line">      builder: (BuildContext context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">        return ActionChip(</span><br><span class="line">          label: Text(&#39;$&#123;snapshot.data&#125;&#39;), onPressed: () &#123;</span><br><span class="line">            _cb.log();</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      initialData: 0,</span><br><span class="line">      stream: _cb.count,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CountActionButton extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    CounterBloc _cb &#x3D; CounterProvider.of(context).bloc;</span><br><span class="line"></span><br><span class="line">    return FloatingActionButton(</span><br><span class="line">      child: Icon(Icons.add),</span><br><span class="line">      onPressed: ()&#123;</span><br><span class="line">        &#x2F;&#x2F; _cb.log();</span><br><span class="line">        _cb.counter.add(1);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul>
<li>AnimationController</li>
<li>Animation</li>
<li>CurvedAnimation<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class AnimationDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title:Text(&quot;AnimationDemo&quot;)</span><br><span class="line">      ),</span><br><span class="line">      body: AnimationDemoHome(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AnimationDemoHome extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _AnimationDemoHomeState createState() &#x3D;&gt; _AnimationDemoHomeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _AnimationDemoHomeState extends State&lt;AnimationDemoHome&gt; with TickerProviderStateMixin&#123;</span><br><span class="line">  </span><br><span class="line">  AnimationController _animationController;</span><br><span class="line">  &#x2F;&#x2F;动画值</span><br><span class="line">  Animation _animation;</span><br><span class="line">  &#x2F;&#x2F;颜色</span><br><span class="line">  Animation _animationColor;</span><br><span class="line">  &#x2F;&#x2F;曲线</span><br><span class="line">  CurvedAnimation _animationCurved;</span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    super.initState();</span><br><span class="line">    _animationController &#x3D; AnimationController(</span><br><span class="line">      &#x2F;&#x2F; value: 50,</span><br><span class="line">      &#x2F;&#x2F; lowerBound: 50,</span><br><span class="line">      &#x2F;&#x2F; upperBound: 100,</span><br><span class="line">      duration: Duration(milliseconds:1000),</span><br><span class="line">      vsync: this,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;曲线</span><br><span class="line">    _animationCurved &#x3D; CurvedAnimation(parent: _animationController,curve: Curves.bounceInOut);</span><br><span class="line">    _animation &#x3D; Tween(begin: 32.0,end: 100.0).animate(_animationCurved);</span><br><span class="line">    _animationColor &#x3D; ColorTween(begin:Colors.red,end:Colors.green).animate(_animationCurved);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;_animation &#x3D; Tween(begin: 32.0,end: 100.0).animate(_animationController);</span><br><span class="line">    &#x2F;&#x2F;_animationColor &#x3D; ColorTween(begin:Colors.red,end:Colors.green).animate(_animationController);</span><br><span class="line">    _animationController.addListener(()&#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    _animationController.addStatusListener((AnimationStatus animationStatus)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    super.dispose();</span><br><span class="line">    _animationController.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    return Center(</span><br><span class="line">      child:IconButton(</span><br><span class="line">        icon:Icon(Icons.favorite),</span><br><span class="line">        iconSize: _animation.value,</span><br><span class="line">        color: _animationColor.value,</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">         if (_animationController.status &#x3D;&#x3D; AnimationStatus.completed)&#123;</span><br><span class="line">            _animationController.reverse();</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            _animationController.forward();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    return Center(</span><br><span class="line">      child: ActionChip(label: Text(&quot;$&#123;_animationController.value&#125;&quot;), onPressed: ()&#123;</span><br><span class="line">         if (_animationController.status &#x3D;&#x3D; AnimationStatus.completed)&#123;</span><br><span class="line">          _animationController.reverse();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          _animationController.forward();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<pre><code>


</code></pre>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
  </entry>
</search>
